#-----------------------------------------------------
#Copyright (C) Rodolfo Lopez rodolfo.lopez@grcbit.com
#-----------------------------------------------------
from datetime import date, datetime, timedelta
import os
import base64
import time
import math
from decimal import Decimal as D
#------------------------------------------------------------------------
demo = False              #Restringir las funciones por privilegios
cargaInicial = False    #Hacer una carga incial de resgitros
#------------------------------------------------------------------------

if cargaInicial == True:
    #-----------
    #Usuarios
    #-----------
    db.auth_user.update_or_insert((db.auth_user.id==1),id=1, first_name="admin", last_name="admin", email="admin@mail.com", username="admin", password=db.auth_user.password.validate('Password01')[0])
    db.auth_user.update_or_insert((db.auth_user.id==2),id=2, first_name="guest", last_name="guest", email="guest@mail.com", username="guest", password=db.auth_user.password.validate('Password01')[0])
    db.auth_user.update_or_insert((db.auth_user.id==3),id=3, first_name="riskManager", last_name="riskManager", email="riskManager@mail.com", username="riskManager", password=db.auth_user.password.validate('Password01')[0])
    db.auth_user.update_or_insert((db.auth_user.id==4),id=4, first_name="riskAnalyst", last_name="riskAnalyst", email="riskAnalyst@mail.com", username="riskAnalyst", password=db.auth_user.password.validate('Password01')[0])
    db.auth_user.update_or_insert((db.auth_user.id==5),id=5, first_name="auditManager", last_name="auditManager", email="auditManager@mail.com", username="auditManager", password=db.auth_user.password.validate('Password01')[0])
    db.auth_user.update_or_insert((db.auth_user.id==6),id=6, first_name="auditAnalyst", last_name="auditAnalyst", email="auditAnalyst@mail.com", username="auditAnalyst", password=db.auth_user.password.validate('Password01')[0])
    db.auth_user.update_or_insert((db.auth_user.id==7),id=7, first_name="processOwner", last_name="processOwner", email="processOwner@mail.com", username="processOwner", password=db.auth_user.password.validate('Password01')[0])
    db.auth_user.update_or_insert((db.auth_user.id==8),id=8, first_name="controlResp", last_name="controlResp", email="controlResp@mail.com", username="controlResp", password=db.auth_user.password.validate('Password01')[0])
    db.auth_user.update_or_insert((db.auth_user.id==9),id=9, first_name="informationOwner", last_name="informationOwner", email="informationOwner@mail.com", username="informationOwner", password=db.auth_user.password.validate('Password01')[0])
    db.auth_user.update_or_insert((db.auth_user.id==10),id=10, first_name="itAdmin", last_name="itAdmin", email="itAdmin@mail.com", username="itAdmin", password=db.auth_user.password.validate('Password01')[0])
    db.auth_user.update_or_insert((db.auth_user.id==11),id=11, first_name="riskOwner", last_name="riskOwner", email="riskOwner@mail.com", username="riskOwner", password=db.auth_user.password.validate('Password01')[0])
    #--------
    #Grupos
    #--------
    db.auth_group.update_or_insert((db.auth_group.id==1),id=1, role="admin", description="admin")
    db.auth_group.update_or_insert((db.auth_group.id==2),id=2, role="guest", description="guest")
    db.auth_group.update_or_insert((db.auth_group.id==3),id=3, role="riskManager", description="riskManager")
    db.auth_group.update_or_insert((db.auth_group.id==4),id=4, role="riskAnalyst", description="riskAnalyst")
    db.auth_group.update_or_insert((db.auth_group.id==5),id=5, role="auditManager", description="auditManager")
    db.auth_group.update_or_insert((db.auth_group.id==6),id=6, role="auditAnalyst", description="auditAnalyst")
    db.auth_group.update_or_insert((db.auth_group.id==7),id=7, role="processOwner", description="processOwner")
    db.auth_group.update_or_insert((db.auth_group.id==8),id=8, role="controlResp", description="controlResp")
    db.auth_group.update_or_insert((db.auth_group.id==9),id=9, role="informationOwner", description="informationOwner")
    db.auth_group.update_or_insert((db.auth_group.id==10),id=10, role="itAdmin", description="itAdmin")
    db.auth_group.update_or_insert((db.auth_group.id==11),id=11, role="riskOwner", description="riskOwner")
    #-----------
    #Membership
    #-----------
    db.auth_membership.update_or_insert((db.auth_membership.id==1),id=1, user_id=1, group_id=1)
    db.auth_membership.update_or_insert((db.auth_membership.id==2),id=2, user_id=2, group_id=2)
    db.auth_membership.update_or_insert((db.auth_membership.id==3),id=3, user_id=3, group_id=3)
    db.auth_membership.update_or_insert((db.auth_membership.id==4),id=4, user_id=4, group_id=4)
    db.auth_membership.update_or_insert((db.auth_membership.id==5),id=5, user_id=5, group_id=5)
    db.auth_membership.update_or_insert((db.auth_membership.id==6),id=6, user_id=6, group_id=6)
    db.auth_membership.update_or_insert((db.auth_membership.id==7),id=7, user_id=7, group_id=7)
    db.auth_membership.update_or_insert((db.auth_membership.id==8),id=8, user_id=8, group_id=8)
    db.auth_membership.update_or_insert((db.auth_membership.id==9),id=9, user_id=9, group_id=9)
    db.auth_membership.update_or_insert((db.auth_membership.id==10),id=10, user_id=10, group_id=10)
    db.auth_membership.update_or_insert((db.auth_membership.id==11),id=11, user_id=11, group_id=11)
    #-------------
    #TipoObjetivo
    #-------------
    db.TipoObjetivo.update_or_insert((db.TipoObjetivo.id==1), id=1, Nombre="Operacional (Operational)", Descripcion="Garantizar operaciones efectivas y eficaces. Hacen referencia a la eficacia y eficiencia de las operaciones de la organización, incluidos sus objetivos de desempeño, financieros y operativos, y la protección de sus activos frente a posibles perdidas (It refers to the effectiveness and efficiency of the organization's operations, including its performance, financial and operational objectives and the protection of its assets against any possible losses).", AprobacionJefeRiesgo='T')
    db.TipoObjetivo.update_or_insert((db.TipoObjetivo.id==2), id=2, Nombre="Información (Reporting)", Descripcion="Generar información financiera y no financiera suficiente y confiable. Hacen referencia a la información financiera y no financiera interna y externa, y pueden abarcar aspectos de fiabilidad, oportunidad, transparencia u otros conceptos establecidos por los reguladores, organismos de normalización o por las políticas de la propia organización (To produce sufficient and reliable financial internal and external information in a transparent manner according to the concepts established by the regulators, organisms and/or by the own policies of the Company).", AprobacionJefeRiesgo='T')
    db.TipoObjetivo.update_or_insert((db.TipoObjetivo.id==3), id=3, Nombre="Cumplimiento (Compliance)", Descripcion="Cumplir con las regulaciones aplicables, tanto internas como externas. Hacen referencia al cumplimiento de las leyes y regulaciones a las que está sujeta la organización. (It refers to the compliance of the laws and regulations to which the organization is subjected.)", AprobacionJefeRiesgo='T')
    db.TipoObjetivo.update_or_insert((db.TipoObjetivo.id==4), id=4, Nombre="Estratégico (Strategic)", Descripcion="Riesgos tanto para los objetivos estratégicos como de los objetivos estratégicos. La alta gerencia C-suite identifica los riesgos más importantes a través del proceso de planificación y obtiene aprobación de la Junta. (Senior management C-suite identifies the most important risks through the planning process and obtains Board approval).", AprobacionJefeRiesgo='T')
    #--------------------
    #ClasificacionRiesgo
    #--------------------
    db.ClasificacionRiesgo.update_or_insert((db.ClasificacionRiesgo.id==1), id=1, Nombre="Operacional (Operational)", Descripcion="Riesgos que afectan la habilidad de la organización para lograr el plan estratégico. El riesgo operacional es el tipo de riesgo que puede provocar pérdidas a la Organizacion debido a errores humanos, procesos internos inadecuados o defectuosos. (Risks that affect the ability of the organization to achieve its strategic plans. They can provoke losses to the Company due to human errors, inadequate or defective internal processes, failures in the systems, etc.)", AprobacionJefeRiesgo='T')
    db.ClasificacionRiesgo.update_or_insert((db.ClasificacionRiesgo.id==2), id=2, Nombre="Estratégico (Strategic)", Descripcion="El riesgo estratégico deriva de la aplicación indebida de las decisiones, o la falta de capacidad de respuesta a los cambios de la industria. Este riesgo es una función de la compatibilidad de los objetivos estratégicos de la Organizacion, las estrategias desarrolladas para alcanzar dichos objetivos, los recursos utilizados, así como la calidad de su ejecución, ejemplo: cambios económicos, tecnológicos, competitivos y regulatorios. La alta gerencia C-suite identifica los riesgos más importantes a través del proceso de planificación y obtiene aprobación de la Junta. (Risks derived from incorrect decision-making and/or from the inability to response to the changes happening in the industry. It determines the compatibility of the strategic objectives of the Company, the developed strategies to reach said objectives, the used resources and the quality of their Execution, examples: economic, technological, competitive and regulatory changes. The General Management C-suite identifies the most important risks which are then approved by the Committee.)", AprobacionJefeRiesgo='T')
    db.ClasificacionRiesgo.update_or_insert((db.ClasificacionRiesgo.id==3), id=3, Nombre="Cumplimiento (Compliance)", Descripcion="Es el riesgo del cumplimiento de las disposiciones legales, normas, organismos, instituciones reguladoras, estándares adoptados por la organización y códigos de conducta aplicables a las actividades de la Organización, que puede conllevar sanciones y/o deterioros de reputación, provocando en consecuencia un impacto adverso en los resultados, y/o en el capital, y/o en las expectativas de desarrollo de los negocios de la Organización. (The risk of Infringement to the current legal dispositions, norms, organisms, regulatory institutions, adopted standards by the Company and codes of conduct applicable to the activities of the Company that can lead to sanctions and/or reputational damage that subsequently impacts the results, capital, expectations of the development of the business.)", AprobacionJefeRiesgo='T')
    db.ClasificacionRiesgo.update_or_insert((db.ClasificacionRiesgo.id==4), id=4, Nombre="Financiero (Financial)", Descripcion="El riesgo financiero es la probabilidad de que un evento adverso o alguna fluctuación financiera reporte consecuencias negativas en una empresa, ejemplo: información financiera, valoración, cobertura, apalancamiento, deuda, riesgos de mercado y liquidez, y riesgos de crédito en instituciones financieras. (The risk of an inopportune event or financial fluctuation that bring negative consequences to the Company, for example: valuation, market risks, credits, liquidity, leverage, debts, etc.)", AprobacionJefeRiesgo='T')
    db.ClasificacionRiesgo.update_or_insert((db.ClasificacionRiesgo.id==5), id=5, Nombre="TI (IT)", Descripcion="Riesgos relacionados a elementos de TI que procesan, almacenan o transmiten información sensible, o que soportan procesos críticos en la organización. (Risks that are related to the IT elements that process, store or transmit sensible information or that support critical processes of the Company.)", AprobacionJefeRiesgo='T')
    #----------------------
    #TipoTratamientoRiesgo
    #----------------------
    db.TipoTratamientoRiesgo.update_or_insert((db.TipoTratamientoRiesgo.id==1), id=1, Nombre="Mitigar (Mitigate)", Descripcion="Se adoptan medidas para reducir la probabilidad o el impacto del riesgo o ambos; por lo general, puede conllevar cualquiera de las múltiples decisiones de negocio que se adoptan en el día a día de una organización. (Measures taken to reduce the probability or occurrence of the risk as well to reduce its impact in case of occurence. In general, it involves the multiple business decisions that are made daily in an organization.)", Color="Rosa (Pink)", AprobacionJefeRiesgo='T')
    db.TipoTratamientoRiesgo.update_or_insert((db.TipoTratamientoRiesgo.id==2), id=2, Nombre="Aceptar (Accept)", Descripcion="No se adopta ninguna medida que afecte a la probabilidad o al impacto del riesgo. (No measure is taken to decrease the probability or impact of the risk.)", Color="Purpura (Purple)", AprobacionJefeRiesgo='T')
    db.TipoTratamientoRiesgo.update_or_insert((db.TipoTratamientoRiesgo.id==3), id=3, Nombre="Evitar (Avoid)", Descripcion="Se abandonan las actividades que den lugar al riesgo; esto puede conllevar que se abandone una línea de producción, que se reduzca el grado de expansión en un nuevo mercado geográfico o que se venda una división. (The activites that give rise to the risk are abandoned; which can lead to the abandonment of a production line, a limited expansion in a new geographic market or the sale of a business segment.)", Color="Gris (Gray)", AprobacionJefeRiesgo='T')
    db.TipoTratamientoRiesgo.update_or_insert((db.TipoTratamientoRiesgo.id==4), id=4, Nombre="Compartir (Transfer)", Descripcion="Se reduce la probabilidad o el impacto al riesgo transfiriendo o compartiendo de cualquier otra manera una parte del riesgo; las técnicas que se utilizan más habitualmente incluyen la suscripción de seguros, el establecimiento de negocios, la cobertura de transacciones o la externalización de una actividad. (The probability or impact of the risk is reduced by handing it over or shared with a third party, such as, the suscription of insurances or outsourcing an activitiy.)", Color="Salmon (Salmon)", AprobacionJefeRiesgo='T')
    #------------------
    #GrupoFactorRiesgo
    #------------------
    db.TipoVulnerabilidad.update_or_insert((db.TipoVulnerabilidad.id==1), id=1, Nombre="Vulnerabilidades en Infraestructura (SO/BD/Red)", Descripcion="No se aplica un hardening adecuado. Existen configuraciones por default e inseguras. Existen usuarios por default o no requeridos para la operación. Existen cuentas con password por default. Existen puertos/servicios/software/funcionalidades habilitados que no son requeridos para la operación.", AprobacionJefeRiesgo='T')
    db.TipoVulnerabilidad.update_or_insert((db.TipoVulnerabilidad.id==2), id=2, Nombre="Vulnerabilidades en la Capa de Aplicación", Descripcion="Vulnerabilidades de inyección. Mecanismos deficientes de autenticación. Exposición de datos sensibles. Mecanismos deficientes de autorización. No existen restricciones en el consumo de recursos (APIs). No existen mecanismos de autorización adecuados para permitir el uso de objetos o recursos que se exponen a través de APIs solo a usuarios y hosts autorizados. Las APIs expuestas no validan los datos de entrada por lo que un atacante puede enviar datos que pueden ser interpretados como comnados o realizar acciones no autorizadas (Mass Assignment). Configuraciones inseguras en servidores de aplicaiones/Web, métodos HTTP inseguros o no requeridos para la operación, mal manejo de errores. No se cuenta con un inventario de APIs actualizado, por lo que se pueden exponer APIs inseguras o que no son requeridas para la operación. Manejo inseguro de sesiones. XSS.", AprobacionJefeRiesgo='T')
    db.TipoVulnerabilidad.update_or_insert((db.TipoVulnerabilidad.id==3), id=3, Nombre="Deficientes Procesos de TI", Descripcion="Los procesos de TI no cumplen con los requerimientos de seguridad o dichos procesos no existen (Ej. control de cambios, respaldos, control de accesos, monitoreo, manejo de incidentes, DRP).", AprobacionJefeRiesgo='T')
    db.TipoVulnerabilidad.update_or_insert((db.TipoVulnerabilidad.id==4), id=4, Nombre="Deficiente Control de Accesos", Descripcion="Usuarios privilegiados/genericos no estan documentados. No existen revisiones periodicas de usuarios/roles/privilegios. Uso de password debiles. Los usuarios no están identificados de manera única.", AprobacionJefeRiesgo='T')
    #-----------------------
    #ClasificacionControl
    #-----------------------
    db.ClasificacionControl.update_or_insert((db.ClasificacionControl.id==1), id=1, Nombre="Preventivo (Preventive)", Descripcion="Son los controles que actúan sobre la causa de los riesgos, con el fin de disminuir la probabilidad de ocurrencia. Estos controles constituyen la primera línea de defensa para mitigar los riesgos. También actúan para disminuir la acción de los agentes generadores de los riesgos. (Control whose purpose is to decrease the probability of occurrence of the risk. It constitutes the first line of defense to mitigate the actions that give rise to the risk. Also y reduces the agents who generate the risk)", Color="Rojo Indio (Indian Red)", AprobacionJefeRiesgo='T')
    db.ClasificacionControl.update_or_insert((db.ClasificacionControl.id==2), id=2, Nombre="Detectivo (Detective)", Descripcion="Son controles para descubrir un evento, irregularidad o un resultado no previsto; alertan sobre la presencia de los riesgos y permiten tomar medidas inmediatas; pueden ser manuales o computarizados. También sirven para supervisar la ejecución del proceso y se usan para verificar la eficacia de los controles preventivos. Pueden informar y registrar la ocurrencia de los hechos no deseados, accionar alarmas, bloquear la operación de un sistema, monitorear, o alertar. (Control performed to identify an event, irregularity or unwanted result, it alerts the presence of a risk and helps with the inmediate decisión making. It also supervises the efficiency of the controls in the process)", Color="Amarillo (Yellow)", AprobacionJefeRiesgo='T')
    db.ClasificacionControl.update_or_insert((db.ClasificacionControl.id==3), id=3, Nombre="Correctivo (Corrective)", Descripcion="Permiten el restablecimiento de la actividad después de ser detectado un evento no deseable y la modificación de las acciones que propiciaron su ocurrencia. Estos controles se establecen cuando los anteriores no operan y permiten mejorar las deficiencias; por lo general actúan con los controles detectivos, implican reprocesos y son mas costosos porque actúan cuando ya se han presentado hechos que implican pérdidas para la entidad. La mayoría son de tipo administrativo y requieren políticas o procedimientos para su ejecución. (It allows the restoration of the activity after the detection of an unwanted event and the modification of the actions that propitiated its occurence. These controls are established when the previous ones didn’t perfome. Usually these are used once the event or risk has ocurred.)", Color="Gris (Gray)", AprobacionJefeRiesgo='T')
    db.ClasificacionControl.update_or_insert((db.ClasificacionControl.id==4), id=4, Nombre="Disuasorio (Deterrent)", Descripcion="Control que reduce la posibilidad de materialización de una amenaza, p.ej., por medio de avisos o de medidas que llevan al atacante a desistir de su intención. (Control performed to discourage and/or deter the materialization of the risk. For example, a warning).", Color="Azul (Blue)", AprobacionJefeRiesgo='T')
    db.ClasificacionControl.update_or_insert((db.ClasificacionControl.id==5), id=5, Nombre="Compensatorio (Compensating)", Descripcion="Es posible que los controles de compensación se consideren cuando una entidad no puede cumplir un requisito de manera explícita según lo establecido, debido a limitaciones técnicas legítimas o comerciales documentadas, pero ha mitigado de manera suficiente el riesgo asociado con el requisito a través de la implementación de controles, los controles de compensación deben: cumplir con el propósito y el rigor del requisito, proporcionar un nivel similar de defensa, como el requisito original, ser cuidadoso con el riesgo adicional que impone la no adhesión al requisito. (Compensation controls may be considered when an entity can not explicitly meet a requirement as established, due to documented legitimate business or technical limitations, but has sufficiently mitigated the risk associated with the requirement through implementation of controls.)", Color="Naranja (Orange)", AprobacionJefeRiesgo='T')
    #--------------
    #TipoControl
    #--------------
    db.TipoControl.update_or_insert((db.TipoControl.id==1), id=1, Nombre="Manual (Manual)", Descripcion="Actividades de control que son ejecutadas sin la asistencia de aplicaciones o sistemas automaticos. Ejemplos: autorizaciones y conciliaciones manuales. Los controles manuales están sujetos a riesgos originados por errores humanos, como resultado son menos confiables que los controles automaticos. (Control activities performed without the assistance of applications or automated systems. Examples include supervisory controls; written authorisations, such as a signature on a check; or manual tasks, such as reconciling purchase orders to goods receipt statements. Manual controls are subject to the inherent risk of human error and, as a result, are often considered less reliable than automated controls.)", AprobacionJefeRiesgo='T')
    db.TipoControl.update_or_insert((db.TipoControl.id==2), id=2, Nombre="Automatico (Automated)", Descripcion="Controles que son programados o embebidos dentro de la aplicación. Control ejecutado por un sistema de manera automatica sin la intervención de alguna persona. Ejemplos: validación automatica de datos de entrada. (Controls that have been programmed and embedded within an application. Examples include input edit checks that validate order quantities and check digits that validate the correctness of bank account numbers)", AprobacionJefeRiesgo='T')
    db.TipoControl.update_or_insert((db.TipoControl.id==3), id=3, Nombre="Hibrido (Hybrid)", Descripcion="Actividades de control que consisten en la combinación de actividades manuales y automaticas, las cuales deben ejecutarse de manera adecuada para que el control sea efectivo. (Controls that consist of a combination of manual and automated activities, all of which must operate for the control to be effective. For example, the order fulfillment process might include a control whereby the shipping manager reviews a report of unshipped orders. For this control to be effective, both the automated activity -generation of a complete and accurate unshipped orders report- and the manual activity -review and follow-up by management- are necessary for the control activity to be effective. Care must be taken to ensure that hybrid or computer-dependent controls are not inappropriately identified as being manual controls. Because of the need for all parts of a hybrid control to be effective, there is a significant risk of key elements of the true control not being considered as part of the overall design effectiveness if such controls are incorrectly identified. For example, if the review of the unshipped orders report in the previous example was incorrectly identified as a manual control, there is a risk that the design of controls to ensure the completeness and accuracy of the unshipped orders report may be overlooked.)", AprobacionJefeRiesgo='T')
    db.TipoControl.update_or_insert((db.TipoControl.id==4), id=4, Nombre="Administrativo (Administrative)", Descripcion="Son los controles relacionados al establecimiento de políticas y procesos para mitigar los riesgos identificados. (Controls related to the establishment of policies and processes to reduce the identified risks.)", AprobacionJefeRiesgo='T')
    db.TipoControl.update_or_insert((db.TipoControl.id==5), id=5, Nombre="Físico (Physical)", Descripcion="Controles fisicos para proteger los equipos de comunicación, servidores, e instalaciones. Ejemplo: puertas, elementos de vigilancia, camaras de seguridad. (Physical controls to protect communication equipment, servers, and facilities. Example: doors, surveillance elements, security cameras.)", AprobacionJefeRiesgo='T')
    #---------------------------------------------
    #BenchVersion
    #Se requiere para la relación de Grupo Control
    #---------------------------------------------
    db.BenchVersion.update_or_insert((db.BenchVersion.id==1), id=1, Version="ISO/IEC 27001:2013 - SGSI", Descripcion="ISO 27001 es una norma internacional emitida por la Organización Internacional de Normalización (ISO) y describe cómo gestionar la seguridad de la información en una empresa. La revisión más reciente de esta norma fue publicada en 2013 y ahora su nombre completo es ISO/IEC 27001:2013. La primera revisión se publicó en 2005 y fue desarrollada en base a la norma británica BS 7799-2.", AprobacionJefeRiesgo='T')
    db.BenchVersion.update_or_insert((db.BenchVersion.id==2), id=2, Version="PCI DSS 3.2.1", Descripcion="PCI es un acrónimo de Payment Card Industry. Han creado un conjunto de reglas y regulaciones que se han establecido para reducir la prevalencia del fraude con tarjetas de crédito. Esto se conoce como Estándar de seguridad de datos de la industria de tarjetas de pago (PCI DSS). El PCI fue creado en 2006 por una coalición de Visa, Mastercard, American Express, Discover y JCB para administrar los estándares de seguridad y mejorar la seguridad durante todo el proceso de transacción.", AprobacionJefeRiesgo='T')
    db.BenchVersion.update_or_insert((db.BenchVersion.id==3), id=3, Version="COBIT 5", Descripcion="Marco para el gobierno y gestion de TI de la organizacion.", AprobacionJefeRiesgo='T')
    db.BenchVersion.update_or_insert((db.BenchVersion.id==4), id=4, Version="OWASP Testing Framework 4.0", Descripcion="The  Open  Web  Application  Security  Project  (OWASP)  is  a  worldwide  free  and  open  com-munity focused on improving the security of application software. Our mission is to make application security visible, so that people and organizations can make informed decisions about  application  security  risks.", AprobacionJefeRiesgo='T')
    db.BenchVersion.update_or_insert((db.BenchVersion.id==5), id=5, Version="ISO/IEC 27001:2013 - Annex A", Descripcion="Este standard contiene 14 clausulas de controles de seguridad, 35 categorias de seguridad y 114 controles (This standard contains 14 security control clauses collectively containing a total of 35 main security categories and 114 controls).", AprobacionJefeRiesgo='T')
    db.BenchVersion.update_or_insert((db.BenchVersion.id==6), id=6, Version="NIST 800-53 Security and Privacy Controls", Descripcion="La publicación especial NIST 800-53 proporciona un catálogo de controles de seguridad y privacidad para los sistemas de información.", AprobacionJefeRiesgo='T')
    db.BenchVersion.update_or_insert((db.BenchVersion.id==7), id=7, Version="CNBV ITF Fintech - Capitulo VI", Descripcion="Disposiciones de carácter general aplicables a las instituciones de tecnología financiera. Publicadas en el Diario Oficial de la Federación el 10 de septiembre de 2018, modificadas mediante resolución publicada en el citado Diario el 25 de marzo de 2019.", AprobacionJefeRiesgo='T')
    db.BenchVersion.update_or_insert((db.BenchVersion.id==8), id=8, Version="Estándar de Verificación de Seguridad en Aplicaciones 3.0.1", Descripcion="ASVS tiene dos objetivos principales: ayudar a las organizaciones en el desarrollo y mantenimiento aplicaciones seguras permitir la alineación entre las necesidades y ofertas de los servicios de seguridad, proveedores de herramientas de seguridad y consumidores. El Estándar de Verificación de Seguridad en Aplicaciones definetres niveles de verificación de seguridad, incrementando la profundidad con cada nivel. ASVS nivel 1 se encuentra dirigidoatodo tipo de software. ASVS nivel 2 es para aplicaciones que contienen datos sensibles, que requierenprotección. ASVS nivel 3 es para las aplicaciones más críticas -aplicaciones que realizan transacciones de alto valor, contienen datos médicos confidenciales, o cualquier aplicación que requiera el más alto nivel de confianza.", AprobacionJefeRiesgo='T')
    db.BenchVersion.update_or_insert((db.BenchVersion.id==9), id=9, Version="OWASP Application Security Verification Standard 4.0", Descripcion="The ASVS is a community-driven effort to establish a framework of security requirements and controls that focus on defining the functional and non-functional security controls required when designing, developing and testing modern web applications and web services.", AprobacionJefeRiesgo='T')
    db.BenchVersion.update_or_insert((db.BenchVersion.id==10), id=10, Version="Auditoría Seguridad TI", Descripcion="Pruebas de seguridad. Considera todas las capas. Toma en cuenta las mejores prácticas, estandares y baselines de seguridad como OWASP, ISO, NIST.", AprobacionJefeRiesgo='T')

    #---------------
    #ObjetivoControl
    #---------------

    #-----------------------------------------------------
    #OWASP Application Security Verification Standard 4.0
    #-----------------------------------------------------
    db.BenchObjetivoControl.update_or_insert((db.BenchObjetivoControl.id==1), id=1, BenchVersionId=9, Numero="V1", Nombre="Architecture, Design and Threat Modeling Requirements", Descripcion="Security architecture has almost become a lost art in many organizations. The days of the enterprise architect have passed in the age of DevSecOps. The application security field must catch up and adopt agile security principles while re-introducing leading security architecture principles to software practitioners. Architecture is not an implementation, but a way of thinking about a problem that has potentially many different answers, and no one single correct answer. All too often, security is seen as inflexible and demanding that developers fix code in a particular way, when the developers may know a much better way to solve the problem. There is no single, simple solution for architecture, and to pretend otherwise is a disservice to the software engineering field.A specific implementation of a web application is likely to be revised continuously throughout its lifetime, but the overall architecture will likely rarely change but evolve slowly. Security architecture is identical -we need authentication today, we will require authentication tomorrow, and we will need it five years from now. If we make sound decisions today, we can save a lot of effort, time, and money if we select and re-use architecturally compliant solutions. For example, a decade ago, multifactor authentication was rarely implemented.If developers had invested in a single, secure identity provider model, such as SAML federated identity, the identity provider could be updated to incorporate new requirements such as NIST 800-63 compliance, while not changing the interfaces of the original application. If many applications shared the same security architecture and thus that same component, they all benefit from this upgrade at once. However, SAML will not always remain as the best or most suitable authentication solution -it might need to be swapped out for other solutions as requirements change. Changes like this are either complicated, so costly as to necessitate a complete re-write, or outright impossible without security architecture.In this chapter, the ASVS covers off the primary aspects of any sound security architecture: availability, confidentiality, processing integrity, non-repudiation, and privacy. Each of these security principles must be built in and be innate to all applications. It is critical to shift left, starting with developer enablement with secure coding checklists, mentoring and training, coding and testing, building, deployment, configuration, and operations, and finishing with follow up independent testing to assure that all of the security controls are present and functional. The last step used to be everything we did as an industry, but that is no longer sufficient when developers push code into production tens or hundreds of times a day. Application security professionals must keep up with agile techniques, which means adopting developer tools, learning to code, and working with developers rather than criticizing the project months after everyone else has moved on.", AprobacionJefeRiesgo='T')
    db.BenchObjetivoControl.update_or_insert((db.BenchObjetivoControl.id==2), id=2, BenchVersionId=9, Numero="V2", Nombre="Input and Output Architectural Requirements", Descripcion="Authentication is the act of establishing, or confirming, someone (or something) as authentic and that claims made by a person or about a device are correct, resistant to impersonation, and prevent recovery or interception of passwords. When the ASVS was first released, username + password was the most common form of authentication outside of high security systems. Multi-factor authentication (MFA) was commonly accepted in security circles but rarely required elsewhere. As the number of password breaches increased, the idea that usernames are somehow confidential and passwords unknown, rendered many security controls untenable. For example, NIST 800-63 considers usernames and knowledge based authentication (KBA) as public information, SMS and email notifications as restricted authenticator types, and passwords as pre-breached. This reality renders knowledge based authenticators, SMS and email recovery, password history, complexity, and rotation controls useless. These controls always have been less than helpful, often forcing users to come up with weak passwords every few months, but with the release of over 5 billion username and password breaches, it's time to move on.Of all the sections in the ASVS, the authentication and session management chapters have changed the most. Adoption of effective, evidence-based leading practice will be challenging for many, and that's perfectly okay. We have to start the transition to a post-password future now.", AprobacionJefeRiesgo='T')
    db.BenchObjetivoControl.update_or_insert((db.BenchObjetivoControl.id==3), id=3, BenchVersionId=9, Numero="V3", Nombre="Session Management Verification Requirements", Descripcion="One of the core components of any web-based application or stateful API is the mechanism by which it controls and maintains the state for a user or device interacting with it. Session management changes a stateless protocol to stateful, which is critical for differentiating different users or devices. Ensure that a verified application satisfies the following high-level session management requirements. Sessions are unique to each individual and cannot be guessed or shared. Sessions are invalidated when no longer required and timed out during periods of inactivity. As previously noted, these requirements have been adapted to be a compliant subset of selected NIST 800-63b controls, focused around common threats and commonly exploited authentication weaknesses. Previous verification requirements have been retired, de-duped, or in most cases adapted to be strongly aligned with the intent of mandatory NIST 800-63b requirements.", AprobacionJefeRiesgo='T')
    db.BenchObjetivoControl.update_or_insert((db.BenchObjetivoControl.id==4), id=4, BenchVersionId=9, Numero="V4", Nombre="Access Control Verification Requirements", Descripcion="Authorization is the concept of allowing access to resources only to those permitted to use them. Ensure that a verified application satisfies the following high level requirements: Persons accessing resources hold valid credentials to do so. Users are associated with a well-defined set of roles and privileges. Role and permission metadata is protected from replay or tampering.", AprobacionJefeRiesgo='T')
    db.BenchObjetivoControl.update_or_insert((db.BenchObjetivoControl.id==5), id=5, BenchVersionId=9, Numero="V5", Nombre="Validation, Sanitization and Encoding Verification Requirements", Descripcion="The most common web application security weakness is the failure to properly validate input coming from the client or the environment before directly using it without any output encoding. This weakness leads to almost all of the significant vulnerabilities in web applications, such as Cross-Site Scripting (XSS), SQL injection, interpreter injection, locale/Unicode attacks, file system attacks, and buffer overflows. Ensure that a verified application satisfies the following high-level requirements: - Input validation and output encoding architecture have an agreed pipeline to prevent injection attacks. - Input data is strongly typed, validated, range or length checked, or at worst, sanitized or filtered. - Output data is encoded or escaped as per the context of the data as close to the interpreter as possible. With modern web application architecture, output encoding is more important than ever. It is difficult to provide robust input validation in certain scenarios, so the use of safer API such as parameterized queries, auto-escaping templating frameworks, or carefully chosen output encoding is critical to the security of the application.", AprobacionJefeRiesgo='T')
    db.BenchObjetivoControl.update_or_insert((db.BenchObjetivoControl.id==6), id=6, BenchVersionId=9, Numero="V6", Nombre="Stored Cryptography Verification Requirements", Descripcion="Ensure that a verified application satisfies the following high level requirements: - All cryptographic modules fail in a secure manner and that errors are handled correctly. - A suitable random number generator is used. - Access to keys is securely managed.", AprobacionJefeRiesgo='T')
    db.BenchObjetivoControl.update_or_insert((db.BenchObjetivoControl.id==7), id=7, BenchVersionId=9, Numero="V7", Nombre="Error Handling and Logging Verification Requirements", Descripcion="The primary objective of error handling and logging is to provide useful information for the user, administrators, and incident response teams. The objective is not to create massive amounts of logs, but high quality logs, with more signal than discarded noise. High quality logs will often contain sensitive data, and must be protected as per local data privacy laws or directives. This should include: - Not collecting or logging sensitive information unless specifically required. - Ensuring all logged information is handled securely and protected as per its data classification. - Ensuring that logs are not stored forever, but have an absolute lifetime that is as short as possible. If logs contain private or sensitive data, the definition of which varies from country to country, the logs become some of the most sensitive information held by the application and thus very attractive to attackers in their own right. It is also important to ensure that the application fails securely and that errors do not disclose unnecessary information.", AprobacionJefeRiesgo='T')
    db.BenchObjetivoControl.update_or_insert((db.BenchObjetivoControl.id==8), id=8, BenchVersionId=9, Numero="V8", Nombre="Data Protection Verification Requirements", Descripcion="There are three key elements to sound data protection: Confidentiality, Integrity and Availability (CIA). This standard assumes that data protection is enforced on a trusted system, such as a server, which has been hardened and has sufficient protections. Applications have to assume that all user devices are compromised in some way. Where an application transmits or stores sensitive information on insecure devices, such as shared computers, phones and tablets, the application is responsible for ensuring data stored on these devices is encrypted and cannot be easily illicitly obtained, altered or disclosed. Ensure that a verified application satisfies the following high level data protection requirements: - Confidentiality: Data should be protected from unauthorized observation or disclosure both in transit and when stored. - Integrity: Data should be protected from being maliciously created, altered or deleted by unauthorized attackers. - Availability: Data should be available to authorized users as required.", AprobacionJefeRiesgo='T')
    db.BenchObjetivoControl.update_or_insert((db.BenchObjetivoControl.id==9), id=9, BenchVersionId=9, Numero="V9", Nombre="Communications Verification Requirements", Descripcion="Ensure that a verified application satisfies the following high level requirements: - TLS or strong encryption is always used, regardless of the sensitivity of the data being transmitted. - The most recent, leading configuration advice is used to enable and order preferred algorithms and ciphers. - Weak or soon to be deprecated algorithms and ciphers are ordered as a last resort. - Deprecated or known insecure algorithms and ciphersare disabled. Leading industry advice on secure TLS configuration changes frequently, often due to catastrophic breaks in existing algorithms and ciphers. Always use the most recent versions of TLS configuration review tools (such as SSLyze or other TLS scanners) to configure the preferred order and algorithm selection. Configuration should be periodically checked to ensure that secure communications configuration is always present and effective.", AprobacionJefeRiesgo='T')
    db.BenchObjetivoControl.update_or_insert((db.BenchObjetivoControl.id==10), id=10, BenchVersionId=9, Numero="V10", Nombre="Malicious Code Verification Requirements", Descripcion="Ensure that code satisfies the following high level requirements: - Malicious activity is handled securely and properly to not affect the rest of the application. - Does not have time bombs or other time-based attacks. - Does not phone home to malicious or unauthorized destinations. - Does not have back doors, Easter eggs, salami attacks, rootkits, or unauthorized code that can be controlled by an attacker. Finding malicious code is proof of the negative, which is impossible to completely validate. Best efforts should be undertaken to ensure that the code has no inherent malicious code or unwanted functionality.", AprobacionJefeRiesgo='T')
    db.BenchObjetivoControl.update_or_insert((db.BenchObjetivoControl.id==11), id=11, BenchVersionId=9, Numero="V11", Nombre="Business Logic Verification Requirements", Descripcion="Ensure that a verified application satisfies the following high level requirements: - The business logic flow is sequential, processed in order, and cannot be bypassed. - Business logic includes limits to detect and prevent automated attacks, such as continuous small funds transfers, or adding a million friends one at a time, and so on. - High value business logic flows have considered abuse cases and malicious actors, and have protections against spoofing, tampering, repudiation, information disclosure, and elevation of privilege attacks.", AprobacionJefeRiesgo='T')
    db.BenchObjetivoControl.update_or_insert((db.BenchObjetivoControl.id==12), id=12, BenchVersionId=9, Numero="V12", Nombre="File and Resources Verification Requirements", Descripcion="Ensure that a verified application satisfies the following high level requirements: - Untrusted file data should be handled accordingly and in a secure manner. - Untrusted file data obtained from untrusted sources are stored outside the web root and with limited permissions.", AprobacionJefeRiesgo='T')
    db.BenchObjetivoControl.update_or_insert((db.BenchObjetivoControl.id==13), id=13, BenchVersionId=9, Numero="V13", Nombre="API and Web Service Verification Requirements", Descripcion="Ensure that a verified application that uses trusted service layer APIs (commonly using JSON or XML or GraphQL) has: - Adequate authentication, session management and authorization of all web services. - Input validation of all parameters that transit from a lower to higher trust level. - Effective security controls for all API types, including cloud and Serverless API. Please read this chapter in combination with all other chapters at this same level; we no longer duplicate authentication or API session management concerns.", AprobacionJefeRiesgo='T')
    db.BenchObjetivoControl.update_or_insert((db.BenchObjetivoControl.id==14), id=14, BenchVersionId=9, Numero="V14", Nombre="Configuration Verification Requirements", Descripcion="Ensure that a verified application has: - A secure, repeatable, automatable build environment. - Hardened third party library, dependency and configuration management such that out of date or insecure components are not included by the application. - A secure-by-default configuration, such that administrators and users have to weaken the default security posture. Configuration of the application out of the box should be safe to be on the Internet, which means a safe out of the box configuration.", AprobacionJefeRiesgo='T')

    #------------------------------------------------------------
    #Estándar de Verificación de Seguridad en Aplicaciones 3.0.1
    #------------------------------------------------------------
    db.BenchObjetivoControl.update_or_insert((db.BenchObjetivoControl.id==15), id=15, BenchVersionId=8, Numero="V1", Nombre="Arquitectura, diseño y modelado de amenazas", Descripcion="Asegurar que una aplicación verificada satisfaga los siguientes requisitos de alto nivel: Nivel1,loscomponentes de la aplicación son identificados y tienen una razón de ser. Nivel 2, se ha definido la arquitectura y el código se adecúa a ésta. Nivel 3, la arquitectura y el diseño son los indicados, se utilizan y resultan eficaces. Nota: Esta sección se ha introducido nuevamente en la versión 3.0, pero se utilizan en esencia los mismos controles arquitectónicos de la versión 1.0 delASVS.", AprobacionJefeRiesgo='T')
    db.BenchObjetivoControl.update_or_insert((db.BenchObjetivoControl.id==16), id=16, BenchVersionId=8, Numero="V2", Nombre="Requisitos de verificación de autenticación", Descripcion="Autenticación es el acto de establecer o confirmar, algo (o alguien) como auténtico, esto es, que lo que reclama sobre aquello es verdadero. Se debe asegurar que la aplicación satisface los siguientes requisitos de alto nivel: - Verifica la identidad digital del remitente de una comunicación. - Asegura que sólo los usuarios autorizados son capaces de autenticarse y que las credenciales sean transportadas de forma segura.", AprobacionJefeRiesgo='T')
    db.BenchObjetivoControl.update_or_insert((db.BenchObjetivoControl.id==17), id=17, BenchVersionId=8, Numero="V3", Nombre="Requisitos de verificación de gestión de sesiones", Descripcion="Uno de los componentes básicos de cualquier aplicación web es el mecanismo por el cual controla y mantiene el estado de un usuario al interactuar con ésta. Esto se refiere a manejo de sesiones y se define como el conjunto de todos los controles que rigen el estado completo de interacción entre un usuario y la aplicación basada en la web. Se debe asegurar que la aplicación verificada satisface los siguientes requerimientos de manejo de sesiones de alto nivel: - Las sesiones son únicas paracada individuo y no conjeturadas o compartidas. - Las sesiones son invalidadas cuando ya no son necesarias y el tiempo es limitado durante los períodos de inactividad.", AprobacionJefeRiesgo='T')
    db.BenchObjetivoControl.update_or_insert((db.BenchObjetivoControl.id==18), id=18, BenchVersionId=8, Numero="V4", Nombre="Requisitos de verificación del Control de acceso", Descripcion="Autorización es el concepto de permitir acceso a los recursos únicamente a aquellos que les ha sido permitido utilizarlos. Se debe asegurar que la aplicación verificada satisface los siguientes requisitos de alto nivel: - Personas que acceden a recursos poseen credenciales válidas para hacerlo. - Los usuarios se encuentran asociados con un conjunto bien definido de roles y privilegios. - Los metadatos de Roles y permisos se encuentran protegidos de ataques de reutilización o manipulación.", AprobacionJefeRiesgo='T')
    db.BenchObjetivoControl.update_or_insert((db.BenchObjetivoControl.id==19), id=19, BenchVersionId=8, Numero="V5", Nombre="Requisitos de verificación paraManejo de entrada de datos maliciosos", Descripcion="La debilidad más común de seguridad de las aplicaciones web es la falla en validar apropiadamente el ingreso de datos que provienen del cliente o del ambiente antes de ser utilizada. Esta debilidad conduce a casi todas las vulnerabilidades encontradas en aplicaciones web, tales como cross site scripting (XSS), inyecciones SQL, inyección de intérprete, ataques locale/Unicode, ataques a sistemas de archivos y desbordamientos de búfers. Se debe asegurar que la aplicación verificada satisface los siguientes requisitos de alto nivel: • Todas las entradas son correctamente validadas y adecuadas para el propósito previsto. • No debe confiarse en datos de una entidad externa o del cliente y deben ser tratados como tales.", AprobacionJefeRiesgo='T')
    db.BenchObjetivoControl.update_or_insert((db.BenchObjetivoControl.id==20), id=20, BenchVersionId=8, Numero="V7", Nombre="Requisitos de verificación paraManejo de entrada de datos maliciosos", Descripcion="Asegure que una aplicación verificada satisfaga los siguientes requisitos de alto nivel: - Que todos los módulos criptográficos fallen de forma segura y que los errores sean gestionados correctamente. - Que se utilice un generador de números aleatorios adecuado cuando se requiere la aleatoriedad. - Que el acceso a claves se gestiona de forma segura.", AprobacionJefeRiesgo='T')
    db.BenchObjetivoControl.update_or_insert((db.BenchObjetivoControl.id==21), id=21, BenchVersionId=8, Numero="V8", Nombre="Requisitos de verificación de gestióny registro de errores", Descripcion="El objetivo principal de la gestión y registro de errores es proporcionar una reacción útil para los usuarios, administradores y equipos de respuesta a incidentes. El objetivo no es crear cantidades masivas de registros, sino crear registros de alta calidad, con información útil y desechando ruido. Los registros de bitácora de alta calidad a menudo contienen datos confidenciales y también deben ser protegidos según las leyes de privacidad de datos o directivas. Esto debe incluir: • No recoger o registrar información confidencial si no es necesaria. • Garantizar que toda la información registrada se gestionade forma segura y es protegida según su clasificación de datos. • Asegurar que los registros de bitácora no sean almacenados indeterminadamente, sino que posean un ciclo devida útil lo más corta posible. Si los registros contienen datos privados o confidenciales, cuya definición varía de país a país, éstos se convierten en parte de la información sensibley por lo tanto resulta muy atractiva para los atacantes.", AprobacionJefeRiesgo='T')
    db.BenchObjetivoControl.update_or_insert((db.BenchObjetivoControl.id==22), id=22, BenchVersionId=8, Numero="V9", Nombre="Requisitos de Verificación de Protección de Datos", Descripcion="Hay tres elementos clave para la protección de datos: Confidencialidad, Integridad y Disponibilidad (CIA por sus siglas en inglés). Este estándar asume que la protección de datos se aplica en un sistema de confianza, como un servidor, que ha sido protegido debidamente y dispone de protecciones suficientes. Las aplicaciones web deben asumir que todos los dispositivos de un usuario puedan ser comprometidos de alguna manera. Cuando una aplicación transmite o almacena información sensible dentro de dispositivos inseguros, como equipos compartidos, teléfonos y tabletas, la aplicación es responsable de que los datos almacenados en estos dispositivos sean cifradosy no pueden ser fácilmente o ilícitamente obtenidos, alterados o divulgados. Se debe asegurar que laaplicación verificada satisface los siguientes requisitos de protección de datos de alto nivel: • Confidencialidad: los datos deben ser protegidos de observación no autorizada o la divulgación tanto en tránsito como cuando están almacenados. • Integridad: los datos deben protegerse siendo creados maliciosamente, alterados o eliminados por los intrusos no autorizados. • Disponibilidad: los datos deben estar disponibles para usuarios autorizados cuando sea necesario.", AprobacionJefeRiesgo='T')
    db.BenchObjetivoControl.update_or_insert((db.BenchObjetivoControl.id==23), id=23, BenchVersionId=8, Numero="V10", Nombre="Requisitos de Verificación de Seguridadde las Comunicaciones", Descripcion="Se debe asegurar que laaplicación verificada satisfaga los siguientes requisitos de alto nivel: - Que se utiliceTLS donde se transmite información sensible. - Que se utilicen algoritmos y cifradores fuertes en todo momento.", AprobacionJefeRiesgo='T')
    db.BenchObjetivoControl.update_or_insert((db.BenchObjetivoControl.id==24), id=24, BenchVersionId=8, Numero="V11", Nombre="Requisitos de verificación de configuración de seguridad HTTP", Descripcion="Asegure que la aplicación verificada satisfaga los siguientes requisitos de alto nivel: - El servidor de aplicaciones está convenientemente endurecido de una configuración preestablecida. - Toda respuesta HTTP contiene su tipo de contenido establecido utilizando un conjunto de caracteres seguro.", AprobacionJefeRiesgo='T')
    db.BenchObjetivoControl.update_or_insert((db.BenchObjetivoControl.id==25), id=25, BenchVersionId=8, Numero="V13", Nombre="Requisitos de verificación para Controles Malicioso", Descripcion="Asegure que la aplicación verificada satisfaga los siguientes requisitos de alto nivel: - La actividad maliciosa se debe manejar con seguridad y adecuadamente para no afectar el resto de la aplicación. - No posee bombas de tiempo ni otros ataques basados en tiempo. - No realiza phone home a destinos malintencionados o no autorizados. - La aplicación no posee puertas traseras, huevos de Pascua, ataques salami o fallos de lógica que pueden ser controlados por un atacante. El código maliciosoes extremadamente raro difícil de detectar. La revisión manual línea por línea del código puede ayudar a encontrar bombas lógicas, pero incluso el más experimentado revisor de código tendrá que esforzarse para encontrar código malicioso aunque sepa que existe.", AprobacionJefeRiesgo='T')
    db.BenchObjetivoControl.update_or_insert((db.BenchObjetivoControl.id==26), id=26, BenchVersionId=8, Numero="V15", Nombre="Requisitos de verificación para lógica de negocios", Descripcion="Asegure que la aplicación verificada satisfaga los siguientes requisitos de alto nivel: - El flujo de la lógica de negocio es secuencial y en orden. - La Lógica de negocios incluye límites para detectar y evitar ataques automatizados, como las continuas transferencias de fondos pequeños, agregando 1 millón amigos uno a uno y así sucesivamente. - Flujos de lógica de negocios de alto valor han considerado casos de abuso y agentes maliciosos y poseen protecciones contra la falsificación, alteración, repudio, revelación de información y ataques a la elevación de privilegios.", AprobacionJefeRiesgo='T')
    db.BenchObjetivoControl.update_or_insert((db.BenchObjetivoControl.id==27), id=27, BenchVersionId=8, Numero="V16", Nombre="Requisitos de verificaciónde archivos y recursos", Descripcion="Asegure que la aplicación verificada satisfaga los siguientes requisitos de alto nivel: - Datos no confiables deben ser gestionados como tales y de forma segura. - Datos Obtenidos de fuentes no confiables sean almacenan fuera del webroot y posean permisos limitados.", AprobacionJefeRiesgo='T')
    db.BenchObjetivoControl.update_or_insert((db.BenchObjetivoControl.id==28), id=28, BenchVersionId=8, Numero="V17", Nombre="Requisitos de verificación Móvil", Descripcion="Esta sección contiene controles específicos para aplicaciones móviles. Estos controles han sido de-duplicados de laversión 2.0, por lo que deben tomarse en conjunto con el resto de las secciones de los niveles correspondientes de Verificación ASVS. Las aplicaciones móviles deben: - Deben tener el mismo nivel de controles de seguridad tanto en el cliente móvil como en el servidor, mediante la aplicación de controles de seguridad en un entorno de confianza. - Activos de Información sensible almacenados en el dispositivo debe realizarsede un modo seguro. - Todos los datos sensibles transmitidos desde el dispositivo deben ser hechos teniendo en mente la seguridad en la capa de transporte.", AprobacionJefeRiesgo='T')
    db.BenchObjetivoControl.update_or_insert((db.BenchObjetivoControl.id==29), id=29, BenchVersionId=8, Numero="V18", Nombre="Requisitos de verificación de servicios Web", Descripcion="Asegúrese de que la aplicación verificada, de utilizar servicios web REST o SOAP posean: - Autenticación adecuada, gestión de sesión y autorización de todos los servicios web. - Validación de entrada de datos de todos los parámetros que transiten de zonas de menor a mayor confianza. - Interoperabilidad básica de la capa de servicios web SOAP para promover el uso de la API.", AprobacionJefeRiesgo='T')
    db.BenchObjetivoControl.update_or_insert((db.BenchObjetivoControl.id==30), id=30, BenchVersionId=8, Numero="V19", Nombre="Requisitos de Configuración", Descripcion="Asegúrese de que la aplicación verificada: - Utilice bibliotecas y una plataformaactualizada. - Una configuración segura por omisión. - Un Hardening suficiente de tal forma que los cambios realizados por un usuariono resulten en exposiciones innecesariaso creen debilidades de seguridad o fallas a los sistemas subyacentes.", AprobacionJefeRiesgo='T')
    #-----------
    #Auditoria
    #-----------
    db.BenchObjetivoControl.update_or_insert((db.BenchObjetivoControl.id==31), id=31, BenchVersionId=10, Numero="1", Nombre="Sistema Operativo (Operating System)", Descripcion="Controles de seguridad en la capa de Sistema Operativo.", AprobacionJefeRiesgo='T')
    db.BenchObjetivoControl.update_or_insert((db.BenchObjetivoControl.id==32), id=32, BenchVersionId=10, Numero="2", Nombre="Base de Datos (Data Base)", Descripcion="Controles de seguridad en la capa de Base de Datos.", AprobacionJefeRiesgo='T')
    db.BenchObjetivoControl.update_or_insert((db.BenchObjetivoControl.id==33), id=33, BenchVersionId=10, Numero="3", Nombre="Aplicación y Servicios Web (Web Services and Applications)", Descripcion="Controles de seguridad en la capa de servicios y aplicaciones Web..", AprobacionJefeRiesgo='T')
    db.BenchObjetivoControl.update_or_insert((db.BenchObjetivoControl.id==34), id=34, BenchVersionId=10, Numero="4", Nombre="Red (Network)", Descripcion="Controles de seguridad en protocolos y componentes de comunicaciones.", AprobacionJefeRiesgo='T')
    db.BenchObjetivoControl.update_or_insert((db.BenchObjetivoControl.id==35), id=35, BenchVersionId=10, Numero="5", Nombre="Procesos (Processes)", Descripcion="Controles de seguridad en los procesos.", AprobacionJefeRiesgo='T')
    db.BenchObjetivoControl.update_or_insert((db.BenchObjetivoControl.id==36), id=36, BenchVersionId=10, Numero="6", Nombre="Levantamiento de Información (Information Gathering)", Descripcion="Actividades de levantamiento de información.", AprobacionJefeRiesgo='T')

    #-----------------
    #BenchControl
    #-----------------
    db.BenchControl.update_or_insert((db.BenchControl.id==1), id=1, BenchObjetivoControlId=15, Numero="1.1", Nombre="Verify that all application components are identified and are known to be needed. (L1, L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==2), id=2, BenchObjetivoControlId=15, Numero="1.2", Nombre="Verify that all components, such as libraries, modules, and external systems, that are not part of the application but that the application relies on to operate are identified. (L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==3), id=3, BenchObjetivoControlId=15, Numero="1.3", Nombre="Verify that a high-level architecture for the application has been defined. (L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==4), id=4, BenchObjetivoControlId=15, Numero="1.4", Nombre="Verify that all application components are defined in terms of the business functions and/or security functions they provide. (L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==5), id=5, BenchObjetivoControlId=15, Numero="1.5", Nombre="Verify that all components that are not part of the application but that the application relies on to operate are defined in terms of the functions, and/or security functions, they provide. (L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==6), id=6, BenchObjetivoControlId=15, Numero="1.6", Nombre="Verify that a threat model for the target application has been produced and covers off risks associated with Spoofing, Tampering, Repudiation, Information Disclosure, and Elevation of privilege (STRIDE). (L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==7), id=7, BenchObjetivoControlId=15, Numero="1.7", Nombre="Verify all security controls (including libraries that call external security services) have a centralized implementation. (L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==8), id=8, BenchObjetivoControlId=15, Numero="1.8", Nombre="Verify that components are segregated from each other via a defined security control, such as network segmentation, firewall rules, or cloud based security groups. (L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==9), id=9, BenchObjetivoControlId=15, Numero="1.9", Nombre="Verify the application has a clear separation between the data layer, controller layer and the display layer, such that security decisions can be enforced on trusted systems. (L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==10), id=10, BenchObjetivoControlId=15, Numero="1.10", Nombre="Verify that there is no sensitive business logic, secret keys or other proprietary information in client side code. (L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==11), id=11, BenchObjetivoControlId=15, Numero="1.11", Nombre="Verify that all application components, libraries, modules, frameworks, platform, and operating systems are free from known vulnerabilities. (L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')

    db.BenchControl.update_or_insert((db.BenchControl.id==12), id=12, BenchObjetivoControlId=16, Numero="2.1", Nombre="Verify all pages and resources by default require authentication except those specifically intended to be public (Principle of complete mediation). (L1, L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')

    db.BenchControl.update_or_insert((db.BenchControl.id==13), id=13, BenchObjetivoControlId=16, Numero="2.2", Nombre="Verify that forms containing credentials are not filled in by the application. Pre-filling by the application implies that credentials are stored in plaintext or a reversible format, which is explicitly prohibited. (L1, L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')

    db.BenchControl.update_or_insert((db.BenchControl.id==14), id=14, BenchObjetivoControlId=16, Numero="2.4", Nombre="Verify all authentication controls are enforced on the server side. (L1, L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')

    db.BenchControl.update_or_insert((db.BenchControl.id==16), id=16, BenchObjetivoControlId=16, Numero="2.6", Nombre="Verify all authentication controls fail securely to ensure attackers cannot log in. (L1, L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==17), id=17, BenchObjetivoControlId=16, Numero="2.7", Nombre="Verify password entry fields allow, or encourage, the use of passphrases, and do not prevent password managers, long passphrases or highly complex passwords being entered. (L1, L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==18), id=18, BenchObjetivoControlId=16, Numero="2.8", Nombre="Verify all account identity authentication functions (such as update profile, forgot password, disabled / lost token, help desk or IVR) that might regain access to the account are at least as resistant to attack as the primary authentication mechanism. (L1, L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==19), id=19, BenchObjetivoControlId=16, Numero="2.9", Nombre="Verify that the changing password functionality includes the old password, the new password, and a password confirmation. (L1, L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==20), id=20, BenchObjetivoControlId=16, Numero="2.12", Nombre="Verify that all authentication decisions can be logged, without storing sensitive session identifiers or passwords. This should include requests with relevant metadata needed for security investigations. (L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==21), id=21, BenchObjetivoControlId=16, Numero="2.13", Nombre="Verify that account passwords are one way hashed with a salt, and there is sufficient work factor to defeat brute force and password hash recovery attacks. (L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==22), id=22, BenchObjetivoControlId=16, Numero="2.16", Nombre="Verify that credentials are transported using a suitable encrypted link and that all pages/functions that require a user to enter credentials are done so using an encrypted link. (L1, L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==23), id=23, BenchObjetivoControlId=16, Numero="2.17", Nombre="Verify that the forgotten password function and other recovery paths do not reveal the current password and that the new password is not sent in clear text to the user. (L1, L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==24), id=24, BenchObjetivoControlId=16, Numero="2.18", Nombre="Verify that information enumeration is not possible via login, password reset, or forgot account functionality. (L1, L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==25), id=25, BenchObjetivoControlId=16, Numero="2.19", Nombre="Verify there are no default passwords in use for the application framework or any components used by the application (such as “admin/password”). (L1, L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==26), id=26, BenchObjetivoControlId=16, Numero="2.20", Nombre="Verify that anti-automation is in place to prevent breached credential testing, brute forcing, and account lockout attacks. (L1, L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==27), id=27, BenchObjetivoControlId=18, Numero="2.21", Nombre="Verify that all authentication credentials for accessing services external to the application are encrypted and stored in a protected location. (L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==28), id=28, BenchObjetivoControlId=16, Numero="2.22", Nombre="Verify that forgotten password and other recovery paths use a TOTP or other soft token, mobile push, or other offline recovery mechanism. Use of a random value in an e-mail or SMS should be a last resort and is known weak. (L1, L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==29), id=29, BenchObjetivoControlId=16, Numero="2.23", Nombre="Verify that account lockout is divided into soft and hard lock status, and these are not mutually exclusive. If an account is temporarily soft locked out due to a brute force attack, this should not reset the hard lock status. (L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==30), id=30, BenchObjetivoControlId=16, Numero="2.24", Nombre="Verify that if shared knowledge based questions (also known as secret questions) are required, the questions do not violate privacy laws and are sufficiently strong to protect accounts from malicious recovery. (L1, L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==31), id=31, BenchObjetivoControlId=16, Numero="2.25", Nombre="Verify that the system can be configured to disallow the use of a configurable number of previous passwords. (L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==32), id=32, BenchObjetivoControlId=16, Numero="2.26", Nombre="Verify that risk based re-authentication, two factor or transaction signing is in place for high value transactions. (L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==33), id=33, BenchObjetivoControlId=16, Numero="2.27", Nombre="Verify that measures are in place to block the use of commonly chosen passwords and weak passphrases. (L1, L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')	
    db.BenchControl.update_or_insert((db.BenchControl.id==34), id=34, BenchObjetivoControlId=16, Numero="2.28", Nombre="Verify that all authentication challenges, whether successful or failed, should respond in the same average response time. (L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==35), id=35, BenchObjetivoControlId=16, Numero="2.29", Nombre="Verify that secrets, API keys, and passwords are not included in the source code, or online source code repositories. (L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==36), id=36, BenchObjetivoControlId=16, Numero="2.31", Nombre="Verify that if an application allows users to authenticate, they can authenticate using two-factor authentication or other strong authentication, or any similar scheme that provides protection against username + password disclosure. (L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==37), id=37, BenchObjetivoControlId=16, Numero="2.32", Nombre="Verify that administrative interfaces are not accessible to untrusted parties. (L1, L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==38), id=38, BenchObjetivoControlId=16, Numero="2.33", Nombre="Browser autocomplete, and integration with password managers are permitted unless prohibited by risk based policy. (L1, L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')

    db.BenchControl.update_or_insert((db.BenchControl.id==39), id=39, BenchObjetivoControlId=17, Numero="3.1", Nombre="Verify that there is no custom session manager, or that the custom session manager is resistant against all common session management attacks. (L1, L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==40), id=40, BenchObjetivoControlId=17, Numero="3.2", Nombre="Verify that sessions are invalidated when the user logs out. (L1, L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==41), id=41, BenchObjetivoControlId=17, Numero="3.3", Nombre="Verify that sessions timeout after a specified period of inactivity. (L1, L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==42), id=42, BenchObjetivoControlId=17, Numero="3.4", Nombre="Verify that sessions timeout after an administratively-configurable maximum time period regardless of activity (an absolute timeout). (L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==43), id=43, BenchObjetivoControlId=17, Numero="3.5", Nombre="Verify that all pages that require authentication have easy and visible access to logout functionality. (L1, L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==44), id=44, BenchObjetivoControlId=17, Numero="3.6", Nombre="Verify that the session id is never disclosed in URLs, error messages, or logs. This includes verifying that the application does not support URL rewriting of session cookies. (L1, L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==45), id=45, BenchObjetivoControlId=17, Numero="3.7", Nombre="Verify that all successful authentication and re-authentication generates a new session and session id. (L1, L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==46), id=46, BenchObjetivoControlId=17, Numero="3.10", Nombre="Verify that only session ids generated by the application framework are recognized as active by the application. (L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==47), id=47, BenchObjetivoControlId=17, Numero="3.11", Nombre="Verify that session ids are sufficiently long, random and unique across the correct active session base. (L1, L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==48), id=48, BenchObjetivoControlId=17, Numero="3.12", Nombre="Verify that session ids stored in cookies have their path set to an appropriately restrictive value for the application, and authentication session tokens additionally set the “HttpOnly” and “secure” attributes. (L1, L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==49), id=49, BenchObjetivoControlId=17, Numero="3.16", Nombre="Verify that the application limits the number of active concurrent sessions. (L1, L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==50), id=50, BenchObjetivoControlId=17, Numero="3.17", Nombre="Verify that an active session list is displayed in the account profile or similar of each user. The user should be able to terminate any active session. (L1, L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==51), id=51, BenchObjetivoControlId=17, Numero="3.18", Nombre="Verify the user is prompted with the option to terminate all other active sessions after a successful change password process. (L1, L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')

    db.BenchControl.update_or_insert((db.BenchControl.id==52), id=52, BenchObjetivoControlId=18, Numero="4.1", Nombre="Verify that the principle of least privilege exists - users should only be able to access functions, data files, URLs, controllers, services, and other resources, for which they possess specific authorization. This implies protection against spoofing and elevation of privilege. (L1, L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==53), id=53, BenchObjetivoControlId=18, Numero="4.4", Nombre="Verify that access to sensitive records is protected, such that only authorized objects or data is accessible to each user (for example, protect against users tampering with a parameter to see or alter another user's account). (L1, L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==54), id=54, BenchObjetivoControlId=18, Numero="4.5", Nombre="Verify that directory browsing is disabled unless deliberately desired. Additionally, applications should not allow discovery or disclosure of file or directory metadata, such as Thumbs.db, .DS_Store, .git or .svn folders. (L1, L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==55), id=55, BenchObjetivoControlId=18, Numero="4.8", Nombre="Verify that access controls fail securely. (L1, L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==56), id=56, BenchObjetivoControlId=18, Numero="4.9", Nombre="Verify that the same access control rules implied by the presentation layer are enforced on the server side. (L1, L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==57), id=57, BenchObjetivoControlId=18, Numero="4.10", Nombre="Verify that all user and data attributes and policy information used by access controls cannot be manipulated by end users unless specifically authorized. (L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==58), id=58, BenchObjetivoControlId=18, Numero="4.11", Nombre="Verify that there is a centralized mechanism (including libraries that call external authorization services) for protecting access to each type of protected resource. (L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==59), id=59, BenchObjetivoControlId=18, Numero="4.12", Nombre="Verify that all access control decisions can be logged and all failed decisions are logged. (L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==60), id=60, BenchObjetivoControlId=18, Numero="4.13", Nombre="Verify that the application or framework uses strong random anti-CSRF tokens or has another transaction protection mechanism. (L1, L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==61), id=61, BenchObjetivoControlId=18, Numero="4.14", Nombre="Verify the system can protect against aggregate or continuous access of secured functions, resources, or data. For example, consider the use of a resource governor to limit the number of edits per hour or to prevent the entire database from being scraped by an individual user. (L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==62), id=62, BenchObjetivoControlId=18, Numero="4.15", Nombre="Verify the application has additional authorization (such as step up or adaptive authentication) for lower value systems, and / or segregation of duties for high value applications to enforce anti-fraud controls as per the risk of application and past fraud. (L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==63), id=63, BenchObjetivoControlId=18, Numero="4.16", Nombre="Verify that the application correctly enforces context-sensitive authorisation so as to not allow unauthorised manipulation by means of parameter tampering. (L1, L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')

    db.BenchControl.update_or_insert((db.BenchControl.id==64), id=64, BenchObjetivoControlId=19, Numero="5.1", Nombre="Verify that the runtime environment is not susceptible to buffer overflows, or that security controls prevent buffer overflows. (L1, L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==65), id=65, BenchObjetivoControlId=19, Numero="5.3", Nombre="Verify that server side input validation failures result in request rejection and are logged. (L1, L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==66), id=66, BenchObjetivoControlId=19, Numero="5.5", Nombre="Verify that input validation routines are enforced on the server side. (L1, L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==67), id=67, BenchObjetivoControlId=19, Numero="5.6", Nombre="Verify that a single input validation control is used by the application for each type of data that is accepted. (L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==68), id=68, BenchObjetivoControlId=19, Numero="5.10", Nombre="Verify that all SQL queries, HQL, OSQL, NOSQL and stored procedures, calling of stored procedures are protected by the use of prepared statements or query parameterization, and thus not susceptible to SQL injection. (L1, L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==69), id=69, BenchObjetivoControlId=19, Numero="5.11", Nombre="Verify that the application is not susceptible to LDAP Injection, or that security controls prevent LDAP Injection. (L1, L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==70), id=70, BenchObjetivoControlId=19, Numero="5.12", Nombre="Verify that the application is not susceptible to OS Command Injection, or that security controls prevent OS Command Injection. (L1, L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==71), id=71, BenchObjetivoControlId=19, Numero="5.13", Nombre="Verify that the application is not susceptible to Remote File Inclusion (RFI) or Local File Inclusion (LFI) when content is used that is a path to a file. (L1, L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==72), id=72, BenchObjetivoControlId=19, Numero="5.14", Nombre="Verify that the application is not susceptible to common XML attacks, such as XPath query tampering, XML External Entity attacks, and XML injection attacks. (L1, L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==73), id=73, BenchObjetivoControlId=19, Numero="5.15", Nombre="Ensure that all string variables placed into HTML or other web client code is either properly contextually encoded manually, or utilize templates that automatically encode contextually to ensure the application is not susceptible to reflected, stored and DOM Cross-Site Scripting (XSS) attacks. (L1, L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==74), id=74, BenchObjetivoControlId=19, Numero="5.16", Nombre="If the application framework allows automatic mass parameter assignment (also called automatic variable binding) from the inbound request to a model, verify that security sensitive fields such as “accountBalance”, “role” or “password” are protected from malicious automatic binding. (L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==75), id=75, BenchObjetivoControlId=19, Numero="5.17", Nombre="Verify that the application has defenses against HTTP parameter pollution attacks, particularly if the application framework makes no distinction about the source of request parameters (GET, POST, cookies, headers, environment, etc.) (L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==76), id=76, BenchObjetivoControlId=19, Numero="5.18", Nombre="Verify that client side validation is used as a second line of defense, in addition to server side validation. (L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==77), id=77, BenchObjetivoControlId=19, Numero="5.19", Nombre="Verify that all input data is validated, not only HTML form fields but all sources of input such as REST calls, query parameters, HTTP headers, cookies, batch files, RSS feeds, etc; using positive validation (whitelisting), then lesser forms of validation such as greylisting (eliminating known bad strings), or rejecting bad inputs (blacklisting). (L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==78), id=78, BenchObjetivoControlId=19, Numero="5.20", Nombre="Verify that structured data is strongly typed and validated against a defined schema including allowed characters, length and pattern (e.g. credit card numbers or telephone, or validating that two related fields are reasonable, such as validating suburbs and zip or post codes match). (L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==79), id=79, BenchObjetivoControlId=19, Numero="5.21", Nombre="Verify that unstructured data is sanitized to enforce generic safety measures such as allowed characters and length, and characters potentially harmful in given context should be escaped (e.g. natural names with Unicode or apostrophes). (L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==80), id=80, BenchObjetivoControlId=19, Numero="5.22", Nombre="Make sure untrusted HTML from WYSIWYG editors or similar are properly sanitized with an HTML sanitizer and handle it appropriately according to the input validation task and encoding task. (L1, L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==81), id=81, BenchObjetivoControlId=19, Numero="5.23", Nombre="For auto-escaping template technology, if UI escaping is disabled, ensure that HTML sanitization is enabled instead. (L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==82), id=82, BenchObjetivoControlId=19, Numero="5.24", Nombre="Verify that data transferred from one DOM context to another, uses safe JavaScript methods, such as using .innerText and .val. (L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==83), id=83, BenchObjetivoControlId=19, Numero="5.25", Nombre="Verify when parsing JSON in browsers, that JSON.parse is used to parse JSON on the client. Do not use eval() to parse JSON on the client. (L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==84), id=84, BenchObjetivoControlId=19, Numero="5.26", Nombre="Verify that authenticated data is cleared from client storage, such as the browser DOM, after the session is terminated. (L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')

    db.BenchControl.update_or_insert((db.BenchControl.id==85), id=85, BenchObjetivoControlId=20, Numero="7.2", Nombre="Verify that all cryptographic modules fail securely, and errors are handled in a way that does not enable oracle padding. (L1, L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==86), id=86, BenchObjetivoControlId=20, Numero="7.6", Nombre="Verify that all random numbers, random file names, random GUIDs, and random strings are generated using the cryptographic module’s approved random number generator when these random values are intended to be not guessable by an attacker. (L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==87), id=87, BenchObjetivoControlId=20, Numero="7.7", Nombre="Verify that cryptographic algorithms used by the application have been validated against FIPS 140-2 or an equivalent standard. (L1, L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==88), id=88, BenchObjetivoControlId=20, Numero="7.8", Nombre="Verify that cryptographic modules operate in their approved mode according to their published security policies. (L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==89), id=89, BenchObjetivoControlId=20, Numero="7.9", Nombre="Verify that there is an explicit policy for how cryptographic keys are managed (e.g., generated, distributed, revoked, and expired). Verify that this key lifecycle is properly enforced. (L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==90), id=90, BenchObjetivoControlId=20, Numero="7.11", Nombre="Verify that all consumers of cryptographic services do not have direct access to key material. Isolate cryptographic processes, including master secrets and consider the use of a virtualized or physical hardware key vault (HSM). (L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==91), id=91, BenchObjetivoControlId=20, Numero="7.12", Nombre="Personally Identifiable Information should be stored encrypted at rest and ensure that communication goes via protected channels. (L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==92), id=92, BenchObjetivoControlId=20, Numero="7.13", Nombre="Verify that sensitive passwords or key material maintained in memory is overwritten with zeros as soon as it no longer required, to mitigate memory dumping attacks. (L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==93), id=93, BenchObjetivoControlId=20, Numero="7.14", Nombre="Verify that all keys and passwords are replaceable, and are generated or replaced at installation time. (L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==94), id=94, BenchObjetivoControlId=20, Numero="7.15", Nombre="Verify that random numbers are created with proper entropy even when the application is under heavy load, or that the application degrades gracefully in such circumstances. (L3)", Descripcion="", AprobacionJefeRiesgo='T')

    db.BenchControl.update_or_insert((db.BenchControl.id==95), id=95, BenchObjetivoControlId=21, Numero="8.1", Nombre="Verify that the application does not output error messages or stack traces containing sensitive data that could assist an attacker, including session id, software/framework versions and personal information. (L1, L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==96), id=96, BenchObjetivoControlId=21, Numero="8.2", Nombre="Verify that error handling logic in security controls denies access by default. (L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==97), id=97, BenchObjetivoControlId=21, Numero="8.3", Nombre="Verify security logging controls provide the ability to log success and particularly failure events that are identified as security-relevant. (L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==98), id=98, BenchObjetivoControlId=21, Numero="8.4", Nombre="Verify that each log event includes necessary information that would allow for a detailed investigation of the timeline when an event happens. (L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==99), id=99, BenchObjetivoControlId=21, Numero="8.5", Nombre="Verify that all events that include untrusted data will not execute as code in the intended log viewing software. (L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==100), id=100, BenchObjetivoControlId=21, Numero="8.6", Nombre="Verify that security logs are protected from unauthorized access and modification. (L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==101), id=101, BenchObjetivoControlId=21, Numero="8.7", Nombre="Verify that the application does not log sensitive data as defined under local privacy laws or regulations, organizational sensitive data as defined by a risk assessment, or sensitive authentication data that could assist an attacker, including user’s session identifiers, passwords, hashes, or API tokens. (L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==102), id=102, BenchObjetivoControlId=21, Numero="8.8", Nombre="Verify that all non-printable symbols and field separators are properly encoded in log entries, to prevent log injection. (L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==103), id=103, BenchObjetivoControlId=21, Numero="8.9", Nombre="Verify that log fields from trusted and untrusted sources are distinguishable in log entries. (L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==104), id=104, BenchObjetivoControlId=21, Numero="8.10", Nombre="Verify that an audit log or similar allows for non-repudiation of key transactions. (L1, L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==105), id=105, BenchObjetivoControlId=21, Numero="8.11", Nombre="Verify that security logs have some form of integrity checking or controls to prevent unauthorized modification. (L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==106), id=106, BenchObjetivoControlId=21, Numero="8.12", Nombre="Verify that the logs are stored on a different partition than the application is running with proper log rotation. (L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==107), id=107, BenchObjetivoControlId=21, Numero="8.13", Nombre="Time sources should be synchronized to ensure logs have the correct time. (L1, L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')

    db.BenchControl.update_or_insert((db.BenchControl.id==108), id=108, BenchObjetivoControlId=22, Numero="9.1", Nombre="Verify that all forms containing sensitive information have disabled client side caching, including autocomplete features. (L1, L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==109), id=109, BenchObjetivoControlId=22, Numero="9.2", Nombre="Verify that the list of sensitive data processed by the application is identified, and that there is an explicit policy for how access to this data must be controlled, encrypted and enforced under relevant data protection directives. (L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==110), id=110, BenchObjetivoControlId=22, Numero="9.3", Nombre="Verify that all sensitive data is sent to the server in the HTTP message body or headers (i.e., URL parameters are never used to send sensitive data). (L1, L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==111), id=111, BenchObjetivoControlId=22, Numero="9.4", Nombre="Verify that the application sets appropriate anti-caching headers as per the risk of the application, such as the following. (L1, L2, L3)", Descripcion="Expires: Tue, 03 Jul 2001 06:00:00 GMT Last-Modified: {now} GMT Cache-Control: no-store, no-cache, must-revalidate, max-age=0 Cache-Control: post-check=0, pre-check=0 Pragma: no-cache", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==112), id=112, BenchObjetivoControlId=22, Numero="9.5", Nombre="Verify that on the server, all cached or temporary copies of sensitive data stored are protected from unauthorized access or purged/invalidated after the authorized user accesses the sensitive data. (L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==113), id=113, BenchObjetivoControlId=22, Numero="9.6", Nombre="Verify that there is a method to remove each type of sensitive data from the application at the end of the required retention policy. (L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==114), id=114, BenchObjetivoControlId=22, Numero="9.7", Nombre="Verify the application minimizes the number of parameters in a request, such as hidden fields, Ajax variables, cookies and header values. (L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==115), id=115, BenchObjetivoControlId=22, Numero="9.8", Nombre="Verify the application has the ability to detect and alert on abnormal numbers of requests for data harvesting for an example screen scraping. (L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==116), id=116, BenchObjetivoControlId=22, Numero="9.9", Nombre="Verify that data stored in client side storage (such as HTML5 local storage, session storage, IndexedDB, regular cookies or Flash cookies) does not contain sensitive data or PII. (L1, L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==117), id=117, BenchObjetivoControlId=22, Numero="9.10", Nombre="Verify accessing sensitive data is logged, if the data is collected under relevant data protection directives or where logging of accesses is required. (L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==118), id=118, BenchObjetivoControlId=22, Numero="9.11", Nombre="Verify that sensitive information maintained in memory is overwritten with zeros as soon as it no longer required, to mitigate memory dumping attacks. (L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')

    db.BenchControl.update_or_insert((db.BenchControl.id==119), id=119, BenchObjetivoControlId=23, Numero="10.1", Nombre="Verify that a path can be built from a trusted CA to each Transport Layer Security (TLS) server certificate, and that each server certificate is valid. (L1, L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==120), id=120, BenchObjetivoControlId=23, Numero="10.3", Nombre="Verify that TLS is used for all connections (including both external and backend connections) that are authenticated or that involve sensitive data or functions, and does not fall back to insecure or unencrypted protocols. Ensure the strongest alternative is the preferred algorithm. (L1, L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==121), id=121, BenchObjetivoControlId=23, Numero="10.4", Nombre="Verify that backend TLS connection failures are logged. (L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==122), id=122, BenchObjetivoControlId=23, Numero="10.5", Nombre="Verify that certificate paths are built and verified for all client certificates using configured trust anchors and revocation information. (L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==123), id=123, BenchObjetivoControlId=23, Numero="10.6", Nombre="Verify that all connections to external systems that involve sensitive information or functions are authenticated. (L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==124), id=124, BenchObjetivoControlId=23, Numero="10.8", Nombre="Verify that there is a single standard TLS implementation that is used by the application that is configured to operate in an approved mode of operation. (L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==125), id=125, BenchObjetivoControlId=23, Numero="10.10", Nombre="Verify that TLS certificate public key pinning (HPKP) is implemented with production and backup public keys. For more information, please see the references below. (L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==126), id=126, BenchObjetivoControlId=23, Numero="10.11", Nombre="Verify that HTTP Strict Transport Security headers are included on all requests and for all subdomains, such as Strict-Transport-Security: max-age=15724800; includeSubdomains. (L1, L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==127), id=127, BenchObjetivoControlId=23, Numero="10.12", Nombre="Verify that production website URL has been submitted to preloaded list of Strict Transport Security domains maintained by web browser vendors. Please see the references below. (L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==128), id=128, BenchObjetivoControlId=23, Numero="10.13", Nombre="Ensure forward secrecy ciphers are in use to mitigate passive attackers recording traffic. (L1, L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==129), id=129, BenchObjetivoControlId=23, Numero="10.14", Nombre="Verify that proper certification revocation, such as Online Certificate Status Protocol (OSCP) Stapling, is enabled and configured. (L1, L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==130), id=130, BenchObjetivoControlId=23, Numero="10.15", Nombre="Verify that only strong algorithms, ciphers, and protocols are used, through all the certificate hierarchy, including root and intermediary certificates of your selected certifying authority. (L1, L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==131), id=131, BenchObjetivoControlId=23, Numero="10.16", Nombre="Verify that the TLS settings are in line with current leading practice, particularly as common configurations, ciphers, and algorithms become insecure. (L1, L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')

    db.BenchControl.update_or_insert((db.BenchControl.id==132), id=132, BenchObjetivoControlId=24, Numero="11.1", Nombre="Verify that the application accepts only a defined set of required HTTP request methods, such as GET and POST are accepted, and unused methods (e.g. TRACE, PUT, and DELETE) are explicitly blocked. (L1, L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==133), id=133, BenchObjetivoControlId=24, Numero="11.2", Nombre="Verify that every HTTP response contains a content type header specifying a safe character set (e.g., UTF-8, ISO 8859-1). (L1, L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==134), id=134, BenchObjetivoControlId=24, Numero="11.3", Nombre="Verify that HTTP headers added by a trusted proxy or SSO devices, such as a bearer token, are authenticated by the application. (L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==135), id=135, BenchObjetivoControlId=24, Numero="11.4", Nombre="Verify that a suitable X-FRAME-OPTIONS header is in use for sites where content should not be viewed in a 3rd-party X-Frame. (L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==136), id=136, BenchObjetivoControlId=24, Numero="11.5", Nombre="Verify that the HTTP headers or any part of the HTTP response do not expose detailed version information of system components. (L1, L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==137), id=137, BenchObjetivoControlId=24, Numero="11.6", Nombre="Verify that all API responses contain X-Content-Type-Options: nosniff and Content-Disposition: attachment; filename=api.json (or other appropriate filename for the content type). (L1, L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==138), id=138, BenchObjetivoControlId=24, Numero="11.7", Nombre="Verify that a content security policy (CSPv2) is in place that helps mitigate common DOM, XSS, JSON, and JavaScript injection vulnerabilities. (L1, L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==139), id=139, BenchObjetivoControlId=24, Numero="11.8", Nombre="Verify that the X-XSS-Protection: 1; mode=block header is in place. (L1, L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')

    db.BenchControl.update_or_insert((db.BenchControl.id==140), id=140, BenchObjetivoControlId=25, Numero="13.1", Nombre="Verify all malicious activity is adequately sandboxed, containerized or isolated to delay and deter attackers from attacking other applications. (L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==141), id=141, BenchObjetivoControlId=25, Numero="13.2", Nombre="Verify that the application source code, and as many third party libraries as possible, does not contain back doors, Easter eggs, and logic flaws in authentication, access control, input validation, and the business logic of high value transactions. (L3)", Descripcion="", AprobacionJefeRiesgo='T')

    db.BenchControl.update_or_insert((db.BenchControl.id==142), id=142, BenchObjetivoControlId=26, Numero="15.1", Nombre="Verify the application will only process business logic flows in sequential step order, with all steps being processed in realistic human time, and not process out of order, skipped steps, process steps from another user, or too quickly submitted transactions. (L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==143), id=143, BenchObjetivoControlId=26, Numero="15.2", Nombre="Verify the application has business limits and correctly enforces on a per user basis, with configurable alerting and automated reactions to automated or unusual attack. (L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')

    db.BenchControl.update_or_insert((db.BenchControl.id==144), id=144, BenchObjetivoControlId=27, Numero="16.1", Nombre="Verify that URL redirects and forwards only allow whitelisted destinations, or show a warning when redirecting to potentially untrusted content. (L1, L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==145), id=145, BenchObjetivoControlId=27, Numero="16.2", Nombre="Verify that untrusted file data submitted to the application is not used directly with file I/O commands, particularly to protect against path traversal, local file include, file mime type, and OS command injection vulnerabilities. (L1, L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==146), id=146, BenchObjetivoControlId=27, Numero="16.3", Nombre="Verify that files obtained from untrusted sources are validated to be of expected type and scanned by antivirus scanners to prevent upload of known malicious content. (L1, L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==147), id=147, BenchObjetivoControlId=27, Numero="16.4", Nombre="Verify that untrusted data is not used within inclusion, class loader, or reflection capabilities to prevent remote/local file inclusion vulnerabilities. (L1, L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==148), id=148, BenchObjetivoControlId=27, Numero="16.5", Nombre="Verify that untrusted data is not used within cross-domain resource sharing (CORS) to protect against arbitrary remote content. (L1, L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==149), id=149, BenchObjetivoControlId=27, Numero="16.6", Nombre="Verify that files obtained from untrusted sources are stored outside the webroot, with limited permissions, preferably with strong validation. (L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==150), id=150, BenchObjetivoControlId=27, Numero="16.7", Nombre="Verify that the web or application server is configured by default to deny access to remote resources or systems outside the web or application server. (L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==151), id=151, BenchObjetivoControlId=27, Numero="16.8", Nombre="Verify the application code does not execute uploaded data obtained from untrusted sources. (L1, L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==152), id=152, BenchObjetivoControlId=27, Numero="16.9", Nombre="Do not use Flash, Active-X, Silverlight, NACL, client-side Java or other client side technologies not supported natively via W3C browser standards. (L1, L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')

    db.BenchControl.update_or_insert((db.BenchControl.id==153), id=153, BenchObjetivoControlId=28, Numero="17.1", Nombre="Verify that ID values stored on the device and retrievable by other applications, such as the UDID or IMEI number are not used as authentication tokens. (L1, L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==154), id=154, BenchObjetivoControlId=28, Numero="17.2", Nombre="Verify that the mobile app does not store sensitive data onto potentially unencrypted shared resources on the device (e.g. SD card or shared folders). (L1, L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==155), id=155, BenchObjetivoControlId=28, Numero="17.3", Nombre="Verify that sensitive data is not stored unprotected on the device, even in system protected areas such as key chains. (L1, L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==156), id=156, BenchObjetivoControlId=28, Numero="17.4", Nombre="Verify that secret keys, API tokens, or passwords are dynamically generated in mobile applications. (L1, L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==157), id=157, BenchObjetivoControlId=28, Numero="17.5", Nombre="Verify that the mobile app prevents leaking of sensitive information (for example, screenshots are saved of the current application as the application is backgrounded or writing sensitive information in console) . (L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==158), id=158, BenchObjetivoControlId=28, Numero="17.6", Nombre="Verify that the application is requesting minimal permissions for required functionality and resources. (L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==159), id=159, BenchObjetivoControlId=28, Numero="17.7", Nombre="Verify that the application sensitive code is laid out unpredictably in memory (For example ASLR). (L1, L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==160), id=160, BenchObjetivoControlId=28, Numero="17.8", Nombre="Verify that there are anti-debugging techniques present that are sufficient enough to deter or delay likely attackers from injecting debuggers into the mobile app (For example GDB). (L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==161), id=161, BenchObjetivoControlId=28, Numero="17.9", Nombre="Verify that the app does not export sensitive activities, intents, content providers etc., for other mobile apps on the same device to exploit. (L1, L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==162), id=162, BenchObjetivoControlId=28, Numero="17.10", Nombre="Verify that sensitive information maintained in memory is overwritten with zeros as soon as it no longer required, to mitigate memory dumping attacks. (L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==163), id=163, BenchObjetivoControlId=28, Numero="17.11", Nombre="Verify that the app validates input to exported activities, intents, or content providers. (L1, L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')

    db.BenchControl.update_or_insert((db.BenchControl.id==164), id=164, BenchObjetivoControlId=29, Numero="18.1", Nombre="Verify that the same encoding style is used between the client and the server. (L1, L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==165), id=165, BenchObjetivoControlId=29, Numero="18.2", Nombre="Verify that access to administration and management functions within the Web Service Application is limited to web service administrators. (L1, L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==166), id=166, BenchObjetivoControlId=29, Numero="18.3", Nombre="Verify that XML or JSON schema is in place and verified before accepting input. (L1, L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==167), id=167, BenchObjetivoControlId=29, Numero="18.4", Nombre="Verify that all input is limited to an appropriate size limit. (L1, L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==168), id=168, BenchObjetivoControlId=29, Numero="18.5", Nombre="Verify that SOAP based web services are compliant with Web Services-Interoperability (WS-I) Basic Profile at minimum. This essentially means TLS encryption. (L1, L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==169), id=169, BenchObjetivoControlId=29, Numero="18.6", Nombre="Verify the use of session-based authentication and authorization. Please refer to sections 2, 3 and 4 for further guidance. Avoid the use of static API keys and similar. (L1, L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==170), id=170, BenchObjetivoControlId=29, Numero="18.7", Nombre="Verify that the REST service is protected from Cross-Site Request Forgery via the use of at least one or more of the following: ORIGIN checks, double submit cookie pattern, CSRF nonces, and referrer checks. (L1, L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==171), id=171, BenchObjetivoControlId=29, Numero="18.8", Nombre="Verify the REST service explicitly check the incoming Content-Type to be the expected one, such as application/xml or application/json. (L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==172), id=172, BenchObjetivoControlId=29, Numero="18.9", Nombre="Verify that the message payload is signed to ensure reliable transport between client and service, using JSON Web Signing or WS-Security for SOAP requests. (L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==173), id=173, BenchObjetivoControlId=29, Numero="18.10", Nombre="Verify that alternative and less secure access paths do not exist. (L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')

    db.BenchControl.update_or_insert((db.BenchControl.id==174), id=174, BenchObjetivoControlId=30, Numero="19.1", Nombre="All components should be up to date with proper security configuration(s) and version(s). This should include removal of unneeded configurations and folders such as sample applications, platform documentation, and default or example users. (L1, L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==175), id=175, BenchObjetivoControlId=30, Numero="19.2", Nombre="Communications between components, such as between the application server and the database server, should be encrypted, particularly when the components are in different containers or on different systems. (L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==176), id=176, BenchObjetivoControlId=30, Numero="19.3", Nombre="Communications between components, such as between the application server and the database server should be authenticated using an account with the least necessary privileges. (L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==177), id=177, BenchObjetivoControlId=30, Numero="19.4", Nombre="Verify application deployments are adequately sandboxed, containerized or isolated to delay and deter attackers from attacking other applications. (L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==178), id=178, BenchObjetivoControlId=30, Numero="19.5", Nombre="Verify that the application build and deployment processes are performed in a secure fashion. (L2, L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==179), id=179, BenchObjetivoControlId=30, Numero="19.6", Nombre="Verify that authorised administrators have the capability to verify the integrity of all security-relevant configurations to ensure that they have not been tampered with. (L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==180), id=180, BenchObjetivoControlId=30, Numero="19.7", Nombre="Verify that all application components are signed. (L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==181), id=181, BenchObjetivoControlId=30, Numero="19.8", Nombre="Verify that third party components come from trusted repositories. (L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==182), id=182, BenchObjetivoControlId=30, Numero="19.9", Nombre="Ensure that build processes for system level languages have all security flags enabled, such as ASLR, DEP, and security checks. (L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==183), id=183, BenchObjetivoControlId=30, Numero="19.10", Nombre="Verify that all application assets are hosted by the application, such as JavaScript libraries, CSS stylesheets and web fonts are hosted by the application rather than rely on a CDN or external provider. (L3)", Descripcion="", AprobacionJefeRiesgo='T')
    db.BenchControl.update_or_insert((db.BenchControl.id==184), id=184, BenchObjetivoControlId=36, Numero="6.1", Nombre="Spiders, Robots, and Crawlers (OWASP-IG-001) Search Engine Discovery/Reconnaissance (OWASP-IG-002) Search Engine Discovery/Reconnaissance (OWASP-IG-002) Testing Web Application Fingerprint (OWASP-IG-004) Application Discovery (OWASP-IG-005) Analysis of Error Codes (OWASP-IG-006)", Descripcion="", AprobacionJefeRiesgo='T')

    #-------------------------------------
    #Controles para actividades de control
    #31,32,33,34,35
    #-------------------------------------
    #db.BenchControl.update_or_insert((db.BenchControl.id==63), id=63, BenchObjetivoControlId=30, Numero="19.10", Nombre="Verify that all application assets are hosted by the application, such as JavaScript libraries, CSS stylesheets and web fonts are hosted by the application rather than rely on a CDN or external provider. (L3)", Descripcion="", AprobacionJefeRiesgo='T')

    #-------------
    #GrupoControl
    #-------------
    iso27Es = True
    iso27En = False
    nist = False


    if iso27Es == True:
        #-----------------------------------
        #ISO 27 - Anexo A (Es) 
        #-----------------------------------
        #A.5 Politica de Seguridad
        #-----------------------------------
        db.CatalogoControl.update_or_insert((db.CatalogoControl.id==1), id=1, Nombre="A.5.1 Política de Seguridad de la Información (A.5 Política de Seguridad)", Descripcion="Proporcionar dirección de gestión y soporte para la seguridad de la información de acuerdo con los requisitos de negocio, las leyes y regulaciones relevantes (To provide management direction and support for information security in accordance with business requirements and relevant laws and regulations).", GuiaImplementacion="A.5.1.1 Documento de política de seguridad de la información: Se debe definir un conjunto de políticas de seguridad de la información, aprobadas por la gerencia, publicados y comunicados a los empleados y a las partes externas (A.5.1.1 Policies for information security: A set of policies for information security shall be defined, approved by management, published and communicated to employees and relevant external parties). A.5.1.2 Revisión de las políticas para seguridad de la información: Las políticas de seguridad de la información se deben revisar en intervalos planificados o si se producen cambios significativos para asegurar su idoneidad, suficiencia y efectividad (A.5.1.2 Review of the policies for information security: The policies for information security shall be reviewed at planned intervals or if significant changes occur to ensure their continuing suitability, adequacy and effectiveness).", GuiaAuditoria="- La política debe ser aprobada por la Dirección. - La política debe comunicarse a todos los empleados y partes pertinentes. - La comunicación de las políticas se debe realizar a todos los niveles. - La política se puede manejar en 3 niveles (Política general/ejecutiva, políticas especificas/estandares, procesos/procedimientos/manuales). - La política general expresa el compromiso de la organización con la seguridad de la información. - La política ejecutiva o general no debe ser demasiada especifica o técnica, si no a alto nivel y conceptual. - Las políticas especificas/estandares  son mas técnicas especificas a la insfraestructura de TI y aspectos mas técnicos de seguridad de la información. - Los procesos/procedimientos/estandares son mas especificos a técnologias y procesos y dan cumplimiento a las políticas de seguridad de la información.", Baseline=5, AprobacionJefeRiesgo='T', ControlClave='T')
        #------------------------------------------
        #A.6  Organization of information security
        #------------------------------------------
        db.CatalogoControl.update_or_insert((db.CatalogoControl.id==2), id=2, Nombre="A.6.1 Organización Interna (A.6 Aspectos Organizativos de Seguridad de la Información)", Descripcion="Se debe establecer una estructura de gestión con objeto de iniciar y controlar la implantación y operación de la seguridad de la información dentro de la Organización (To establish a management framework to initiate and control the implementation and operation of information security within the organization).", GuiaImplementacion="A.6.1.1 Asignación de roles y responsabilidades para seguridad de la información: Todas las responsabilidades de seguridad de la información deben ser definidas y asignadas (A.6.1.1 Information security roles and responsibilities: All information security responsibilities shall be defined and allocated). A.6.1.2 Segregación de funciones: Los conflictos en las funciones, deberes y áreas de responsabilidad se deben segregar para reducir oportunidades de modificación o mal uso de los activos de la información, ya sea de manera intencional o accidental (A.6.1.2 Segregation of duties: Conflicting duties and areas of responsibility shall be segregated to reduce opportunities for unauthorized or unintentional modification or misuse of the organization’s assets). A.6.1.3 Contacto con autoridades: Se deben mantener contactos apropiados con las autoridades pertinentes (A.6.1.3 Contact with authorities: Appropriate contacts with relevant authorities shall be maintained). A.6.1.4 Contacto con grupos especiales de interes: Se debe mantener contacto apropiado con grupos de interes especial u otros grupos especializados en seguridad de la información y asociaciones profesionales (A.6.1.4 Contact with special interest groups: Appropriate contacts with special interest groups or other specialist security forums and professional associations shall be maintained). A.6.1.5 Seguridad de la Información en la gestión de proyectos: Se debe abordar la seguridad de la información en la gestión de proyectos, independientemente del tipo de proyecto (A.6.1.5 Information security in project management: Information security shall be addressed in project management, regardless of the type of the project).", GuiaAuditoria="- Definir las responsabilidades de cada empleado en relación a Seguridad de la Información. - Comunicar los roles y responsabilidades de Seguridad de la Información. - Hacer participes de las responsabilidades de seguridad de la información a las partes externas que sean pertinentes. - Cuando no es posible implementar una Segregación de Funciones adecuada, se deben diseñar controles compensatorios (monitoreo, auditoría, logs/registros/bitacoras). - Monitoreo: Monitoreo de las actividades en tiempo real, alertas. - Auditorías: Validar el cumplimiento a las políticas, identificar violaciones de seguridad. - Logs/registros/auditorías: registrar eventos o transacciones sensibles, uso de cuentas privilegiadas, cambios o modificaciones. - Identificar si es necesario contactar a alguna autoridad en caso de un incidente de seguridad. - Realizar una evaluación de riesgos centrada en la Seguridad de la Información al comienzo de cualquier proyecto para identificar riesgos e implementar controles. - Asegurar que la información manejada en el proyecto sea protegida adecuadamente de acuerdo a su clasificación. - Identificar si el proyecto tiene requerimientos de seguridad que deba cumplir (regulatorios, contractuales) o identificar riesgos en sistemas de información.", Baseline=5, AprobacionJefeRiesgo='T', ControlClave='T')

        db.CatalogoControl.update_or_insert((db.CatalogoControl.id==3), id=3, Nombre="A.6.2 Dispositivos para movilidad y teletrabajo (A.6 Aspectos Organizativos de Seguridad de la Información)", Descripcion="Asegurar la seguridad en el teletrabajo y en el uso de dispositivos móviles (To ensure the security of teleworking and use of mobile devices).", GuiaImplementacion="A.6.2.1 Política de dispositivos móviles: Se debe adoptar una política y medidas de seguridad de soporte para gestionar los riesgos introducidos por el uso de dispositivos móviles (A.6.2.1 Mobile device policy: A policy and supporting security measures shall be adopted to manage the risks introduced by using mobile devices). A.6.2.2 Teletrabajo: Se debe adoptar una política y medidas de seguridad de soporte para proteger la información que es accesada, procesada y almacenada en sitios de teletrabajo (A.6.2.2 Teleworking: A policy and supporting security measures shall be implemented to protect information accessed, processed or stored at teleworking sites).", GuiaAuditoria="- Establecer políticas y controles para el uso de dispositivos móviles. - Considerar al menos: registro y cancelación de dispositivos móviles, Seguridad en las conexiones remotas, Seguridad de software, control de acceso, cifrado en reposo y en transito. - Política sobre el uso de los dispositivos móviles. - Realizar un análisis de riesgo en las actividades de teletrabajo y diseñar los controles de mitigación. - Considerar al menos los siguientes controles: La seguridad fisica del entorno de teletrabajo, accesos remotos, seguridad en las comunicaciones, almacenamiento sobre equipos privados, seguridad sobre el equipo de propiedad privada, uso de licencias de software. - No permitir el uso de equipos privados o que no se encuentren bajo control de la organización, definir horas de conexión o trabajo, clasificar la información y definir que nivel de información puede acceder, definir los sistemas y servicios que son permitidos acceder. - La organización puede proveer los equipos de comunicación para asegurar el acceso remoto. - Definir procesos de soporte y mantenimiento. - Definir procesos de auditoría. - Definir procesos de revocación de acceso, y regreso de los equipos o activos cuando termina la relación laboral.", Baseline=5, AprobacionJefeRiesgo='T', ControlClave='T')
        #-----------------------------
        #A.7 Human resource security
        #-----------------------------
        db.CatalogoControl.update_or_insert((db.CatalogoControl.id==4), id=4, Nombre="A.7.1 Antes de la contratación (A.7 Seguridad en Recursos Humanos)", Descripcion="Para asegurar que los empleados y contratistas entiendan sus responsabilidades y sean adecuados para el rol que que fueron contratados (To ensure that employees and contractors understand their responsibilities and are suitable for the roles for which they are considered).", GuiaImplementacion="A.7.1.1 Investigación de antecedentes: Se deben verificar los antecedentes de todos los candidatos para ocupar un puesto de trabajo. Dicha verificación se debe llevar a cabo en conformidad con las leyes, regulaciones y etica, y será proporcional a los requerimientos del negocio, y la clasificación de la información a la que van acceder, así como los riesgos percibidos (A.7.1.1 Screening: Background verification checks on all candidates for employment shall be carried out in accordance with relevant laws, regulations and ethics and shall be proportional to the business requirements, the classification of the information to be accessed and the perceived risks). A.7.1.2 Terminos y condiciones de contratación: Los acuerdos en los contratos con empleados, contratistas y terceros deben establecer sus responsabilidades y la de la organización en materia de seguridad de la información (A.7.1.2 Terms and conditions of employment: The contractual agreements with employees and contractors shall state their and the organization’s responsibilities for information security).", GuiaAuditoria="- Controles previo, durante y al finalizar la relación laboral. - Al implementar estos controles se debe tener en cuenta las leyes y normas vigentes sobre protección de datos. - Firmar contratos de confidencialidad y de no divulgación. - Informar sobre responsabilidades y derechos de seguridad de la información. - Informar sobre las sanciones en caso de falta a las políticas de seguridad de la información. - Las responsabilidades deben considerar al menos: clasificación de la información, uso de los activos, servicios de información a los que accede.", Baseline=5, AprobacionJefeRiesgo='T', ControlClave='T')

        db.CatalogoControl.update_or_insert((db.CatalogoControl.id==5), id=5, Nombre="A.7.2 Durante la contratación (A.7 Seguridad en Recursos Humanos)", Descripcion="Garantizar que los empleados y contratistas conocen y cumplen sus responsabilidades de seguridad de la información (To ensure that employees and contractors are aware of and fulfil their information security responsibilities).", GuiaImplementacion="A.7.2.1 Responsabilidades de la Administración: La administración debe requerir que todos sus empleados y contratistas cumplan con los requerimientos de seguridad de la información de acuerdo con las políticas y procedimientos establecidos por la organización (A.7.2.1 Management responsibilities: Management shall require all employees and contractors to apply information security in accordance with the established policies and procedures of the organization). A.7.2.2 Concientización, educación y entrenamiento en seguridad de la información: Todos los empleados de la organización y cuando sea necesario contratistas y terceros deben recibir y capacitación concientización, educación y entrenamiento apropiado, y actualizaciones regulares sobre las políticas y procedimientos que son relevantes para llevar a cabo su trabajo o función (A.7.2.2 Information security awareness, education and training: All employees of the organization and, where relevant, contractors shall receive appropriate awareness education and training and regular updates in organizational policies and procedures, as relevant for their job function). A.7.2.3 Proceso Disciplinario: Se debe establecer un proceso disciplinario formal y comunicarlo, para tomar medidas contra los empleados que incumplan o cometan un falta de seguridad de la información (A.7.2.3 Disciplinary process: There shall be a formal and communicated disciplinary process in place to take action against employees who have committed an information security breach).", GuiaAuditoria="- Asegurar que los empleados cumplen con las políticas de seguridad de la información. Para ello se debe considerar al menos lo siguiente: capacitación y formación sobre seguridad de la información, formación continua para mantener habilidades de seguridad de la información, proporcionar una linea anonima para reportar violaciones a la seguridad de la información. - Dar a conocer los procedimientos de seguridad de la información a los empleados. - Establecer y dar a conocer un proceso disciplicario por violaciones a la seguridad de la información. - El proceso disciplinario debe considerar lo siguiente: asegurar que se ha cometivo una infracción, evitar tratos injustos e incorrectos. - Considerar respuestas graduales, tomando en cuenta la gravedad, el impacto, y si la violación fue deliberada, existe reincidencia. - Considerar un proceso disciplicario que incluya también gratificaciones.", Baseline=5, AprobacionJefeRiesgo='T', ControlClave='T')

        db.CatalogoControl.update_or_insert((db.CatalogoControl.id==6), id=6, Nombre="A.7.3 Terminación o cambio de puesto o función de trabajo (A.7 Seguridad en Recursos Humanos)", Descripcion="Para proteger los intereses de la organización como parte del proceso de cambio o terminación de empleo (To protect the organization’s interests as part of the process of changing or terminating employment).", GuiaImplementacion="A.7.3.1 Terminación o cambio en las responsabilidades del empleado: Las responsabilidades y deberes de seguridad de la información que permanezcan vigentes después de la terminación o cambio de empleo deben ser definidas, comunicadas y reforzadas a los empleados y contratistas (A.7.3.1 Termination or change of employment responsibilities: Information security responsibilities and duties that remain valid after termination or change of employment shall be defined, communicated to the employee or contractor and enforced).", GuiaAuditoria="- Establecer y comunicar a los empleados y terceros sus responsabilidades de seguridad de la información, después de terminar su relación laboral, o cambio. - Considerar responsabilidades legales e incluidas en acuerdos de confidencialidad. - Establecer periodos de vigencia para después de la desvinculación o termino de relación laboral.", Baseline=5, AprobacionJefeRiesgo='T', ControlClave='T')
        #----------------------
        #A.8  Asset management
        #----------------------
        db.CatalogoControl.update_or_insert((db.CatalogoControl.id==7), id=7, Nombre="A.8.1 Responsabilidad sobre los activos (A.8 Gestión de Activos)", Descripcion="Identificar los activos de la organización y definir responsabilidades apropiadas de protección (To identify organizational assets and define appropriate protection responsibilities).", GuiaImplementacion="A.8.1.1 Inventario de activos: Se deben identificar los activos asociados a la información y las instalaciones donde se procesa, almacena o transmite dicha información, y se debe elaborar y mantener un inventario de dichos activos (A.8.1.1 Inventory of assets: Assets associated with information and information processing facilities shall be identified and an inventory of these assets shall be drawn up and maintained). A.8.1.2 Propiedad de los activos: Se debe definir un responsable por los activos identificados (A.8.1.2 Ownership of assets: Assets maintained in the inventory shall be owned). A.8.1.3 Uso aceptable de los activos: Se deben definir reglas para el uso aceptable de la información, activos asociados y de los contenedores que procesan, almacenan o transmiten información, dichas reglas se debe identificar, documentar e implementar (A.8.1.3 Acceptable use of assets: Rules for the acceptable use of information and of assets associated with information and information processing facilities shall be identified, documented and implemented). A.8.1.4 Devolución de activos: Todos los empleados y usuarios externos deben devolver los activos de la organización en su poder al finalizar su relación laboral (A.8.1.4 Return of assets: All employees and external party users shall return all of the organizational assets in their possession upon termination of their employment, contract or agreement).", GuiaAuditoria="- Realizar una evaluación de riesgos para cada activo de información, y diseñar los controles de mitigación adecuados. - Identificar los activos de información que dan soporte al negocio. - Clasificar los activos de información, de acuerdo a su tipo y tipo de dato, así como su importancia a la organización. - Asignar a un responsable o dueño de los activos de información. - Para identificar al dueño del activo podemos basarnos en quien lo crea, gestiona, crea, almacena o destruye. - Asegurar que los activos son invetariados, clasificados y protegidos adecuadamente. - Verificar periódicamente la restricción de acceso a los activos de acuerdo a su clasificación y políticas vigentes. - Asgurar el manejo adecuado de los activos, su correcta destrucción cuando no son requeridos. - Identificar los requerimientos de seguridad de los activos. - Documentar el adecuado manejo de los activos de información. - Formalizar el proceso de finalización, incluyendo al menos una clausula de devolución de los activos físicos y/o electrónicos.", Baseline=5, AprobacionJefeRiesgo='T', ControlClave='T')

        db.CatalogoControl.update_or_insert((db.CatalogoControl.id==8), id=8, Nombre="A.8.2 Clasificación de la Información (A.8 Gestión de Activos)", Descripcion="Se debe asegurar que la información recibe un adecuado nivel de protección de acuerdo a su importancia con la organización (To ensure that information receives an appropriate level of protection in accordance with its importance to the organization).", GuiaImplementacion="A.8.2.1 Clasificación de la Información: La información se debe clasificar considerando requerimientos legales, de valor, criticidad y sensibilidad en caso de modificación, acceso o exposición no autorizada (A.8.2.1 Classification of information: Information shall be classified in terms of legal requirements, value, criticality and sensitivity to unauthorised disclosure or modification) A.8.2.2 Etiquetado de la Información: Se deben establecer procedimientos apropiados para etiquetar la información de acuerdo con el esquema de clasificación de la información implementado por la organización (A.8.2.2 Labelling of information: An appropriate set of procedures for information labelling shall be developed and implemented in accordance with the information classification scheme adopted by the organization). A.8.2.3 Manipulación de Activos: Se deben desarrollar e implementar procedimientos de manipulación de activos de acuerdo con el sistema de clasificación de la información adoptado por la organización (A.8.2.3 Handling of assets: Procedures for handling assets shall be developed and implemented in accordance with the information classification scheme adopted by the organization).", GuiaAuditoria="- Se pueden considerar los siguientes factores para clasificar la información (su valor para la organización, requisitos legales, regulatorios o contractuales, el impacto que puede ocascionar en caso de que la información sea expuesta a personas no autorizadas) - La clasificación de la información la debe definir el propietario del activo. - La clasificación se debe revisar periódicamente. - Se pueden utilizar niveles de acuerdo al impacto que puede ocascionar la información (interna, publica, privada, confidencial). - El etiquetado de datos puede realizarse de forma física o por medio de los metadatos. - Se debe establecer procedimiento para manejo, procesamiento, almacenamiento, comunicación de activos de información. - En los procedimientos definidos se debe considerar lo siguiente: restricciones de acceso de acuerdo a nivel de clasificación de información, crear y mantener registro de uso y autorizaciones de uso de los activos, procedimientos de copias de seguridad y almacenamiento. - En casos de intercambio de información, la clasificación definida tal vez no coicida, por lo que debemos incluir información sobre la clasificación utilizada en la transeferencia de información.", Baseline=5, AprobacionJefeRiesgo='T', ControlClave='T')

        db.CatalogoControl.update_or_insert((db.CatalogoControl.id==9), id=9, Nombre="A.8.3 Manejo de Medios de Almacenamiento (A.8 Gestión de Activos)", Descripcion="Prevenir exposición, eliminación, modificación o destrucción no autorizada de información en medios de almacenamiento (To prevent unauthorized disclosure, modification, removal or destruction of information stored on media).", GuiaImplementacion="A.8.3.1 Gestión de soportes de medios de almacenamiento externos: Se deben implementar procesos para la gestión de medios de almacenamiento extraibles de acuerdo con el esquema de clasificación de la información adoptado por la organización (A.8.3.1 Management of removable media: Procedures shall be implemented for the management of removable media in accordance with the classification scheme adopted by the organization). A.8.3.2 Eliminación de medios de almacenamiento: Los medios de almacenamiento se deben eliminar de manera segura cuando ya no son requeridos, usando procedimientos formales (A.8.3.2 Disposal of media: Media shall be disposed of securely when no longer required, using formal procedures). A.8.3.3 Trasporte fisico de medios de almacenamiento: Los medios de almacenamiento que contienen información deben ser protegidos contra acceso no autorizado, mal uso o daño miestras se transportan (A.8.3.3 Physical media transfer: Media containing information shall be protected against unauthorized access, misuse or corruption during transportation).", GuiaAuditoria="- Se debe considerar lo siguiente para medios extraibles: necesidad de uso, cuando sea necesario solicitar autorización para su uso, mantener registros de alta y baja, cifrar datos sensibles, renovar dispositivos si es necesario, realizar copias de seguridad, mantener un inventario de dispositivos extraibles, controlar la transferencia hacia medios extraibles. - Establecer procedimientos de eliminación segura. - Mantener un invetario o registros de los dispositivos que han sido discontinuados y que han sido borrados de manera segura. - Cuando el dispositivo es transladado se debe considerar los siguiente: registro de los dispositivos que salen, el lugar de destino, control de los transportistas, establecer metodos de cifrado, controles fisicos y ambientales.", Baseline=5, AprobacionJefeRiesgo='T', ControlClave='T')
        #--------------------
        #A.9 Access control
        #--------------------
        db.CatalogoControl.update_or_insert((db.CatalogoControl.id==10), id=10, Nombre="A.9.1 Requerimientos de negocio para control de accesos (A.9 Control de Accesos)", Descripcion="Limitar acceso a la información y a los contenedores que la procesan, almacenan o transmiten (To limit access to information and information processing facilities).", GuiaImplementacion="A.9.1.1 Política de Control de Accesos: Se debe establecer, documentar y revisar una política de control de accesos, basada en los requerimientos de información y de negocio (A.9.1.1 Access control policy: An access control policy shall be established, documented and reviewed based on business and information security requirements). A.9.1.2 Control de acceso a las redes y servicios asociados:  Los usuarios solo deben tener acceso a la red y a los servicios de red que hayan sido especificamente autorizados a utilizar (A.9.1.2 Access to networks and network services: Users shall only be provided with access to the network and network services that they have been specifically authorized to use).", GuiaAuditoria="- Establecer, documentar y revisar la política de control de acceso periódicamente. - Los propietarios y los dueños de los activos son los que deben determinar las normas de control de acceso. - Se deben considerar los privilegios mínimos necesarios para realizar sus funciones para definir los accesos requeridos y solo por el tiempo necesario para realizar sus tareas. - Se deben considerar accesos lógico y físicos. - El objetivo de la política de control de acceso debería ser que todo está prohibido a menos que expresamente se indique lo contrario. - La asignación de roles debe estar basada en los requerimientos de negocio. - La gestión de derechos de acceso de la organización debe considerar al menos: alta, modificación, baja de usuarios. - Considerar manejo de usuarios privilegiados.", Baseline=5, AprobacionJefeRiesgo='T', ControlClave='T')

        db.CatalogoControl.update_or_insert((db.CatalogoControl.id==11), id=11, Nombre="A.9.2 Gestión de Cuentas de Usuario (A.9 Control de Accesos)", Descripcion="Se debe asegurar acceso solo a usuarios autorizados a sistemas y servicios (To ensure authorized user access and to prevent unauthorized access to systems and services).", GuiaImplementacion="A.9.2.1 Gestión de altas y bajas de usuarios: Se debe implementar un proceso formal para alta y baja de usuarios para permitir la asignación de derechos de acceso (A.9.2.1 User registration and de-registration: A formal user registration and de-registration process shall be implemented to enable assignment of access rights). A.9.2.2 Gestión de derechos de acceso: Se debe implementar un proceso formal de asignación y revocación de privilegios para todos los tipos de usuarios para todos los sistemas y servicios (A.9.2.2 User access provisioning: A formal user access provisioning process shall be implemented to assign or revoke access rights for all user types to all systems and services.). A.9.2.3 Gestión de accesos privilegiados: La asignación y uso de accesos privilegiados debe ser restringido y controlado (A.9.2.3 Management of privileged access rights: The allocation and use of privileged access rights shall be restricted and controlled). A.9.2.4 Gestión de información confidencial de autenticación de usuarios: La asignación de información de autenticación secreta se debe controlar por medio de un proceso formal. (A.9.2.4 Management of secret authentication information of users: The allocation of secret authentication information shall be controlled through a formal management process). A.9.2.5 Revisión de derechos de acceso de usuarios: Los dueños de los activos deben revisar periódicamente los usuarios y privilegios (A.9.2.5 Review of user access rights: Asset owners shall review users access rights at regular intervals). A.9.2.6 Eliminación y cambios en los privilegios o derechos de acceso: Los privilegios o derechos de acceso de todos los empleados y terceros deben ser eliminados una vez que termine su relación laboral con la organización o ajustados cuando ocurra algún cambio (A.9.2.6 Removal or adjustment of access rights: The access rights of all employees and external party users to information and information processing facilities shall be removed upon termination of their employment, contract or agreement, or adjusted upon change).", GuiaAuditoria="- Este punto esta enfocado a gestionar los accesos a la red. - Determinar que información se puede acceder, procedimientos de autorización, protección de las redes, conexiones de red permitidas, requisitos de autenticación y monitoreo. - Considerar los tipos de autenticación y el doble factor de autenticación. - Considerar al menos los siguientes factores: red y servicios a los que se accede, procedimientos de autorización, medios por los cuales se accede (VPN, wifi, etc), requisitos de autenticación, monitoreo de uso. - Identificar de manera única a cada usuario. - Desactivar las cuentas de usuario de personal que ya no labora en la organización. - Control de accesos, revisión perdiodica de usuarios. - El dueño del sistema debe aprobar las solicitudes de acceso. - Realizar revisiones periodicas sobre cuentas privilegiadas. - Identificar y asignar responsabilidades sobre las cuentas de usuario. - Restringir y monitorear el uso de cuentas privilegiadas. - Establecer mecanismos para el cambio de contraseña. - Resguardar y proteger las contraseñas e información de autenticación. - Cambiar la contraseña después de su primer uso. - Establecer medios seguros de comunicación.", Baseline=5, AprobacionJefeRiesgo='T', ControlClave='T')

        db.CatalogoControl.update_or_insert((db.CatalogoControl.id==12), id=12, Nombre="A.9.3 Responsabilidades del usuario (A.9 Control de Accesos)", Descripcion="Los usuarios deben ser responsables de proteger sus datos de autenticación (To make users accountable for safeguarding their authentication information).", GuiaImplementacion="A.9.3.1 Uso de información secreta de autenticación: Los usuarios deben seguir las políticas y procesos definidos por la organización respecto al uso de información secreta de autenticación (A.9.3.1 Use of secret authentication information: Users shall be required to follow the organizations practices in the use of secret authentication information).", GuiaAuditoria="- Asegurar que las contraseñas no se divulgen o sea expuestas a personal no autorizado. - Establecer políticas de password robusto. - Proceso para cambio de contraseñas.", Baseline=5, AprobacionJefeRiesgo='T', ControlClave='T')

        db.CatalogoControl.update_or_insert((db.CatalogoControl.id==13), id=13, Nombre="A.9.4 Control de Accesos a Sistemas y Aplicaciones (A.9 Control de Accesos)", Descripcion="Evitar accesos no autorizado a sistemas y aplicaciones (To prevent unauthorized access to systems and applications).", GuiaImplementacion="A.9.4.1 Restricción de acceso a la información: El acceso a la información y a los recursos y funcionalidades del sistema se debe restringir de acuerdo a la política de control de acceso (A.9.4.1 Information access restriction: Access to information and application system functions shall be restricted in accordance with the access control policy). A.9.4.2 Procedimiento seguro de incio de sesión: Cuando sea requerido por la política de control de accesos, el acceso a sistemas y aplicaciones debe ser controlado por procedimientos de inicio de sesión seguro (A.9.4.2 Secure log-on proce-dures: Where required by the access control policy, access to systems and applications shall be controlled by a secure log-on procedure.). A.9.4.3 Sistema de gestión de contraseñas: El sistema de gestión de contraseñas debe ser interactivo y asegurar el uso de contraseñas robustas (A.9.4.3 Password management system: Password management systems shall be interactive and shall ensure quality passwords.). A.9.4.4 Uso de herramientas de administración: El uso de herramientas de administración que pueden modificar configuraciones y anular los controles del sistema se debe restringir y controlar (A.9.4.4 Use of privileged utility programs: The use of utility programs that might be capable of overriding system and application controls shall be restricted and tightly controlled). A.9.4.5 Control de acceso al código fuente: Se debe restringir el acceso al código fuente del sistema (A.9.4.5 Access control to program source code: Access to program source code shall be restricted).", GuiaAuditoria="- Procesos seguros de autenticación. - Monitorear accesos exitosos y fallidos. - Manejo seguro de sesiones. - Restringir funcionalidades de administración. - Uso de password seguro.", Baseline=5, AprobacionJefeRiesgo='T', ControlClave='T')
        #-------------------
        #A.10 Cryptography
        #-------------------
        db.CatalogoControl.update_or_insert((db.CatalogoControl.id==14), id=14, Nombre="A.10.1 Contrroles de criptografía (A.10  Criptografía)", Descripcion="Asegurar un apropiado y efectivo uso de criptografia para proteger la confidencialidad, autenticidad, y/o integridad de la información (To ensure proper and effective use of cryptography to protect the confidentiality, authenticity and/or integrity of information).", GuiaImplementacion="A.10.1.1 Política de uso de controles criptograficos: Se debe desarrollar e implementar una política para el uso de controles de criptografia para protección de información (A.10.1.1 Policy on the use of cryptographic controls: A policy on the use of cryptographic controls for protection of information shall be developed and implemented.). A.10.1.2 Manejo de llaves: Se debe desarrollar e implementar una política sobre el uso, protección y duración de las llaves criptograficas que considere todo su ciclo de vida (A.10.1.2 Key management: A policy on the use, protection and lifetime of cryptographic keys shall be developed and implemented through their whole lifecycle).", GuiaAuditoria="- El tipo de cifrado seleccionado debe definirse en base a la clasificación y evaluación del riesgo, también se debe considerar el tipo de información, amenazas, probabilidad e impacto. - Se debe mantener una gestión de las llaves de cifrado, definiendo políticas que consideren todo el ciclo de vida de las llaves (generación, uso y protección, distribución, renovación o destrucción). - Cuando las claves son creadas o gestionadas por un proveedor externo, de debe incluir en los acuerdos de servicio las responsabilidades de seguridad.", Baseline=5, AprobacionJefeRiesgo='T', ControlClave='T')
        #------------------------------------------
        #A.11  Physical and environmental security
        #------------------------------------------
        db.CatalogoControl.update_or_insert((db.CatalogoControl.id==15), id=15, Nombre="A.11.1 Areas seguras (A.11 Seguridad física y ambiental)", Descripcion="Pra prevenir acceso físico no autorizado, así como daño e interfencia en las instalaciones donde se procesa, almacena o transmite información (To prevent unauthorized physical access, damage and interference to the organization’s information and information processing facilities).", GuiaImplementacion="A.11.1.1 Perímetro de seguridad física: Se deben definir y usar perimetros de seguridad para proteger las áreas y contenedores que contienen o procesan información sensible o crítica (A.11.1.1 Physical security perimeter: Security perimeters shall be defined and used to protect areas that contain either sensitive or critical information and information processing facilities). A.11.1.2 Controles de acceso físico: Las áreas seguras deben estar protegidas por controles de entrada apropiados para asegurar que solo el personal autorizado tenga acceso (A.11.1.2 Physical entry controls: Secure areas shall be protected by appropriate entry controls to ensure that only authorized personnel are allowed access). A.11.1.3 Seguridad de oficinas, despachos e instalaciones: Se debe diseñar y aplicar seguridad fisica en todas las instalaciones de la organización (A.11.1.3 Securing offices, rooms and facilities: Physical security for offices, rooms and facilities shall be designed and applied). A.11.1.4 Protección contra amenazas externas y del ambiente: Se debe diseñar y aplicar protección fisica contra desastres naturales, ataques maliciosos o accidentes (A.11.1.4 Protecting against external and environmental threats: Physical protection against natural disasters, malicious attack or accidents shall be designed and applied). A.11.1.5 Trabajo en las áreas seguras: Se debe diseñar y aplicar procedimientos para trabajar en zonas seguras (A.11.1.5 Working in secure areas: Procedures for working in secure areas shall be designed and applied). A.11.1.6 Areas de entrega y de carga: Los puntos de acceso, tales como zonas de entrega y de carga, y otros puntos en los que personas no autorizadas puedan acceder a las instalaciones, deben estar controlados, y si es posible aisladas de las instalaciones de procesamiento de datos para evitar acceso no autorizado (A.11.1.6 Delivery and loading areas: Access points such as delivery and loading areas and other points where unauthorized persons could enter the premises shall be controlled and, if possible, isolated from information processing facilities to avoid unauthorized access).", GuiaAuditoria="- Se pueden considerar los siguientes perimetros: muros, vallas, alarmas, suelos, protección de ventanas, cerraduras, etc. - Las áreas restringidas a personal autorizado deben contar con una área de recepción atendida o medios de control adecuados para limitar el acceso físico. - Los sistemas contra incendios deben cumplir con la legislación vigente. - Considerar sistemas de detección de intrusos. - Separar las áreas de proceso de información que son gestionadas por personal externo, de las propias de la organización. - Asegurar los espacios físicos siguen el mismo enfoque que se utiliza para proteger información digital (defirnir el contexto, evaluar riesgos, diseñar e implementar controles. - Los elementos que se deben considerar en un contexto físico son los siguientes: el perimetro y las fronteras, vias de acceso normales y de emergencia, los alrededores, medidas de seguridad. - Niveles sucesivos de protección para que los activos mas sensibles queden dentro de las áreas seguras. - Política de uso de las instalaciones. - Separación de lugares (lugares públicos y lugares privilegiados). - Las puertas y ventanas deben tener la misma fuerza que el perimetro. - Los espacios alrededor del recinto deben estar monitoreados (camaras o patrullas)", Baseline=5, AprobacionJefeRiesgo='T', ControlClave='T')

        db.CatalogoControl.update_or_insert((db.CatalogoControl.id==16), id=16, Nombre="A.11.2 Seguridad de los Equipos (A.11 Seguridad física y ambiental)", Descripcion="Para prevenir perdida, daño, robo o compromiso de activos e interrupción de las operaciones (To prevent loss, damage, theft or compromise of assets and interruption to the organization’s operations).", GuiaImplementacion="A.11.2.1 Ubicación y protección de equipos: Los equipos deben estar protegidos adecuadamente para reducir los riesgos de amenazas y peligros ambientales, así como las oportunidades de acceso no autorizado (A.11.2.1 Equipment siting and protection: Equipment shall be sited and protected to reduce the risks from environmental threats and hazards, and opportunities for unauthorized access). A.11.2.2 Instalaciones de suministro: Los equipos deben estar protegidos contra fallas y disrupciones de alimentación de energia (A.11.2.2 Supporting utilities: Equipment shall be protected from power failures and other disruptions caused by failures in supporting utilities). A.11.2.3 Seguridad del cableado: El cableado de energia y datos debe estar protegido adecuadamente contra interrupciones, interferencias y daños (A.11.2.3 Cabling security: Power and telecommunications cabling carrying data or supporting information services shall be protected from interception, interference or damage). A.11.2.4 Mantenimiento de equipos: Se les debe proporcionar mantenimiento adecuado a los equipos para asegurar su disponibilidad e integridad (A.11.2.4 Equipment maintenance: Equipment shall be correctly maintained to ensure its continued availability and integrity). A.11.2.5 Salida de equipos: Los equipos, información y software no se debe sacar fuera de sitio sin autorización previa (A.11.2.5 Removal of assets: Equipment, information or software shall not be taken off-site without prior authorization). A.11.2.6 Seguridad de los equipos y activos fuera de las instalaciones: Los controles de seguridad se deben aplicar a los equipos fuera de sitio tomando en cuenta los riesgos de trabajar fuera de las instalaciones de la organización (A.11.2.6 Security of equipment and assets off-premises: Security shall be applied to off-site assets taking into account the different risks of working outside the organization’s premises). A.11.2.7 Reutilización o eliminación segura de equipos: Todos los equipos que contienen algún medio de almacenamiento se deben verificar para asegurar que se eliminan adecuadamente los datos sensibles, así como software con licencia antes de su eliminación o reuso (A.11.2.7 Secure disposal or re-use of equipment: All items of equipment containing storage media shall be verified to ensure that any sensitive data and licensed software has been removed or securely overwritten prior to disposal or re-use). A.11.2.8 Equipos de usuario desatendidos: Los usuarios se deben asegurar que el equipo desatendido tenga protección adecuada (A.11.2.8 Unattended user equipment: Users shall ensure that unattended equipment has appropriate protection). A.11.2.9 Política de escritorio y bloqueo de pantalla: Se debe implementar una política de escritorio limpio y bloqueo de pantalla (A.11.2.9 Clear desk and clear screen policy: A clear desk policy for papers and removable storage media and a clear screen policy for information processing facilities shall be adopted).", GuiaAuditoria="- Implementar controles ambientales. - Implementar medidas de protección contra daños electricos. - Cumplir con las especificaciones del fabricante en cuanto a condiciones de humedad, temperatura, protección contra polvo o materiales que puedan dañar los equipos. - Medidas de protección contra radiaciones. - Restringir el acceso a los equipos. - Cumplir con especificaciones del fabricante en cuanto a suministros (electrica, gas, etc.) - Establecer procesos de detección de fallas de suministro. - Mantener alternativas a fallos de suministro (sistemas de alimentación ininterrumpida, rutas alternativas de comunicaciones, etc) - Se deben analizar diferentes opciones como: teletrabajo, soportes Cloud o convenios con empresas mas grandes o con mayor infraestructura. - Separar cables de potencia/fuerza de los cables de comunicaciones. - Proteger cables contra daño o interferencia. - Prevenir la conexión de dispositivos no autorizados. - Restringir acceso a paneles de conexión. - Cableado estructurado, acomodado, peinado. - Identificación y autorización de personal autorizado para retirar equipos o activos fuera de la organización. - Llevar registro de los equipos retirados y de su retorno. - Mantener registro de los activos que abandonan la organización y considerar análisis de riesgos para las instalaciones donde serán utilizados. - Asegurar que se elimina adecuadamente la información de los equipos que serán discontinuados.", Baseline=5, AprobacionJefeRiesgo='T', ControlClave='T')

        db.CatalogoControl.update_or_insert((db.CatalogoControl.id==17), id=17, Nombre="A.12.1 Responsabilidades y procedimientos de Operación (A.12 Seguridad de las Operaciones)", Descripcion="Para garantizar el funcionamiento correcto y seguro de las instalaciones de procesamiento de información (To ensure correct and secure operations of information processing facilities).", GuiaImplementacion="A.12.1.1 Documentación de procedimientos operativos: Los procedimientos operativos se deben documentar y pones a disposición de todos los usuarios que lo necesiten (A.12.1.1 Documented operating procedures: Operating procedures shall be documented and made available to all users who need them). A.12.1.2 Gestión de Cambios: Se deben controlar los cambios en la organización, procesos de negocio, instalaciones donde se procesa, almacena o transmite la información y de los sistemas que afectan la seguridad de la información (A.12.1.2 Change management: Changes to the organization, business processes, information processing facilities and systems that affect information security shall be controlled). A.12.1.3 Gestión de las capacidades: Se debe monitorear el uso de recursos del sistema para asegurar su correcto desempeño y disponibilidad (A.12.1.3 Capacity management: The use of resources shall be monitored, tuned and projections made of future capacity requirements to ensure the required system performance). A.12.1.4 Separación de ambientes de desarrollo, pruebas, y producción: Los ambientes de desarrollo, pruebas y producción deben estar separados para reducir el riesgo de acceso no autorizado o cambios en el entorno operacional (A.12.1.4 Separation of development, testing and operational environments: Development, testing, and operational environments shall be separated to reduce the risks of unauthorized access or changes to the operational environment).", GuiaAuditoria="", Baseline=5, AprobacionJefeRiesgo='T', ControlClave='T')

        db.CatalogoControl.update_or_insert((db.CatalogoControl.id==18), id=18, Nombre="A.12.2 Protección de malware (A.12 Seguridad de las Operaciones)", Descripcion="", GuiaImplementacion="A.12.2.1 Controles contra malware: Se deben implementar controles de detección, prevención y recuperación contra malware, combinado con programas o campañas de concientización (A.12.2.1 Controls against malware: Detection, prevention and recovery controls to protect against malware shall be implemented, combined with appropriate user awareness).", GuiaAuditoria="", Baseline=5, AprobacionJefeRiesgo='T', ControlClave='T')

        db.CatalogoControl.update_or_insert((db.CatalogoControl.id==19), id=19, Nombre="A.12.3 Respaldos (A.12 Seguridad de las Operaciones)", Descripcion="Protección contra perdida o daño a la información (To protect against loss of data).", GuiaImplementacion="A.12.3.1 Respaldos de Información: Se deben generar y probar periódicamente respaldos de información, software e imagenes de sistemas, de acuerdo a la política de respaldos vigente  (A12.3.1 Information backup: Backup copies of information, software and system images shall be taken and tested regularly in accordance with an agreed backup policy).", GuiaAuditoria="", Baseline=5, AprobacionJefeRiesgo='T', ControlClave='T')

        db.CatalogoControl.update_or_insert((db.CatalogoControl.id==20), id=20, Nombre="A.12.4 Generación de Logs y Monitoreo (A.12 Seguridad de las Operaciones)", Descripcion="Registrar eventos y generar evidencias (To record events and generate evidence).", GuiaImplementacion="A.12.4.1 Logeo de Eventos: Se deben registrar al menos actividad de usuarios, excepciones, fallas y eventos de seguridad, dichos registros se deben mantener y revisar periódicamente (A.12.4.1 Event logging: Event logs recording user activities, exceptions, faults and information security events shall be produced, kept and regularly reviewed). A.12.4.2 Protección de los logs: Los logs se deben proteger contra daño, modificación y acceso no autorizado (A.12.4.2 Protection of log information: Logging facilities and log information shall be protected against tampering and unauthorized access). A.12.4.3 Registro de actividades del administrador y operador del sistema: Se deben registrar las actividades realizadas por el administrador y operador del sistema, dichos logs se deben proteger y ser revisados periódicamente  (A.12.4.3 Administrator and operator logs: System administrator and system operator activities shall be logged and the logs protected and regularly reviewed). A.12.4.4 Sincronización de relojes: Los relojes de todos los sistemas de procesamiento de información relevantes dentro de una organización o dominio de seguridad se sincronizarán con una única fuente de tiempo de referencia (A.12.4.4 Clock synchronisation: The clocks of all relevant information processing systems within an organization or security domain shall be synchronised to a single reference time source).", GuiaAuditoria="", Baseline=5, AprobacionJefeRiesgo='T', ControlClave='T')

        db.CatalogoControl.update_or_insert((db.CatalogoControl.id==21), id=21, Nombre="A.12.5 Control de Software Operacional (A.12 Seguridad de las Operaciones)", Descripcion="Para asegurar la integridad del software operacional (To ensure the integrity of operational systems).", GuiaImplementacion="A.12.5.1 Instalación de software en sistemas en producción: Se debe implementar controles para controlar la instalación de software en sistemas en producción (A.12.5.1 Installation of software on operational systems: Procedures shall be implemented to control the installation of software on operational systems).", GuiaAuditoria="", Baseline=5, AprobacionJefeRiesgo='T', ControlClave='T')

        db.CatalogoControl.update_or_insert((db.CatalogoControl.id==22), id=22, Nombre="A.12.6 Gestión de vulnerabilidades técnicas (A.12 Seguridad de las Operaciones)", Descripcion="Prevenir la explotación de vulnerabilidades técnicas (To prevent exploitation of technical vulnerabilities).", GuiaImplementacion="A.12.6.1 Gestión de vulnerabilidades técnicas: Se debe obtener información sobre las vulnerabilidades técnicas de los sistemas utilizados, se debe evaluar la expocisión de la organización a dichas vulnerabilidades y tomar medidas adecuadas para mitigar los riesgos (A.12.6.1 Management of technical vulnerabilities: Information about technical vulnerabilities of information systems being used shall be obtained in a timely fashion, the organization’s exposure to such vulnerabilities evaluated and appropriate measures taken to address the associated risk). A.12.6.2 Restricción en la instalación de software: Se deben establecer e implementar políticas para controlar la instalación de software (A.12.6.2 Restrictions on software installation: Rules governing the installation of software by users shall be established and implemented).", GuiaAuditoria="", Baseline=5, AprobacionJefeRiesgo='T', ControlClave='T')

        db.CatalogoControl.update_or_insert((db.CatalogoControl.id==23), id=23, Nombre="A.12.7 Consideraciones de auditoría de sistemas de información (A.12 Seguridad de las Operaciones)", Descripcion="Mitigar el impacto de las actividades de auditoría en sistemas en producción (To minimise the impact of audit activities on operational systems).", GuiaImplementacion="A.12.7.1 Controles de auditoría en sistemas de información: Los requisitos de auditoría y las actividades que impliquen la verificación de los sistemas se deben planear y acordar cuidadosamente para minimizar las interrupciones en los procesos de negocio (A.12.7.1 Information systems audit controls: Audit requirements and activities involving verification of operational systems shall be carefully planned and agreed to minimise disruptions to business processes).", GuiaAuditoria="", Baseline=5, AprobacionJefeRiesgo='T', ControlClave='T')

        db.CatalogoControl.update_or_insert((db.CatalogoControl.id==24), id=24, Nombre="A.13.1 Gestión de Seguridad en Redes (A.13 Seguridad en las Comunicaciones)", Descripcion="Para asegurdad la protección de la información en redes y en las instalaciones donde se procesa, almacena y transmite información (To ensure the protection of information in networks and its supporting information processing facilities).", GuiaImplementacion="A.13.1.1 Controles de red: Las redes deben ser gestionadas y controladas para proteger la información en sistemas y aplicaciones (A.13.1.1 Network controls: Networks shall be managed and controlled to protect information in systems and applications). A.13.1.2 Seguridad en servicios de red: Se deben identificar mecanismos de seguridad, niveles de servicio y requisitos de gestión de todos los servicios de red, e incluirlos en los acuerdos de niveles de servicio, ya sea que dichos servicios sean ejecutados internamente o por proveedores externos (A.13.1.2 Security of network services: Security mechanisms, service levels and management requirements of all network services shall be identified and included in network services agreements, whether these services are provided in-house or outsourced). A.13.1.3 Segregación de redes: Los grupos de información de servicios, usuarios e información se debe segregar a nivel de red (A.13.1.3 Segregation in networks: Groups of information services, users and information systems shall be segregated on networks.).", GuiaAuditoria="", Baseline=5, AprobacionJefeRiesgo='T', ControlClave='T')

        db.CatalogoControl.update_or_insert((db.CatalogoControl.id==25), id=25, Nombre="A.13.2 Transferencia de Información (A.13 Seguridad en las Comunicaciones)", Descripcion="Mantener la seguridad de la información que es transferida o compartida dentro de la organización o con terceros (To maintain the security of information transferred within an organization and with any external entity).", GuiaImplementacion="A.13.2.1 Políticas y procedimientos para transferencia de información: Se deben establecer políticas, procedimientos y controles para proteger la información cuando es compartida o transmitida a través del uso de cualquier tipo o medio de comunicación (A.13.2.1 Information transfer policies and procedures: Formal transfer policies, procedures and controls shall be in place to protect the transfer of information through the use of all types of communication facilities). A.13.2.2 Acuerdos de intercambio de información: Los acuerdos contractuales deben establecer los requerimientos de seguridad para transferir información de manera segura entre la organización y terceros  (A.13.2.2 Agreements on information transfer: Agreements shall address the secure transfer of business information between the organization and external parties). A.13.2.3 Mensajería electronica: La información involucrada en la mensajería electrónica deberá protegerse adecuadamente (A.13.2.3 Electronic messaging: Information involved in electronic messaging shall be appropriately protected). A.13.2.4 Acuerdos de confidencialidad: Se deben establecer acuerdos de confidencialidad que reflejen las necesidades de la organización para la protección de la información, dichos acuerdos se deben documentar y revisar periódicamente (A.13.2.4 Confidentiality or non-disclosure agreements: Requirements for confidentiality or non-disclosure agreements reflecting the organization’s needs for the protection of information shall be identified, regularly reviewed and documented).", GuiaAuditoria="", Baseline=5, AprobacionJefeRiesgo='T', ControlClave='T')

        db.CatalogoControl.update_or_insert((db.CatalogoControl.id==26), id=26, Nombre="A.14.1 Requerimientos de seguridad de sistemas de información (A.14 Adquisición, desarrollo y mantenimiento de sistemas)", Descripcion="Aseguridad que la seguridad de la información es un parte integrar del ciclo de vida de los sistemas, esto también incluye los requerimientos para sistemas de información que proveen servicios en redes públicas (To ensure that information security is an integral part of information systems across the entire lifecycle. This also includes the requirements for information systems which provide services over public networks).", GuiaImplementacion="A.14.1.1 Análisis y especificación de requerimientos de seguridad: Se deben establecer requerimientos de seguridad para nuevos sistemas de información o para la implementación de mejoras en los sistemas existentes (A.14.1.1 Information security requirements analysis and specification: The information security related requirements shall be included in the requirements for new information systems or enhancements to existing information systems). A.14.1.2 Seguridad en aplicaciones y servicios en redes públicas: Se debe proteger la información que es expuesta en redes publicas para protegerla contra fraudes, conflictos contractuales, divulgación y modificación no autorizada. (A.14.1.2 Securing application services on public networks:Information involved in application services passing over public networks shall be protected from fraudulent activity, contract dispute and unauthorized disclosure and modification). A.14.1.3 Seguridad de transacciones: La información involucrada en transacciones se debe proteger para evitar la transmisión incompleta, enrutamiento erroneo, alteración, divulgación o copia no autorizada. (A.14.1.3 Protecting application services transactions: Information involved in application service transactions shall be protected to prevent incomplete transmission, misrouting, unauthorized message alteration, unauthorized disclosure, unauthorized message duplication or replay).", GuiaAuditoria="", Baseline=5, AprobacionJefeRiesgo='T', ControlClave='T')

        db.CatalogoControl.update_or_insert((db.CatalogoControl.id==27), id=27, Nombre="A.14.2 Seguridad en los procesos de desarrollo y soporte (A.14 Adquisición, desarrollo y mantenimiento de sistemas)", Descripcion="Asegurar que la seguridad de la información es diseñada e implementada dentro del ciclo de vida del desarrollo de sistemas de información (To ensure that information security is designed and implemented within the development lifecycle of information systems).", GuiaImplementacion="A.14.2.1 Política de desarrollo seguro: Se debe establecer una política de desarrollo seguro de software y sistemas (A.14.2.1 Secure development policy: Rules for the development of software and systems shall be established and applied to developments within the organization). A.14.2.2 Procedimientos de control de cambios en sistemas: Cambios en los sistemas dentro del ciclo de vida del desarrollo deben ser controlados con procedimientos formales de control de cambios (A.14.2.2 System change control procedures: Changes to systems within the development lifecycle shall be controlled by the use of formal change control procedures). A.14.2.3 Revisión técnica de aplicaciones tras efectuar cambios en la plataforma o sistema operativo: Cuando se cambian las plataformas operativas, las aplicaciones críticas para el negocio deben ser revisadas y probadas para asegurar que no haya impacto adverso en las operaciones de la organización ni en la seguridad (A.14.2.3 Technical review of applications after operating platform changes: When operating platforms are changed, business critical applications shall be reviewed and tested to ensure there is no adverse impact on organizational operations or security). A.14.2.4 Restrincciones a los cambios en los paquetes de software: Las modificaciones a los paquetes de software se deben restringir, solo a los cambios necesarios y dichos cambios deben ser estrictamente controlados (A.14.2.4 Restrictions on changes to software packages: Modifications to software packages shall be discouraged, limited to necessary changes and all changes shall be strictly controlled). A.14.2.5 Principios de ingeniería de sistemas seguros: Se deben establecer, documentar, mantener y aplicar principios para la ingenieria de sistemas seguros y aplicarlos a cualquier esfuerzo de implementación de sistemas de información (A.14.2.5 Secure system engineering principles: Principles for engineering secure systems shall be established, documented, maintained and applied to any information system implementation efforts). A.14.2.6 Seguridad en ambientes de desarrollo: Las organizaciones deben establecer y proteger los ambientes de desarrollo y los procesos de integración de sistemas que cubren todo el ciclo de vida del desarrollo de software (A.14.2.6 Secure development environment: Organizations shall establish and appropriately protect secure development environments for system development and integration efforts that cover the entire system development lifecycle) A.14.2.7 Desarrollo subcontratado: La organización debe supervisar y monitorear las actividades de desarrollo de sistemas que están subcontratadas o desarrolladas por un tercero (A.14.2.7 Outsourced development: The organization shall supervise and monitor the activity of out-sourced system development). A.14.2.8 Pruebas de seguridad del sistema: Se deben ejecutar pruebas de seguridad durante el desarrollo del sistema (A.14.2.8 System security testing: Testing of security functionality shall be carried out during development). A.14.2.9 Pruebas de aceptación: Se deben establecer programas de prueba de aceptación y criterios relacionados para nuevos sistemas de información, actualizaciones y nuevas versiones (A.14.2.9 System acceptance testing: Acceptance testing programs and related criteria shall be established for new information systems, upgrades and new versions).", GuiaAuditoria="", Baseline=5, AprobacionJefeRiesgo='T', ControlClave='T')

        db.CatalogoControl.update_or_insert((db.CatalogoControl.id==28), id=28, Nombre="A.14.3 Datos de Prueba (A.14 Adquisición, desarrollo y mantenimiento de sistemas)", Descripcion="Asegurar la protección de los datos usados para pruebas (To ensure the protection of data used for testing).", GuiaImplementacion="A.14.3.1 Protección de datos de prueba: Los datos de prueba deben ser seleccionados, protegidos y controlados (A.14.3.1 Protection of test data: Test data shall be selected carefully, protected and controlled).", GuiaAuditoria="", Baseline=5, AprobacionJefeRiesgo='T', ControlClave='T')

        db.CatalogoControl.update_or_insert((db.CatalogoControl.id==29), id=29, Nombre="A.15.1 Seguridad de la Información en las relaciones con los proveedores (A.15 Relación con Proveedores)", Descripcion="Asegurar la protección de los activos de la organización que son accesados por proveedores (To ensure protection of the organization’s assets that is accessible by suppliers).", GuiaImplementacion="A.15.1.1 Seguridad de la Información en las relaciones con los proveedores: Los requisitos de seguridad de la información para mitigar los riesgos asociados con el acceso del proveedor a los activos de la organización se deben documentar y acordar con el proveedor (A.15.1.1 Information security policy for supplier relationships: Information security requirements for mitigating the risks associated with supplier’s access to the organization’s assets shall be agreed with the supplier and documented, A.15.1.2 Abordar seguridad en los acuerdos con los proveedores: todos los requisitos de seguridad de la información relevantes se deben establecer y acordar con cada proveedor que accede, procesa, almacena y transmite información, o proporciona componentes de infraestructura de TI para la información de la organización (A.15.1.2 Addressing security within supplier agreements: All relevant information security requirements shall be established and agreed with each supplier that may access, process, store, communicate, or provide IT infrastructure components for, the organization’s information), A.15.1.3 Cadena de suministro de tecnología de la información y las comunicaciones: los acuerdos con los proveedores deben incluir requisitos para abordar los riesgos de seguridad de la información asociados con los servicios de tecnología de la información, comunicaciones y la cadena de suministro del producto (A.15.1.3 Information and communication technology supply chain: Agreements with suppliers shall include requirements to address the information security risks associated with information and communications technology services and product supply chain).", GuiaAuditoria="", Baseline=5, AprobacionJefeRiesgo='T', ControlClave='T')

        db.CatalogoControl.update_or_insert((db.CatalogoControl.id==30), id=30, Nombre="A.15.2  Gestión de la entrega de servicios por terceros (A.15 Relación con Proveedores)", Descripcion="Mantener un nivel acordado de seguridad de la información y prestación de servicios alineado con los acuerdos con los proveedores. (To maintain an agreed level of information security and service delivery in line with supplier agreements).", GuiaImplementacion="A.15.2.1 Monitorear y revisar los servicios de terceros: La organización debe monitorear, revisar y auditar periódicamente la entrega de servicios de terceros (A.15.2.1 Monitoring and review of supplier services: Organizations shall regularly monitor, review and audit supplier service delivery) A.15.2.2 Gestión de cambios en los servicios de los proveedores: Los cambios en la provisión de servicios por parte de los proveedores, incluido el mantenimiento y la mejora de las políticas, procedimientos y controles de seguridad de la información existentes, se debe gestionar, teniendo en cuenta la importancia crítica de la información, los sistemas y los procesos comerciales involucrados y la reevaluación de los riesgos. (A.15.2.2 Managing changes to supplier services: Changes to the provision of services by suppliers, including maintaining and improving existing information security policies, procedures and controls, shall be managed, taking account of the criticality of business information, systems and processes involved and re-assessment of risks.)", GuiaAuditoria="", Baseline=5, AprobacionJefeRiesgo='T', ControlClave='T')

        db.CatalogoControl.update_or_insert((db.CatalogoControl.id==31), id=31, Nombre="A.16.1 Gestión de incidentes y mejoras de seguridad de la información (A.16 Gestión de Incidentes de Seguridad de la Información)", Descripcion="Asegurar un enfoque efectivo y consistente para la gestión de incidentes de seguridad de la información, incluida la comunicación sobre eventos de seguridad y debilidades (To ensure a consistent and effective approach to the management of information security incidents, including communication on security events and weaknesses).", GuiaImplementacion="A.16.1.1 Responsabilidades y procedimientos: Se deben establecer responsabilidades y procedimientos de gestión para garantizar una respuesta rápida, efectiva y ordenada a los incidentes de seguridad de la información (A.16.1.1 Responsibilities and procedures: Management responsibilities and procedures shall be established to ensure a quick, effective and orderly response to information security incidents) A.16.1.2 Informe de eventos de seguridad de la información: los eventos de seguridad de la información se deben notificar a través de los canales de gestión apropiados lo más rápido posible (A.16.1.2 Reporting information security events: Information security events shall be reported through appropriate management channels as quickly as possible) A.16.1.3 Informe de debilidades de seguridad de la información: los empleados y contratistas que utilizan los sistemas y servicios de información de la organización deberán reportar cualquier debilidad de seguridad de la información observada o identificada en los sistemas o servicios (A.16.1.3 Reporting information security weaknesses: Employees and contractors using the organization’s information systems and services shall be required to note and report any observed or suspected information security weaknesses in systems or services) A.16.1.4 Evaluación y decisión sobre eventos de seguridad de la información: se deben evaluar los eventos de seguridad de la información y decidir si se clasifican como incidentes de seguridad de la información (A.16.1.4 Assessment of and decision on information security events: Information security events shall be assessed and it shall be decided if they are to be classified as information security incidents) A.16.1.5 Respuesta a incidentes de seguridad de la información: los incidentes de seguridad de la información se deben atender de acuerdo con los procedimientos documentados (A.16.1.5 Response to information security incidents: Information security incidents shall be responded to in accordance with the documented procedures) A.16.1.6 Aprender de los incidentes de seguridad de la información: el conocimiento adquirido al analizar y resolver incidentes de seguridad de la información se debe utilizar para reducir la probabilidad y el impacto de futuros incidentes (A.16.1.6 Learning from information security incidents: Knowledge gained from analysing and resolving information security incidents shall be used to reduce the likelihood or impact of future incidents) A.16.1.7 Recolección de evidencia: La organización debe definir y aplicar procedimientos para la identificación, recolección, adquisición y preservación de información y evidencia digital, que puede servir como evidencia (A.16.1.7 Collection of evidence: The organization shall define and apply procedures for the identification, collection, acquisition and preservation of information, which can serve as evidence)", GuiaAuditoria="", Baseline=5, AprobacionJefeRiesgo='T', ControlClave='T')

        db.CatalogoControl.update_or_insert((db.CatalogoControl.id==32), id=32, Nombre="A.17.1 Continuidad de la seguridad de la información (A.17 Aspectos de seguridad de la información de la gestión de la continuidad del negocio)", Descripcion="La continuidad de la seguridad de la información debe ser parte del sistema de gestión de la continuidad del negocio de la organización (Information security continuity shall be embedded in the organization’s business continuity management systems)", GuiaImplementacion="A.17.1.1 Planificación de la continuidad de la seguridad de la información: La organización debe determinar sus requisitos para la seguridad de la información y la continuidad de la gestión de la seguridad de la información en situaciones adversas, crisis o desastre (A.17.1.1 Planning information security continuity: The organization shall determine its requirements for information security and the continuity of information security management in adverse situations, e.g. during a crisis or disaster) A.17.1.2 Implementación de la continuidad de seguridad de la información: La organización debe establecer, documentar, implementar y mantener procesos, procedimientos y controles para asegurar los niveles requeridos de continuidad de seguridad de la información durante situaciones adversas (A.17.1.2 Implementing information security continuity: The organization shall establish, document, implement and maintain processes, procedures and controls to ensure the required level of continuity for information security during an adverse situation) A.17.1.3 Verificar, revisar, y evaluar la continuidad de la seguridad de la información: La organización debe verificar los controles de continuidad de seguridad de la información establecidos e implementados a intervalos regulares para garantizar que sean válidos y efectivos en situaciones adversas (A.17.1.3 Verify, review and evaluate information security continuity: The organization shall verify the established and implemented information security continuity controls at regular intervals in order to ensure that they are valid and effective during adverse situations)", GuiaAuditoria="", Baseline=5, AprobacionJefeRiesgo='T', ControlClave='T')

        db.CatalogoControl.update_or_insert((db.CatalogoControl.id==33), id=33, Nombre="A.17.2 Redundancia (A.17 Aspectos de seguridad de la información de la gestión de la continuidad del negocio)", Descripcion="Aesgurar la disponibilidad de la información e infraestructura (To ensure availability of information processing facilities)", GuiaImplementacion="A.17.2.1 Disponibilidad de instalaciones de procesamiento de información: las instalaciones de procesamiento de información se deben implementar con redundancia suficiente para cumplir con los requisitos de disponibilidad (A.17.2.1 Availability of information processing facilities: Information processing facilities shall be implemented with redundancy sufficient to meet availability requirements)", GuiaAuditoria="", Baseline=5, AprobacionJefeRiesgo='T', ControlClave='T')

        db.CatalogoControl.update_or_insert((db.CatalogoControl.id==34), id=34, Nombre="A.18.1 Cumplimiento con requerimientos legales y contractuales (A.18 Cumplimiento)", Descripcion="Para evitar incumplimientos de las obligaciones legales, estatutarias, reglamentarias o contractuales relacionadas con la seguridad de la información y de cualquier requisito de seguridad (To avoid breaches of legal, statutory, regulatory or contractual obligations related to information security and of any security requirements)", GuiaImplementacion="A.18.1.1 Identificación de la legislación aplicable y requerimientos contractuales: todos los requisitos legales, regulatorios, contractuales y legislativos pertinentes y el enfoque de la organización para cumplir con estos requisitos se deben identificar, documentar y mantener actualizados para cada sistema de información y la organización (A.18.1.1 Identification of applicable legislation and contractual requirements: All relevant legislative statutory, regulatory, contractual requirements and the organization’s approach to meet these requirements shall be explicitly identified, documented and kept up to date for each information system and the organization) A.18.1.2 Derechos de propiedad intelectual: se deben implementar procedimientos para garantizar el cumplimiento de los requisitos legislativos, regulatorios y contractuales relacionados con los derechos de propiedad intelectual y el uso de productos de software patentados (A.18.1.2 Intellectual property rights: Appropriate procedures shall be implemented to ensure compliance with legislative, regulatory and contractual requirements related to intellectual property rights and use of proprietary software products) A.18.1.3 Protección de registros: los registros deben estar protegidos contra pérdida, destrucción, falsificación, acceso no autorizado y divulgación no autorizada, de acuerdo con los requisitos legales, regulatorios, contractuales y comerciales (A.18.1.3 Protection of records: Records shall be protected from loss, destruction, falsification, unauthorized access and unauthorized release, in accordance with legislatory, regulatory, contractual and business requirements) A.18.1.4 Privacidad y protección de la información de identificación personal: La privacidad y la protección de la información de identificación personal se debe asegurar según lo exija la legislación y las regulaciones aplicables (A.18.1.4 Privacy and protection of personally identifiable information: Privacy and protection of personally identifiable information shall be ensured as required in relevant legislation and regulation where applicable) A.18.1.5 Regulación de controles criptográficos: Los controles criptográficos se deben utilizar de conformidad con todos los acuerdos, leyes y regulaciones pertinentes (A.18.1.5 Regulation of cryptographic controls: Cryptographic controls shall be used in compliance with all relevant agreements, legislation and regulations)", GuiaAuditoria="", Baseline=5, AprobacionJefeRiesgo='T', ControlClave='T')

        db.CatalogoControl.update_or_insert((db.CatalogoControl.id==35), id=35, Nombre="A.18.2 Revisiones de Seguridad de la Información (A.18 Cumplimiento)", Descripcion="Para asegurar que el sistema de seguridad de la información esta implementado y opera de acuerdo a las políticas y procedimientos definidos en la organización (To ensure that information security is implemented and operated in accordance with the organizational policies and procedures)", GuiaImplementacion="A.18.2.1 Revisión independiente de la seguridad de la información: el enfoque de la organización para administrar la seguridad de la información y su implementación (es decir: objetivos de control, controles, políticas, procesos y procedimientos para la seguridad de la información) se debe revisar de forma independiente a intervalos planificados o cuando ocurran cambios significativos (A.18.2.1 Independent review of information security: The organization’s approach to managing information security and its implementation (i.e. control objectives, controls, policies, processes and procedures for information security) shall be reviewed independently at planned intervals or when significant changes occur) A.18.2.2 Cumplimiento de las políticas y estándares de seguridad: los gerentes deben revisar periódicamente el adecuado procesamiento de información y los procedimientos de seguridad dentro de su área de responsabilidad, para asegurar que cumplan con las políticas de seguridad, estándares y cualquier otro requisito de seguridad apropiado (A.18.2.2 Compliance with security policies and standards: Managers shall regularly review the compliance of information processing and procedures within their area of responsibility with the appropriate security policies, standards and any other security requirements) A.18.2.3 Revisión del cumplimiento técnico: los sistemas de información se revisarán periódicamente para verificar el cumplimiento de las políticas y estándares de seguridad de la información de la organización (A.18.2.3 Technical compliance review: Information systems shall be regularly reviewed for compliance with the organization’s information security policies and standards)", GuiaAuditoria="", Baseline=5, AprobacionJefeRiesgo='T', ControlClave='T')


    if iso27En == True:
        #-----------------------------------
        #ISO 27 - Annex A (En) 
        #-----------------------------------
        #A.5 Information security policies
        #-----------------------------------
        db.CatalogoControl.update_or_insert((db.CatalogoControl.id==1), id=1, Nombre="A.5.1 Management direction for information security (Information security policies)", Descripcion="To provide management direction and support for information security in accordance with business requirements and relevant laws and regulations", GuiaImplementacion="A.5.1.1 Policies for information security (A set of policies for information security shall be defined, approved by management, published and communicated to employees and relevant external parties.), A.5.1.2 Review of the policies for information security (The policies for information security shall be reviewed at planned intervals or if significant changes occur to ensure their continuing suitability, adequacy and effectiveness.)", Baseline=5, AprobacionJefeRiesgo='T', ControlClave='T')
        #------------------------------------------
        #A.6  Organization of information security
        #------------------------------------------
        db.CatalogoControl.update_or_insert((db.CatalogoControl.id==2), id=2, Nombre="A.6.1 Internal organization (Organization of information security)", Descripcion="To establish a management framework to initiate and control the implementation and operation of information security within the organization", GuiaImplementacion="A.6.1.1 Information security roles and responsibili-ties (All information security responsibilities shall be defined and allo-cated.), A.6.1.2 Segregation of duties (Conflicting duties and areas of responsibility shall be segregated to reduce opportunities for unauthorized or unintentional modification or misuse of the organizations assets), A.6.1.3 Contact with authorities (Appropriate contacts with relevant authorities shall be maintained), 6.1.4 Contact with special interest groups (Appropriate contacts with special interest groups or other special-ist security forums and professional associations shall be main-tained), 6.1.5 Information security in project management (Information security shall be addressed in project management, regardless of the type of the project)", Baseline=5, AprobacionJefeRiesgo='T', ControlClave='T')
        db.CatalogoControl.update_or_insert((db.CatalogoControl.id==3), id=3, Nombre="A.6.2 Mobile devices and teleworking (Organization of information security)", Descripcion="To ensure the security of teleworking and use of mobile devices", GuiaImplementacion="A.6.2.1 Mobile device policy (A policy and supporting security measures shall be adopted to manage the risks introduced by using mobile devices), A.6.2.2 Teleworking (A policy and supporting security measures shall be implemented to protect information accessed, processed or stored at teleworking sites)", Baseline=5, AprobacionJefeRiesgo='T', ControlClave='T')
        #-----------------------------
        #A.7 Human resource security
        #-----------------------------
        db.CatalogoControl.update_or_insert((db.CatalogoControl.id==4), id=4, Nombre="A.7.1 Prior to employment (Human resource security)", Descripcion="To ensure that employees and contractors understand their responsibilities and are suitable for the roles for which they are considered.", GuiaImplementacion="7.1.1 Screening (Background verification checks on all candidates for employment shall be carried out in accordance with relevant laws, regulations and ethics and shall be proportional to the business requirements, the classification of the information to be accessed and the per-ceived risks.), 7.1.2 Terms and conditions of employment (The contractual agreements with employees and contractors shall state their and the organization’s responsibilities for information security.)", Baseline=5, AprobacionJefeRiesgo='T', ControlClave='T')
        db.CatalogoControl.update_or_insert((db.CatalogoControl.id==5), id=5, Nombre="A.7.2 During employment (Human resource security)", Descripcion="To ensure that employees and contractors are aware of and fulfil their information security responsibilities.", GuiaImplementacion="7.2.1 Management responsibilities (Management shall require all employees and contractors to apply information security in accordance with the established policies and procedures of the organization), A.7.2.2 Information security awareness, education and training (All employees of the organization and, where relevant, contractors shall receive appropriate awareness education and training and regular updates in organizational policies and procedures, as relevant for their job function), Disciplinary process (There shall be a formal and communicated disciplinary process in place to take action against employees who have committed an information security breach)", Baseline=5, AprobacionJefeRiesgo='T', ControlClave='T')
        db.CatalogoControl.update_or_insert((db.CatalogoControl.id==6), id=6, Nombre="A.7.3 Termination and change of employment (Human resource security)", Descripcion="To protect the organization’s interests as part of the process of changing or terminating employment.", GuiaImplementacion="A.7.3.1 Termination or change of employment respon-sibilities (Information security responsibilities and duties that remain valid after termination or change of employment shall be defined, communicated to the employee or contractor and enforced.)", Baseline=5, AprobacionJefeRiesgo='T', ControlClave='T')
        #----------------------
        #A.8  Asset management
        #----------------------
        db.CatalogoControl.update_or_insert((db.CatalogoControl.id==7), id=7, Nombre="A.8.1 Responsibility for assets (Asset management)", Descripcion="To identify organizational assets and define appropriate protection responsibilities.", GuiaImplementacion="A.8.1.1 Inventory of assets (Assets associated with information and information processing facilities shall be identified and an inventory of these assets shall be drawn up and maintained.), A.8.1.2 Ownership of assets (Assets maintained in the inventory shall be owned.), A.8.1.3 Acceptable use of assets (Rules for the acceptable use of information and of assets associated with information and information processing facilities shall be identified, documented and implemented.), A.8.1.4 Return of assets (All employees and external party users shall return all of the organizational assets in their possession upon termination of their employment, contract or agreement.)", Baseline=5, AprobacionJefeRiesgo='T', ControlClave='T')
        db.CatalogoControl.update_or_insert((db.CatalogoControl.id==8), id=8, Nombre="A.8.2  Information classification (Asset management)", Descripcion="To ensure that information receives an appropriate level of protection in accordance with its importance to the organization.", GuiaImplementacion="A.8.2.1 Classification of information (Information shall be classified in terms of legal requirements, value, criticality and sensitivity to unauthorised disclosure or modification.), A.8.2.2 Labelling of information (An appropriate set of procedures for information labelling shall be developed and implemented in accordance with the information classification scheme adopted by the organization.), A.8.2.3 Handling of assets (Procedures for handling assets shall be developed and implemented in accordance with the information classification scheme adopted by the organization.)", Baseline=5, AprobacionJefeRiesgo='T', ControlClave='T')
        db.CatalogoControl.update_or_insert((db.CatalogoControl.id==9), id=9, Nombre="A.8.3 Media handling (Asset management)", Descripcion="To prevent unauthorized disclosure, modification, removal or destruction of information stored on media.", GuiaImplementacion="A.8.3.1 Management of removable media (Procedures shall be implemented for the management of removable media in accordance with the classification scheme adopted by the organization.), A.8.3.2 Disposal of media (Media shall be disposed of securely when no longer required, using formal procedures.), 8.3.3 Physical media transfer (Media containing information shall be protected against unauthorized access, misuse or corruption during transportation.)", Baseline=5, AprobacionJefeRiesgo='T', ControlClave='T')
        #--------------------
        #A.9 Access control
        #--------------------
        db.CatalogoControl.update_or_insert((db.CatalogoControl.id==10), id=10, Nombre="A.9.1 Business requirements of access control (Access control)", Descripcion="To limit access to information and information processing facilities.", GuiaImplementacion="A.9.1.1 Access control policy (An access control policy shall be established, documented and reviewed based on business and information security requirements.), A.9.1.2 Access to networks and network services (Users shall only be provided with access to the network and network services that they have been specifically authorized to use.)", Baseline=5, AprobacionJefeRiesgo='T', ControlClave='T')
        db.CatalogoControl.update_or_insert((db.CatalogoControl.id==11), id=11, Nombre="A.9.2 User access management (Access control)", Descripcion="To ensure authorized user access and to prevent unauthorized access to systems and services.", GuiaImplementacion="A.9.2.1 User registration and deregistration (A formal user registration and de-registration process shall be implemented to enable assignment of access rights.), A.9.2.2 User access provisioning (A formal user access provisioning process shall be implemented to assign or revoke access rights for all user types to all systems and services.), A.9.2.3 Management of privileged access rights (The allocation and use of privileged access rights shall be restricted and controlled.), A.9.2.4 Management of secret authentication information of users (The allocation of secret authentication information shall be controlled through a formal management process.), A.9.2.5 Review of user access rights (Asset owners shall review users access rights at regular intervals.), A.9.2.6 Removal or adjustment of access rights (The access rights of all employees and external party users to information and information processing facilities shall be removed upon termination of their employment, contract or agreement, or adjusted upon change.)", Baseline=5, AprobacionJefeRiesgo='T', ControlClave='T')
        db.CatalogoControl.update_or_insert((db.CatalogoControl.id==12), id=12, Nombre="A.9.3 User responsibilities (Access control)", Descripcion="To make users accountable for safeguarding their authentication information.", GuiaImplementacion="A.9.3.1 Use of secret authentication information (Users shall be required to follow the organizations practices in the use of secret authentication information.)", Baseline=5, AprobacionJefeRiesgo='T', ControlClave='T')
        db.CatalogoControl.update_or_insert((db.CatalogoControl.id==13), id=13, Nombre="A.9.4 System and application access control (Access control)", Descripcion="To prevent unauthorized access to systems and applications.", GuiaImplementacion="A.9.4.1 Information access restriction (Access to information and application system functions shall be restricted in accordance with the access control policy.), A.9.4.2 Secure log-on procedures (Where required by the access control policy, access to systems and applications shall be controlled by a secure log-on procedure.), A.9.4.3 Password management system (Password management systems shall be interactive and shall ensure quality passwords.), A.9.4.4 Use of privileged utility programs (The use of utility programs that might be capable of overriding system and application controls shall be restricted and tightly controlled.), A.9.4.5 Access control to program source code (Access to program source code shall be restricted.)", Baseline=5, AprobacionJefeRiesgo='T', ControlClave='T')
        #-------------------
        #A.10 Cryptography
        #-------------------
        db.CatalogoControl.update_or_insert((db.CatalogoControl.id==14), id=14, Nombre="A.10.1 Cryptographic controls (Cryptography)", Descripcion="To ensure proper and effective use of cryptography to protect the confidentiality, authen-ticity and/or integrity of information.", GuiaImplementacion="A.10.1.1 Policy on the use of cryptographic controls (A policy on the use of cryptographic controls for protection of information shall be developed and implemented.), A.10.1.2 Key management (A policy on the use, protection and lifetime of cryptographic keys shall be developed and implemented through their whole lifecycle.)", Baseline=5, AprobacionJefeRiesgo='T', ControlClave='T')
        #------------------------------------------
        #A.11  Physical and environmental security
        #------------------------------------------
        db.CatalogoControl.update_or_insert((db.CatalogoControl.id==15), id=15, Nombre="", Descripcion="", Baseline=5, AprobacionJefeRiesgo='T', ControlClave='T')
        db.CatalogoControl.update_or_insert((db.CatalogoControl.id==16), id=16, Nombre="", Descripcion="", Baseline=5, AprobacionJefeRiesgo='T', ControlClave='T')
        db.CatalogoControl.update_or_insert((db.CatalogoControl.id==17), id=17, Nombre="", Descripcion="", Baseline=5, AprobacionJefeRiesgo='T', ControlClave='T')
        db.CatalogoControl.update_or_insert((db.CatalogoControl.id==18), id=18, Nombre="", Descripcion="", Baseline=5, AprobacionJefeRiesgo='T', ControlClave='T')
        db.CatalogoControl.update_or_insert((db.CatalogoControl.id==19), id=19, Nombre="", Descripcion="", Baseline=5, AprobacionJefeRiesgo='T', ControlClave='T')
        db.CatalogoControl.update_or_insert((db.CatalogoControl.id==20), id=20, Nombre="", Descripcion="", Baseline=5, AprobacionJefeRiesgo='T', ControlClave='T')


    if nist == True:
        #--------------
        #Carga NIST
        #--------------
        #----------------
        #Control Accesos
        #----------------
        db.CatalogoControl.update_or_insert((db.CatalogoControl.id==1), id=1, Nombre="Control Accesos (Access Control)", Descripcion="AC-1 Access Control Policy and Procedures, AC-2 Account Management, AC-3 Access Enforcement, AC-4 Information Flow Enforcement, AC-5 Separation of Duties, AC-6 Least Privilege, AC-7 Unsuccessful Logon Attempts, AC-8 System Use Notification, AC-9 Previous Logon (Access) Notification, AC-10 Concurrent Session Control, AC-11 Session Lock, AC-12 Session Termination, AC-13 Withdrawn, AC-14 Permitted Actions without Identification or Authentication, AC-15 Withdrawn, AC-16 Security Attributes, AC-17 Remote Access, AC-18 Wireless Access, AC-19 Access Control for Mobile Devices, AC-20 Use of External Information Systems, AC-21 Information Sharing, AC-22 Publicly Accessible Content, AC-23 Data Mining Protection, AC-24 Access Control Decisions, AC-25 Reference Monitor", Baseline=6, AprobacionJefeRiesgo='T', ControlClave='T')
        #---------------------------------
        #Concientizacion y entrenamiento
        #---------------------------------
        db.CatalogoControl.update_or_insert((db.CatalogoControl.id==2), id=2, Nombre="Concientizacion y Entrenamiento (Awareness and Training)", Descripcion="AT-1 Security Awareness and Training Policy and Procedures, AT-2 Security Awareness Training, AT-3 Role-Based Security Training, AT-4 Security Training Records, AT-5 Withdrawn", Baseline=6, AprobacionJefeRiesgo='T', ControlClave='T')
        #--------------------------
        #Auditoria y No Repudio
        #--------------------------
        db.CatalogoControl.update_or_insert((db.CatalogoControl.id==3), id=3, Nombre="Auditoria y No Repudio (Audit and Accountability)", Descripcion="AU-1 Audit and Accountability Policy and Procedures, AU-2 Audit Events, AU-3 Content of Audit Records, AU-4 Audit Storage Capacity, AU-5 Response to Audit Processing Failures, AU-6 Audit Review, Analysis, and Reporting, AU-7 Audit Reduction and Report Generation, AU-8 Time Stamps, AU-9 Protection of Audit Information, AU-10 Non-repudiation, AU-11 Audit Record Retention, AU-12 Audit Generation, AU-13 Monitoring for Information Disclosure, AU-14 Session Audit, AU-15 Alternate Audit Capability, AU-16 Cross-Organizational Auditing", Baseline=6, AprobacionJefeRiesgo='T', ControlClave='T')
        #---------------------------------------
        #Evaluacion y Autorización de Seguridad
        #---------------------------------------
        db.CatalogoControl.update_or_insert((db.CatalogoControl.id==4), id=4, Nombre="Evaluación y Autorización de Seguridad (Security Assessment and Authorization)", Descripcion="CA-1 Security Assessment and Authorization Policies and Procedures, CA-2 Security Assessments, CA-3 System Interconnections, CA-4 Withdrawn, CA-5 Plan of Action and Milestones, CA-6 Security Authorization, CA-7 Continuous Monitoring, CA-8 Penetration Testing, CA-9 Internal System Connections", Baseline=6, AprobacionJefeRiesgo='T', ControlClave='T')
        #--------------------------
        #Configuraciones Seguras
        #--------------------------
        db.CatalogoControl.update_or_insert((db.CatalogoControl.id==5), id=5, Nombre="Configuraciones Seguras (Configuration Management)", Descripcion="M-1 Configuration Management Policy and Procedures, CM-2 Baseline Configuration, CM-3 Configuration Change Control, CM-4 Security Impact Analysis, CM-5 Access Restrictions for Change, CM-6 Configuration Settings, CM-7 Least Functionality, CM-8 Information System Component Inventory, CM-9 Configuration Management Plan, CM-10 Software Usage Restrictions, CM-11 User-Installed Software", Baseline=6, AprobacionJefeRiesgo='T', ControlClave='T')
        #------------------------
        #Planes de Contingencia
        #------------------------
        db.CatalogoControl.update_or_insert((db.CatalogoControl.id==6), id=6, Nombre="Planes de Contingencia (Contingency Planning)", Descripcion="CP-1 Contingency Planning Policy and ProceduresP1CP-1, CP-2 Contingency Plan, CP-3 Contingency Training, CP-4 Contingency Plan Testing, CP-5 Withdrawn, CP-6 Alternate Storage Site, CP-7 Alternate Processing Site, CP-8 Telecommunications Services, CP-9 Information System Backup, CP-10 Information System Recovery and Reconstitution, CP-11 Alternate Communications Protocols, CP-12 Safe Mode, CP-13 Alternative Security Mechanisms", Baseline=6, AprobacionJefeRiesgo='T', ControlClave='T')
        #-------------------------------
        #Identificación y Autenticacion
        #-------------------------------
        db.CatalogoControl.update_or_insert((db.CatalogoControl.id==7), id=7, Nombre="Identificación y Autenticación (Identification and Authentication)", Descripcion="IA-1 Identification and Authentication Policy and Procedures, IA-2 Identification and Authentication (Organizational Users), IA-3 Device Identification and Authentication, IA-4 Identifier Management, IA-5 Authenticator Management, IA-6 Authenticator Feedback, IA-7 Cryptographic Module Authentication, IA-8 Identification and Authentication (Non-Organizational Users), IA-9 Service Identification and Authentication, IA-10 Adaptive Identification and Authentication, IA-11 Re-authentication", Baseline=6, AprobacionJefeRiesgo='T', ControlClave='T')
        #-----------------------
        #Respuesta a Incidentes
        #-----------------------
        db.CatalogoControl.update_or_insert((db.CatalogoControl.id==8), id=8, Nombre="Respuesta a Incidentes (Incident Response)", Descripcion="IR-1 Incident Response Policy and Procedures, IR-2 Incident Response Training, IR-3 Incident Response Testing, IR-4 Incident Handling, IR-5 Incident Monitoring, IR-6 Incident Reporting, IR-7 Incident Response Assistance, IR-8 Incident Response Plan, IR-9 Information Spillage Response, IR-10 Integrated Information Security Analysis Team", Baseline=6, AprobacionJefeRiesgo='T', ControlClave='T')
        #---------------
        #Mantenimiento
        #---------------
        db.CatalogoControl.update_or_insert((db.CatalogoControl.id==9), id=9, Nombre="Mantenimiento (Maintenance)", Descripcion="MA-1 System Maintenance Policy and Procedures, MA-2 Controlled Maintenance, MA-3 Maintenance Tools, MA-4 Nonlocal Maintenance, MA-5 Maintenance Personnel, MA-6 Timely Maintenance", Baseline=6, AprobacionJefeRiesgo='T', ControlClave='T')
        #----------------------
        #Proteccion de Medios
        #----------------------
        db.CatalogoControl.update_or_insert((db.CatalogoControl.id==10), id=10, Nombre="Protección de Medios (Media Protection)", Descripcion="MP-1 Media Protection Policy and Procedures, MP-2 Media Access, MP-3 Media Marking, MP-4 Media Storage, MP-5 Media Transport, MP-6 Media Sanitization, MP-7 Media Use, MP-8 Media Downgrading", Baseline=6, AprobacionJefeRiesgo='T', ControlClave='T')
        #------------------------------
        #Proteccion Fisica y Ambiental
        #------------------------------
        db.CatalogoControl.update_or_insert((db.CatalogoControl.id==11), id=11, Nombre="Protección Física y Ambiental (Physical and Environmental Protection)", Descripcion="PE-1 Physical and Environmental Protection Policy and Procedures, PE-2 Physical Access Authorizations, PE-3 Physical Access Control, PE-4 Access Control for Transmission Medium, PE-5 Access Control for Output Devices, PE-6 Monitoring Physical Access, PE-7Withdrawn, PE-8 Visitor Access Records, PE-9 Power Equipment and Cabling, PE-10 Emergency Shutoff, PE-11 Emergency Power, PE-12 Emergency Lighting, PE-13 Fire Protection, PE-14 Temperature and Humidity Controls, PE-15 Water Damage Protection, PE-16 Delivery and Removal, PE-17 Alternate Work Site, PE-18 Location of Information System Components, PE-19 Information Leakage, PE-20 Asset Monitoring and Tracking", Baseline=6, AprobacionJefeRiesgo='T', ControlClave='T')
        #------------
        #Planeacion
        #------------
        db.CatalogoControl.update_or_insert((db.CatalogoControl.id==12), id=12, Nombre="Planeación (Planning)", Descripcion="PL-1 Security Planning Policy and Procedures, PL-2 System Security Plan, PL-3 Withdrawn, PL-4 Rules of Behavior, PL-5Withdrawn, PL-6Withdrawn, PL-7 Security Concept of Operations, PL-8 Information Security Architecture, PL-9Central Management", Baseline=6, AprobacionJefeRiesgo='T', ControlClave='T')
        #---------------------
        #Personal de Seguridad
        #---------------------
        db.CatalogoControl.update_or_insert((db.CatalogoControl.id==13), id=13, Nombre="Personal de Seguridad (Personnel Security)", Descripcion="PS-1 Personnel Security Policy and Procedures, PS-2 Position Risk Designation, PS-3 Personnel Screening, PS-4 Personnel Termination, PS-5 Personnel Transfer, PS-6 Access Agreements, PS-7 Third-Party Personnel Security, PS-8 Personnel Sanctions", Baseline=6, AprobacionJefeRiesgo='T', ControlClave='T')
        #-----------------------
        #Evaluacion de Riesgos
        #-----------------------
        db.CatalogoControl.update_or_insert((db.CatalogoControl.id==14), id=14, Nombre="Evaluación de Riesgos (Risk Assessment)", Descripcion="RA-1 Risk Assessment Policy and Procedures, RA-2 Security Categorization, RA-3 Risk Assessment, RA-4 Withdrawn, RA-5 Vulnerability Scanning, RA-6 Technical Surveillance Countermeasures Survey", Baseline=6, AprobacionJefeRiesgo='T', ControlClave='T')
        #-------------------------------------
        #Adquisicion de sistemas y servicios
        #-------------------------------------
        db.CatalogoControl.update_or_insert((db.CatalogoControl.id==15), id=15, Nombre="Adquisición de sistemas y servicios (System and Services Acquisition)", Descripcion="SA-1 System and Services Acquisition Policy and Procedures, SA-2 Allocation of Resources, SA-3 System Development Life Cycle, SA-4 Acquisition Process, SA-5 Information System Documentation, SA-6 Withdrawn, SA-7 Withdrawn, SA-8 Security Engineering Principles, SA-9 External Information System Services, SA-10 Developer Configuration Management, SA-11 Developer Security Testing and Evaluation, SA-12 Supply Chain Protection, SA-13 Trustworthiness, SA-14 Criticality Analysis, SA-15 Development Process, Standards, and Tools, SA-16 Developer-Provided Training, SA-17 Developer Security Architecture and Design, SA-18 Tamper Resistance and Detection, SA-19 Component Authenticity, SA-20 Customized Development of Critical Components, SA-21 Developer Screening, SA-22 Unsupported System Components", Baseline=6, AprobacionJefeRiesgo='T', ControlClave='T')
        #----------------------------------------
        #Proteccion de Sistemas y Comunicaciones
        #----------------------------------------
        db.CatalogoControl.update_or_insert((db.CatalogoControl.id==16), id=16, Nombre="Protección de Sistemas y Comunicaciones (System and Communications Protection)", Descripcion="SC-1 System and Communications Protection Policy and Procedures, SC-2 Application Partitioning, SC-3 Security Function Isolation, C-4 Information in Shared Resources, SC-5 Denial of Service Protection, SC-6 Resource Availability, SC-7 Boundary Protection, SC-8 Transmission Confidentiality and Integrity, SC-9 Withdrawn, SC-10 Network Disconnect, SC-11 Trusted Path, SC-12 Cryptographic Key Establishment and Management, SC-13 Cryptographic Protection, SC-14 Withdrawn, SC-15 Collaborative Computing Devices, SC-16 Transmission of Security Attributes, SC-17 Public Key Infrastructure Certificates, SC-18 Mobile Code, SC-19 Voice Over Internet Protocol, SC-20 Secure Name /Address Resolution Service(Authoritative Source), SC-21 Secure Name /Address Resolution Service(Recursive or Caching Resolver), SC-22 Architecture and Provisioning forName/Address Resolution Service, SC-23 Session Authenticity, SC-24 Fail in Known State, SC-25 Thin Nodes, SC-26 Honeypots, SC-27 Platform-Independent Applications, SC-28 Protection of Information at Rest, SC-29 Heterogeneity, SC-30 Concealment and Misdirection, SC-31 Covert Channel Analysis, SC-32 Information System Partitioning, SC-33 Withdrawn, SC-34 Non-Modifiable Executable Programs, SC-35 Honeyclients, SC-36 Distributed Processing and Storage, SC-37 Out-of-Band Channels, SC-38 Operations Security, SC-39 Process Isolation, SC-40 Wireless Link Protection, SC-41 Port and I/O Device Access, SC-42 Sensor Capability and Data, SC-43 Usage Restrictions, SC-44 Detonation Chambers", Baseline=6, AprobacionJefeRiesgo='T', ControlClave='T')
        #--------------------------------------
        #Integridad de Sistemas e Informacion
        #--------------------------------------
        db.CatalogoControl.update_or_insert((db.CatalogoControl.id==17), id=17, Nombre="Integridad de Sistemas e Información (System and Information Integrity)", Descripcion="SI-1 System and Information Integrity Policy and Procedures, SI-2 Flaw Remediation, SI-3Malicious Code Protection, SI-4 Information System Monitoring, SI-5 Security Alerts Advisories and Directives, SI-6 Security Function Verification, SI-7 Software, Firmware, and Information Integrity, SI-8 Spam Protection, SI-9 Withdrawn, SI-10 Information Input Validation, SI-11 Error Handling, SI-12 Information Handling and Retention, SI-13 Predictable Failure Prevention, SI-14 Non-Persistence, SI-15 Information Output Filtering, SI-16 Memory Protection, SI-17 Fail-Safe Procedures", Baseline=6, AprobacionJefeRiesgo='T', ControlClave='T')
        #---------------------
        #Gestion de Proyectos
        #---------------------
        db.CatalogoControl.update_or_insert((db.CatalogoControl.id==18), id=18, Nombre="Gestión de Proyectos (Program Management)", Descripcion="PM-1 Information Security Program Plan, PM-2 Senior Information Security Officer, PM-3 Information Security Resources, PM-4 Plan of Action and Milestones Process, PM-5 Information System Inventory, PM-6 Information Security Measures of Performance, PM-7 Enterprise Architecture, PM-8 Critical Infrastructure Plan, PM-9 Risk Management Strategy, PM-10 Security Authorization Process, PM-11 Mission/Business Process Definition, PM-12 Insider Threat Program, PM-13 Information Security Workforce, PM-14 Testing, Training, and Monitoring, PM-15 Contacts with Security Groups and Associations, PM-16 Threat Awareness Program", Baseline=6, AprobacionJefeRiesgo='T', ControlClave='T')


    #----------------
    #NiveleMadurez
    #----------------
    db.NivelMadurez.update_or_insert((db.NivelMadurez.id==1), id=1, Nombre="Imcompleto (Incomplete)", Valor=1, Descripcion="El proceso no se implementa o no logra su propósito. En este nivel, hay poca o ninguna evidencia de algún logro sistemático del propósito del proceso. (The process is not implemented or fails to achieve its process purpose. At this level, there is little or no evidence of any systematic achievement of the process purpose.)", AprobacionJefeRiesgo='T')
    db.NivelMadurez.update_or_insert((db.NivelMadurez.id==2), id=2, Nombre="Ejecutado (Performed)", Valor=2, Descripcion="El proceso implementado logra su propósito de proceso. COBIT PAM 1 atributo. (The implemented process achieves its process purpose. COBIT PAM 1 attribute.)", AprobacionJefeRiesgo='T')
    db.NivelMadurez.update_or_insert((db.NivelMadurez.id==3), id=3, Nombre="Gestionado (Managed)", Valor=3, Descripcion="El proceso realizado descrito anteriormente se implementa ahora de manera administrada. Monitoreada, planificada y ajustada. Sus productos de trabajo se establecen, controlan y mantienen adecuadamente. COBIT PAM 2 atributos. (The previously described performed process is now implemented in a managed fashion. Planned, monitored and adjusted. Its work products are appropriately established, controlled and maintained. COBIT PAM 2 attributes.)", AprobacionJefeRiesgo='T')
    db.NivelMadurez.update_or_insert((db.NivelMadurez.id==4), id=4, Nombre="Establecido (Established)", Valor=4, Descripcion="El proceso gestionado descrito anteriormente ahora se implementa utilizando un proceso definido que es capaz de lograr los resultados del proceso. COBIT PAM 2 atributos. (The previously described managed process is now implemented using a defined process that is capable of achieving its process outcomes. COBIT PAM 2 attributes.)", AprobacionJefeRiesgo='T')
    db.NivelMadurez.update_or_insert((db.NivelMadurez.id==5), id=5, Nombre="Predecible (Predictable)", Valor=5, Descripcion="El proceso establecido descrito anteriormente ahora opera dentro de límites definidos para lograr los resultados del proceso. COBIT PAM 2 atributos. (The previously described established process now operates within defined limits to achieve its process outcomes. COBIT PAM 2 attributes.)", AprobacionJefeRiesgo='T')
    db.NivelMadurez.update_or_insert((db.NivelMadurez.id==6), id=6, Nombre="Optimizado (Optimazing)", Valor=6, Descripcion="El proceso predecible descrito anteriormente se mejora continuamente para cumplir con los objetivos comerciales actuales y proyectados relevantes. COBIT PAM 2 atributos. (The previously described predictable process is continuously improved to meet relevant current and projected business goals. COBIT PAM 2 attributes.)", AprobacionJefeRiesgo='T')
    #db.NivelMadurez.update_or_insert((db.NivelMadurez.id==7), id=7, Nombre="NA", Valor=0, Descripcion="Informativo", AprobacionJefeRiesgo='T')
    #-----------------------------
    #Niveles de Madurez CMMC Model
    #-----------------------------
    '''
    db.NivelMadurez.update_or_insert((db.NivelMadurez.id==1), id=1, Nombre="Ejecutado (Performed)", Valor=1, Descripcion="El nivel 1 requiere que una organización realice las prácticas especificadas. Debido a que la organización solo puede realizar estas prácticas de manera ad-hoc y puede o no depender de la documentación, la madurez del proceso no se evalúa para el Nivel 1 (Level 1 requires that an organization performs the specified practices. Because the organization may only be able to perform these practices in an ad-hoc manner and may or may not rely on documentation, process maturity is not assessed for Level 1).", AprobacionJefeRiesgo='T')
    db.NivelMadurez.update_or_insert((db.NivelMadurez.id==2), id=2, Nombre="Documentado (Documented)", Valor=2, Descripcion="El nivel 2 requiere que una organización establezca y documente prácticas y políticas para guiar la implementación de sus esfuerzos de CMMC. La documentación de las prácticas permite a las personas realizarlas de manera repetible. Las organizaciones desarrollan capacidades maduras al documentar sus procesos y posteriormente ejecutarlos de acuerdo a dicha documentación (Level 2 requires that an organization establish and document practices and policies to guide the implementation of their CMMC efforts. The documentation of practices enables individuals to perform them in a repeatable manner. Organizations develop mature capabilities by documenting their processes and then practicing them as documented).", AprobacionJefeRiesgo='T')
    db.NivelMadurez.update_or_insert((db.NivelMadurez.id==3), id=3, Nombre="Gestionado (Managed)", Valor=3, Descripcion="El nivel 3 requiere que una organización establezca, mantenga y proporcione recursos para la ejecución del plan, demostrando una adecuada gestión de las actividades para la implementación de la prácticas. El plan puede incluir información sobre la misión, metas, planes de proyectos, recursos, capacitación requerida y participación de las partes interesadas relevantes (Level 3 requires that an organization establish, maintain, and resource a plan demonstrating the management of activities for practice implementation. The plan may include information on missions, goals, project plans, resourcing, required training, and involvement of relevant stakeholders).", AprobacionJefeRiesgo='T')
    db.NivelMadurez.update_or_insert((db.NivelMadurez.id==4), id=4, Nombre="Revisado (Reviewed)", Valor=4, Descripcion="El nivel 4 requiere que una organización revise y mida las prácticas para determinar su efectividad. Además de medir la efectividad de las prácticas, las organizaciones en este nivel pueden tomar acciones correctivas cuando sea necesario e informar a la Alta Dirección sobre el estado de las prácticas y controles de manera periodica (Level 4 requires that an organization review and measure practices for effectiveness. In addition to measuring practices for effectiveness, organizations at this level are able to take corrective action when necessary and inform higher level management of status or issues on a recurring basis).", AprobacionJefeRiesgo='T')
    db.NivelMadurez.update_or_insert((db.NivelMadurez.id==5), id=5, Nombre="Optimizado (Optimizing)", Valor=5, Descripcion="El nivel 5 requiere que una organización estandarice y optimice la implementación de procesos en toda la organización (Level 5 requires an organization to standardize and optimize process implementation across the organization).", AprobacionJefeRiesgo='T')
    #---------
    #Region
    #---------
    db.Region.update_or_insert((db.Region.id==1), id=1, Nombre="Mexico", Responsable="processOwner", AprobacionJefeRiesgo='T')
    db.Region.update_or_insert((db.Region.id==2), id=2, Nombre="USA",    Responsable="processOwner", AprobacionJefeRiesgo='T')
    db.Region.update_or_insert((db.Region.id==3), id=3, Nombre="Canada", Responsable="processOwner", AprobacionJefeRiesgo='T')
    #----------
    #Direccion
    #----------
    db.Direccion.update_or_insert((db.Direccion.id==1), id=1, Nombre="TI Desarrollo",  Responsable="Responsable 1", AprobacionJefeRiesgo='T')
    db.Direccion.update_or_insert((db.Direccion.id==2), id=2, Nombre="TI Infraestructura", Responsable="Responsable 2", AprobacionJefeRiesgo='T')
    db.Direccion.update_or_insert((db.Direccion.id==3), id=3, Nombre="TI Redes y Comunicaciones", Responsable="Responsable 3", AprobacionJefeRiesgo='T')
    '''
    #-----------------
    #CriterioImpacto
    #-----------------
    db.CriterioImpacto.update_or_insert((db.CriterioImpacto.id==1), id=1, Nombre="Insignificante (Insignificant)", Valor=1, Descripcion="No existe impacto a la organización.", AprobacionJefeRiesgo='T')
    db.CriterioImpacto.update_or_insert((db.CriterioImpacto.id==2), id=2, Nombre="Menor (Minor)", Valor=2, Descripcion="Existe menor moderado a la organización.", AprobacionJefeRiesgo='T')
    db.CriterioImpacto.update_or_insert((db.CriterioImpacto.id==3), id=3, Nombre="Moderado (Moderate)", Valor=3, Descripcion="Existe impacto moderado a la organización.", AprobacionJefeRiesgo='T')
    db.CriterioImpacto.update_or_insert((db.CriterioImpacto.id==4), id=4, Nombre="Mayor (Major)", Valor=4, Descripcion="Existe impacto mayor a la organización.", AprobacionJefeRiesgo='T')
    db.CriterioImpacto.update_or_insert((db.CriterioImpacto.id==5), id=5, Nombre="Catastrofico (Catastrophic)", Valor=5, Descripcion="Existe impacto catastrofico a la organización.", AprobacionJefeRiesgo='T')
    #---------------------------
    #Criterios de Probabilidad
    #---------------------------
    db.CriterioProbabilidad.update_or_insert((db.CriterioProbabilidad.id==1), id=1, Nombre="Remoto (Rare)", Valor=1, Descripcion="Existe probabilidad remota de que el riesgo se materialice.", AprobacionJefeRiesgo='T')
    db.CriterioProbabilidad.update_or_insert((db.CriterioProbabilidad.id==2), id=2, Nombre="Poco Probable (Unlikely)", Valor=2, Descripcion="Es poco probable de que el riesgo se materialice.", AprobacionJefeRiesgo='T')
    db.CriterioProbabilidad.update_or_insert((db.CriterioProbabilidad.id==3), id=3, Nombre="Factible (Possible)", Valor=3, Descripcion="Es factible que el riesgo se materialice.", AprobacionJefeRiesgo='T')
    db.CriterioProbabilidad.update_or_insert((db.CriterioProbabilidad.id==4), id=4, Nombre="Muy Probable (Likely)", Valor=4, Descripcion="Es muy probable que el riesgo se materialice.", AprobacionJefeRiesgo='T')
    db.CriterioProbabilidad.update_or_insert((db.CriterioProbabilidad.id==5), id=5, Nombre="Casi Cierto (Almost Certain)", Valor=5, Descripcion="La probabilidad de que el riesgo se materialice es casi cierto", AprobacionJefeRiesgo='T')
    #----------------
    #CriterioRiesgo
    #----------------
    db.CriterioRiesgo.update_or_insert((db.CriterioRiesgo.id==1), id=1, CriterioImpactoId=1,CriterioProbabilidadId=1,RiesgoValor=1,Nombre="Bajo (Low)", Descripcion="", AprobacionJefeRiesgo='T')
    db.CriterioRiesgo.update_or_insert((db.CriterioRiesgo.id==2), id=2, CriterioImpactoId=1,CriterioProbabilidadId=2,RiesgoValor=1,Nombre="Bajo (Low)", Descripcion="", AprobacionJefeRiesgo='T')
    db.CriterioRiesgo.update_or_insert((db.CriterioRiesgo.id==3), id=3, CriterioImpactoId=1,CriterioProbabilidadId=3,RiesgoValor=1,Nombre="Bajo (Low)", Descripcion="", AprobacionJefeRiesgo='T')

    ###db.CriterioRiesgo.update_or_insert((db.CriterioRiesgo.id==4), id=4, CriterioImpactoId=1,CriterioProbabilidadId=4,RiesgoValor=3,Nombre="Moderado (Moderate)", Descripcion="", AprobacionJefeRiesgo='T')
    db.CriterioRiesgo.update_or_insert((db.CriterioRiesgo.id==4), id=4, CriterioImpactoId=1,CriterioProbabilidadId=4,RiesgoValor=2,Nombre="Moderado (Moderate)", Descripcion="", AprobacionJefeRiesgo='T')

    ###db.CriterioRiesgo.update_or_insert((db.CriterioRiesgo.id==5), id=5, CriterioImpactoId=1,CriterioProbabilidadId=5,RiesgoValor=4,Nombre="Alto (High)", Descripcion="", AprobacionJefeRiesgo='T')
    db.CriterioRiesgo.update_or_insert((db.CriterioRiesgo.id==5), id=5, CriterioImpactoId=1,CriterioProbabilidadId=5,RiesgoValor=3, Nombre="Alto (High)", Descripcion="", AprobacionJefeRiesgo='T')

    db.CriterioRiesgo.update_or_insert((db.CriterioRiesgo.id==6), id=6, CriterioImpactoId=2,CriterioProbabilidadId=1,RiesgoValor=1,Nombre="Bajo (Low)", Descripcion="", AprobacionJefeRiesgo='T')
    db.CriterioRiesgo.update_or_insert((db.CriterioRiesgo.id==7), id=7, CriterioImpactoId=2,CriterioProbabilidadId=2,RiesgoValor=1,Nombre="Bajo (Low)", Descripcion="", AprobacionJefeRiesgo='T')
   
    '''
    db.CriterioRiesgo.update_or_insert((db.CriterioRiesgo.id==8), id=8, CriterioImpactoId=2,CriterioProbabilidadId=3,RiesgoValor=3,Nombre="Moderado (Moderate)", Descripcion="", AprobacionJefeRiesgo='T')
    db.CriterioRiesgo.update_or_insert((db.CriterioRiesgo.id==9), id=9, CriterioImpactoId=2,CriterioProbabilidadId=4,RiesgoValor=4,Nombre="Alto (High)", Descripcion="", AprobacionJefeRiesgo='T')
    db.CriterioRiesgo.update_or_insert((db.CriterioRiesgo.id==10), id=10, CriterioImpactoId=2,CriterioProbabilidadId=5,RiesgoValor=4,Nombre="Alto (High)", Descripcion="", AprobacionJefeRiesgo='T')
    db.CriterioRiesgo.update_or_insert((db.CriterioRiesgo.id==11), id=11, CriterioImpactoId=3,CriterioProbabilidadId=1,RiesgoValor=3,Nombre="Moderado (Moderate)", Descripcion="", AprobacionJefeRiesgo='T')
    db.CriterioRiesgo.update_or_insert((db.CriterioRiesgo.id==12), id=12, CriterioImpactoId=3,CriterioProbabilidadId=2,RiesgoValor=3,Nombre="Moderado (Moderate)", Descripcion="", AprobacionJefeRiesgo='T')
    db.CriterioRiesgo.update_or_insert((db.CriterioRiesgo.id==13), id=13, CriterioImpactoId=3,CriterioProbabilidadId=4,RiesgoValor=4,Nombre="Alto (High)", Descripcion="", AprobacionJefeRiesgo='T')
    db.CriterioRiesgo.update_or_insert((db.CriterioRiesgo.id==14), id=14, CriterioImpactoId=3,CriterioProbabilidadId=5,RiesgoValor=5,Nombre="Critico (Critical)", Descripcion="", AprobacionJefeRiesgo='T')
    db.CriterioRiesgo.update_or_insert((db.CriterioRiesgo.id==15), id=15, CriterioImpactoId=4,CriterioProbabilidadId=1,RiesgoValor=4,Nombre="Alto (High)", Descripcion="", AprobacionJefeRiesgo='T')
    db.CriterioRiesgo.update_or_insert((db.CriterioRiesgo.id==16), id=16, CriterioImpactoId=5,CriterioProbabilidadId=1,RiesgoValor=4,Nombre="Alto (High)", Descripcion="", AprobacionJefeRiesgo='T')
    db.CriterioRiesgo.update_or_insert((db.CriterioRiesgo.id==17), id=17, CriterioImpactoId=4,CriterioProbabilidadId=2,RiesgoValor=4,Nombre="Alto (High)", Descripcion="", AprobacionJefeRiesgo='T')
    db.CriterioRiesgo.update_or_insert((db.CriterioRiesgo.id==18), id=18, CriterioImpactoId=5,CriterioProbabilidadId=2,RiesgoValor=5,Nombre="Critico (Critical)", Descripcion="", AprobacionJefeRiesgo='T')
    db.CriterioRiesgo.update_or_insert((db.CriterioRiesgo.id==19),id=19, CriterioImpactoId=4,CriterioProbabilidadId=3,RiesgoValor=5,Nombre="Critico (Critical)", Descripcion="", AprobacionJefeRiesgo='T')
    db.CriterioRiesgo.update_or_insert((db.CriterioRiesgo.id==20),id=20, CriterioImpactoId=5,CriterioProbabilidadId=3,RiesgoValor=5,Nombre="Critico (Critical)", Descripcion="", AprobacionJefeRiesgo='T')
    db.CriterioRiesgo.update_or_insert((db.CriterioRiesgo.id==21),id=21, CriterioImpactoId=4,CriterioProbabilidadId=4,RiesgoValor=5,Nombre="Critico (Critical)", Descripcion="", AprobacionJefeRiesgo='T')
    db.CriterioRiesgo.update_or_insert((db.CriterioRiesgo.id==22),id=22, CriterioImpactoId=5,CriterioProbabilidadId=4,RiesgoValor=5,Nombre="Critico (Critical)", Descripcion="", AprobacionJefeRiesgo='T')
    db.CriterioRiesgo.update_or_insert((db.CriterioRiesgo.id==23),id=23, CriterioImpactoId=4,CriterioProbabilidadId=5,RiesgoValor=5,Nombre="Critico (Critical)", Descripcion="", AprobacionJefeRiesgo='T')
    db.CriterioRiesgo.update_or_insert((db.CriterioRiesgo.id==24),id=24, CriterioImpactoId=5,CriterioProbabilidadId=5,RiesgoValor=5,Nombre="Critico (Critical)", Descripcion="", AprobacionJefeRiesgo='T')
    db.CriterioRiesgo.update_or_insert((db.CriterioRiesgo.id==25),id=25, CriterioImpactoId=3,CriterioProbabilidadId=3,RiesgoValor=4,Nombre="Alto (High)", Descripcion="", AprobacionJefeRiesgo='T')
    '''

    db.CriterioRiesgo.update_or_insert((db.CriterioRiesgo.id==8), id=8, CriterioImpactoId=2,CriterioProbabilidadId=3,RiesgoValor=2,Nombre="Moderado (Moderate)", Descripcion="", AprobacionJefeRiesgo='T')
    db.CriterioRiesgo.update_or_insert((db.CriterioRiesgo.id==9), id=9, CriterioImpactoId=2,CriterioProbabilidadId=4,RiesgoValor=3,Nombre="Alto (High)", Descripcion="", AprobacionJefeRiesgo='T')
    db.CriterioRiesgo.update_or_insert((db.CriterioRiesgo.id==10), id=10, CriterioImpactoId=2,CriterioProbabilidadId=5,RiesgoValor=3,Nombre="Alto (High)", Descripcion="", AprobacionJefeRiesgo='T')
    db.CriterioRiesgo.update_or_insert((db.CriterioRiesgo.id==11), id=11, CriterioImpactoId=3,CriterioProbabilidadId=1,RiesgoValor=2,Nombre="Moderado (Moderate)", Descripcion="", AprobacionJefeRiesgo='T')
    db.CriterioRiesgo.update_or_insert((db.CriterioRiesgo.id==12), id=12, CriterioImpactoId=3,CriterioProbabilidadId=2,RiesgoValor=2,Nombre="Moderado (Moderate)", Descripcion="", AprobacionJefeRiesgo='T')
    db.CriterioRiesgo.update_or_insert((db.CriterioRiesgo.id==13), id=13, CriterioImpactoId=3,CriterioProbabilidadId=4,RiesgoValor=3,Nombre="Alto (High)", Descripcion="", AprobacionJefeRiesgo='T')
    db.CriterioRiesgo.update_or_insert((db.CriterioRiesgo.id==14), id=14, CriterioImpactoId=3,CriterioProbabilidadId=5,RiesgoValor=4,Nombre="Critico (Critical)", Descripcion="", AprobacionJefeRiesgo='T')
    db.CriterioRiesgo.update_or_insert((db.CriterioRiesgo.id==15), id=15, CriterioImpactoId=4,CriterioProbabilidadId=1,RiesgoValor=3,Nombre="Alto (High)", Descripcion="", AprobacionJefeRiesgo='T')
    db.CriterioRiesgo.update_or_insert((db.CriterioRiesgo.id==16), id=16, CriterioImpactoId=5,CriterioProbabilidadId=1,RiesgoValor=3,Nombre="Alto (High)", Descripcion="", AprobacionJefeRiesgo='T')
    db.CriterioRiesgo.update_or_insert((db.CriterioRiesgo.id==17), id=17, CriterioImpactoId=4,CriterioProbabilidadId=2,RiesgoValor=3,Nombre="Alto (High)", Descripcion="", AprobacionJefeRiesgo='T')
    db.CriterioRiesgo.update_or_insert((db.CriterioRiesgo.id==18), id=18, CriterioImpactoId=5,CriterioProbabilidadId=2,RiesgoValor=4,Nombre="Critico (Critical)", Descripcion="", AprobacionJefeRiesgo='T')
    db.CriterioRiesgo.update_or_insert((db.CriterioRiesgo.id==19),id=19, CriterioImpactoId=4,CriterioProbabilidadId=3,RiesgoValor=4,Nombre="Critico (Critical)", Descripcion="", AprobacionJefeRiesgo='T')
    db.CriterioRiesgo.update_or_insert((db.CriterioRiesgo.id==20),id=20, CriterioImpactoId=5,CriterioProbabilidadId=3,RiesgoValor=4,Nombre="Critico (Critical)", Descripcion="", AprobacionJefeRiesgo='T')
    db.CriterioRiesgo.update_or_insert((db.CriterioRiesgo.id==21),id=21, CriterioImpactoId=4,CriterioProbabilidadId=4,RiesgoValor=4,Nombre="Critico (Critical)", Descripcion="", AprobacionJefeRiesgo='T')
    db.CriterioRiesgo.update_or_insert((db.CriterioRiesgo.id==22),id=22, CriterioImpactoId=5,CriterioProbabilidadId=4,RiesgoValor=4,Nombre="Critico (Critical)", Descripcion="", AprobacionJefeRiesgo='T')
    db.CriterioRiesgo.update_or_insert((db.CriterioRiesgo.id==23),id=23, CriterioImpactoId=4,CriterioProbabilidadId=5,RiesgoValor=4,Nombre="Critico (Critical)", Descripcion="", AprobacionJefeRiesgo='T')
    db.CriterioRiesgo.update_or_insert((db.CriterioRiesgo.id==24),id=24, CriterioImpactoId=5,CriterioProbabilidadId=5,RiesgoValor=4,Nombre="Critico (Critical)", Descripcion="", AprobacionJefeRiesgo='T')
    db.CriterioRiesgo.update_or_insert((db.CriterioRiesgo.id==25),id=25, CriterioImpactoId=3,CriterioProbabilidadId=3,RiesgoValor=3,Nombre="Alto (High)", Descripcion="", AprobacionJefeRiesgo='T')


    #--------------
    #Organizacion
    #--------------
    db.Organizacion.update_or_insert((db.Organizacion.id==1), id=1, Nombre="Farmacias - La Salud", Descripcion="Ejemplo ficticio: Farmacia comercializadora de medicamentos.", Mision="Ayudar con medicinas de calidad a precios bajos.", Vision="Ser la mejor farmacia.", Valore="Respeto y honestidad.", Requerimiento="Nom035, Protección de datos LFPDPPP, ISO27000", Framework="ISO, COSO", Producto="Medicamentos y servicios de consulta medicas.", AprobacionJefeRiesgo='T')
    #-------------------------
    #ObjetivoOrganizacion
    #-------------------------
    db.ObjetivoOrganizacion.update_or_insert((db.ObjetivoOrganizacion.id==1), id=1, Nombre="Cumplir con leyes y regulaciones (LFPDPPP, SOX, NOM35, PCI, ISO).", TipoObjetivoId=1, Descripcion="", AprobacionJefeRiesgo='T')
    db.ObjetivoOrganizacion.update_or_insert((db.ObjetivoOrganizacion.id==2), id=2, Nombre="Proteger datos personales de clientes.", TipoObjetivoId=2, Descripcion="", AprobacionJefeRiesgo='T')
    db.ObjetivoOrganizacion.update_or_insert((db.ObjetivoOrganizacion.id==3), id=3, Nombre="Cumplir con los requerimientos de la Dirección General.", TipoObjetivoId=3, Descripcion="", AprobacionJefeRiesgo='T')
    db.ObjetivoOrganizacion.update_or_insert((db.ObjetivoOrganizacion.id==4), id=4, Nombre="Asegurar la disponibilidad de los sistemas al 99.99%.", TipoObjetivoId=4, Descripcion="", AprobacionJefeRiesgo='T')
    #-----------------
    #CatalogoPolitica
    #-----------------
    db.CatalogoPolitica.update_or_insert((db.CatalogoPolitica.id==1), id=1, Nombre="Política de seguridad de la información", Version="1.1", Descripcion="Política para cumplir con los requerimiento internos y externos sobre protección de la información.", AprobacionJefeRiesgo='T')
    db.CatalogoPolitica.update_or_insert((db.CatalogoPolitica.id==2), id=2, Nombre="Politica de Desarrollo Seguro", Version="1.1", Descripcion="Política con lineamientos para desarrollo seguro.", AprobacionJefeRiesgo='T')
    #-----------------
    #DetallePolitica
    #-----------------
    db.DetallePolitica.update_or_insert((db.DetallePolitica.id==1), id=1, CatalogoPoliticaId=1, Codigo="1", Nombre="La información se debe clasificar de acuerdo a su sensibilidad.", AprobacionJefeRiesgo='T')
    db.DetallePolitica.update_or_insert((db.DetallePolitica.id==2), id=2, CatalogoPoliticaId=1, Codigo="2", Nombre="Se deben implementar roles y perfiles con los privilegios mínimos necesarios para realizar sus funciones.", AprobacionJefeRiesgo='T')
    db.DetallePolitica.update_or_insert((db.DetallePolitica.id==3), id=3, CatalogoPoliticaId=1, Codigo="3", Nombre="Se deben establecer procesos de respaldo de información de acuerdo a los requerimientos de negocio.", AprobacionJefeRiesgo='T')
    db.DetallePolitica.update_or_insert((db.DetallePolitica.id==4), id=4, CatalogoPoliticaId=1, Codigo="4", Nombre="No se deben almacenar datos de tarjeta de crédito en texto claro.", AprobacionJefeRiesgo='T')
    db.DetallePolitica.update_or_insert((db.DetallePolitica.id==5), id=5, CatalogoPoliticaId=1, Codigo="5", Nombre="Se deben habilitar logs y/o bitacoras de auditoría que registren eventos críticos del sistema.", AprobacionJefeRiesgo='T')
    db.DetallePolitica.update_or_insert((db.DetallePolitica.id==6), id=6, CatalogoPoliticaId=2, Codigo="1", Nombre="Se deben implementar funciones de sanitización para evitar el ingreso de datos malformados en los campos de entrada de la aplicación.", AprobacionJefeRiesgo='T')
    #-----------------
    #RegionPolitica
    #-----------------
    #db.RegionPolitica.update_or_insert((db.RegionPolitica.id==1), id=1, RegionId=1, CatalogoPoliticaId=1, Version="1.1", Descripcion="Descripcion Política 1", AprobacionJefeRiesgo='T')
    #db.RegionPolitica.update_or_insert((db.RegionPolitica.id==2), id=2, RegionId=2, CatalogoPoliticaId=2, Version="1.1", Descripcion="Descripcion Política 2", AprobacionJefeRiesgo='T')
    #-------------------------
    #ClasificacionInformacion
    #-------------------------
    db.ClasificacionInformacion.update_or_insert((db.ClasificacionInformacion.id==1), id=1, Nombre="NA", Descripcion="NA", AprobacionJefeRiesgo='T')
    db.ClasificacionInformacion.update_or_insert((db.ClasificacionInformacion.id==2), id=2, Nombre="Publica", Descripcion="Una vez que se realiza la depuración de los datos y se les clasifica por su importancia y nivel necesario de protección para resguardarlos de daños de terceros, quedan datos que pueden ser expuestos a todo el personal. La exposición de estos datos no impacta a la organización.", AprobacionJefeRiesgo='T')
    db.ClasificacionInformacion.update_or_insert((db.ClasificacionInformacion.id==3), id=3, Nombre="Privada", Descripcion="Esta suele considerarse como la información que se dispone en cada uno de los departamentos y que es del conocimiento del personal que labora en estos. En efecto, esta información esta compuestas por datos que solo pueden ser entendidos y operados por el personal que maneja y crea dicha información con sus actividades, de aquí que la misma suele ser exclusiva de cada área, no pudiendo ser compartida con otros departamentos al menos que los duseño de la información determinen lo contrario.", AprobacionJefeRiesgo='T')
    db.ClasificacionInformacion.update_or_insert((db.ClasificacionInformacion.id==4), id=4, Nombre="Confidencial", Descripcion="Es aquel cumulo de datos que presentan un contenido generalizado, pero que solo puede estar a la vista de los altos ejecutivos. Algunos ejemplos son: secretos comerciales, contratos, datos personales, datos financieros. La exposición o afectación de estos datos puede impactar de manera negativa a la organización, causando multas, afectar la reputación de la organización, afectación de procesos críticos, entre otros.", AprobacionJefeRiesgo='T')
    #---------------
    #RegulacionDato
    #---------------
    db.RegulacionDato.update_or_insert((db.RegulacionDato.id==1), id=1, Nombre="NA", Version="NA", Descripcion="NA", AprobacionJefeRiesgo='T')
    db.RegulacionDato.update_or_insert((db.RegulacionDato.id==2), id=2, Nombre="LFPDPPP", Version="2010", Descripcion="La Ley Federal de Protección de Datos Personales en Posesión de Particulares (LFPDPPP), es un cuerpo normativo de México, aprobado por el Congreso de la Unión el 27 de abril de 2010, mismo que tiene como objetivo regular el derecho a la autodeterminación informativa. Esta Ley fue publicada el 5 de julio de 2010 en el Diario Oficial de la Federación y entró en vigor el 6 de julio de 2010. Sus disposiciones son aplicables a todas las personas físicas o morales, del sector público y privado, tanto a nivel federal como estatal, que lleven a cabo el tratamiento de datos personales en el ejercicio de sus actividades, por lo tanto empresas como bancos, aseguradoras, hospitales, escuelas, compañías de telecomunicaciones, asociaciones religiosas, y profesionistas como abogados, médicos, entre otros, se encuentran obligados a cumplir con lo que establece esta ley. LFPD Ley Federal de Protección de Datos.", AprobacionJefeRiesgo='T')
    db.RegulacionDato.update_or_insert((db.RegulacionDato.id==3), id=3, Nombre="PCI", Version="3.2.1", Descripcion="El Estándar de Seguridad de Datos para la Industria de Tarjeta de Pago (Payment Card Industry Data Security Standard) o PCI DSS fue desarrollado por un comité conformado por las compañías de tarjetas (débito y crédito) más importantes, comité denominado PCI SSC (Payment Card Industry Security Standards Council) como una guía que ayude a las organizaciones que procesan, almacenan y/o transmiten datos de tarjetahabientes (o titulares de tarjeta), a asegurar dichos datos, con el fin de evitar los fraudes que involucran tarjetas de pago débito y crédito.", AprobacionJefeRiesgo='T')
    db.RegulacionDato.update_or_insert((db.RegulacionDato.id==4), id=4, Nombre="ISO27000", Version="2013", Descripcion="La serie de normas ISO/IEC 27000 son estándares de seguridad publicados por la Organización Internacional para la Estandarización (ISO) y la Comisión Electrotécnica Internacional (IEC). La serie contiene las mejores prácticas recomendadas en Seguridad de la información para desarrollar, implementar y mantener Especificaciones para los Sistemas de Gestión de la Seguridad de la Información (SGSI). ", AprobacionJefeRiesgo='T')
    db.RegulacionDato.update_or_insert((db.RegulacionDato.id==5), id=5, Nombre="NIST Critical Infrastructure Cybersecurity", Version="1.1", Descripcion="Framework for Improving Critical Infrastructure Cybersecurity Version 1.1 National Institute of Standards and Technology April 16, 2018", AprobacionJefeRiesgo='T')
    #--------------------
    #RolResponsabilidad
    #--------------------
    db.RolResponsabilidad.update_or_insert((db.RolResponsabilidad.id==1), id=1, Rol="Dueño Información", Descripcion="Primera línea de defensa.", AprobacionJefeRiesgo='T')
    db.RolResponsabilidad.update_or_insert((db.RolResponsabilidad.id==2), id=2, Rol="Responsable Control", Descripcion="Primera línea de defensa.", AprobacionJefeRiesgo='T')
    db.RolResponsabilidad.update_or_insert((db.RolResponsabilidad.id==3), id=3, Rol="CISO", Descripcion="Primera línea de defensa.", AprobacionJefeRiesgo='T')
    db.RolResponsabilidad.update_or_insert((db.RolResponsabilidad.id==4), id=4, Rol="Administrador TI", Descripcion="Primera línea de defensa.", AprobacionJefeRiesgo='T')
    db.RolResponsabilidad.update_or_insert((db.RolResponsabilidad.id==5), id=5, Rol="Control Interno", Descripcion="Segunda línea de defensa.", AprobacionJefeRiesgo='T')
    db.RolResponsabilidad.update_or_insert((db.RolResponsabilidad.id==6), id=6, Rol="Auditor", Descripcion="Tercera línea de defensa.", AprobacionJefeRiesgo='T')
    #------------------
    #ActivoInformacion
    #------------------
    db.ActivoInformacion.update_or_insert((db.ActivoInformacion.id==1), id=1, Nombre="NA", DuenoInformacion="NA", Desripcion="", ClasificacionInformacionId=1, RegulacionDatoId=1, AprobacionJefeRiesgo='T')
    db.ActivoInformacion.update_or_insert((db.ActivoInformacion.id==2), id=2, Nombre="Datos Personales.", DuenoInformacion="informationOwner", Desripcion="", ClasificacionInformacionId=2, RegulacionDatoId=2, AprobacionJefeRiesgo='T')
    db.ActivoInformacion.update_or_insert((db.ActivoInformacion.id==3), id=3, Nombre="Datos de tarjeta de crédito.", DuenoInformacion="informationOwner", Desripcion="", ClasificacionInformacionId=3, RegulacionDatoId=3, AprobacionJefeRiesgo='T')
    db.ActivoInformacion.update_or_insert((db.ActivoInformacion.id==4), id=4, Nombre="Datos financieros.", DuenoInformacion="informationOwner", Desripcion="", ClasificacionInformacionId=4, RegulacionDatoId=4, AprobacionJefeRiesgo='T')
    #------------
    #TipoProceso
    #------------
    db.TipoProceso.update_or_insert((db.TipoProceso.id==1), id=1, Nombre="NA", Descripcion="NA", AprobacionJefeRiesgo='T')
    db.TipoProceso.update_or_insert((db.TipoProceso.id==2), id=2, Nombre="Estratégico/Administrativo", Descripcion="Procesos que definen las pautas, objetivos y politicas de una organización. Los procesos definen las estrategias de las organizaciones y, por lo general, son responsabilidad de los altos mandos. Se relacionan con la visión de la organización. Ejemplo: marketing, estudios de mercado.", AprobacionJefeRiesgo='T')
    db.TipoProceso.update_or_insert((db.TipoProceso.id==3), id=3, Nombre="Operativo/Clave", Descripcion="Procesos que generan el producto o servicio que se le dará al cliente; por ello, se considera que conforman la cadena de valor de la organización. Los diferentes departamentos o áreas de la organización, con todos sus recursos humanos, son responsables de realizarlos. Ayudan a cumplir la misión de la empresa. Ejemplo: elaboración de productos y atención al cliente.", AprobacionJefeRiesgo='T')
    db.TipoProceso.update_or_insert((db.TipoProceso.id==4), id=4, Nombre="Apoyo/Soporte", Descripcion="Procesos de sirven para controlar y mejorar la gestión de la empresa, así como ayudar a que los demás procesos se lleven a cabo. Ejemplo: compra de insumos, control de la documentación.", AprobacionJefeRiesgo='T')
    #--------
    #Proceso
    #--------
    db.Proceso.update_or_insert((db.Proceso.id==1), id=1, Nombre="NA", Descripcion="NA", Dueno="NA", Objetivo="NA", TipoProcesoId=1, AprobacionJefeRiesgo='T')
    db.Proceso.update_or_insert((db.Proceso.id==2), id=2, Nombre="Marketing", Descripcion="Proceso estratégico.", Dueno="processOwner", Objetivo="", TipoProcesoId=2, AprobacionJefeRiesgo='T')
    db.Proceso.update_or_insert((db.Proceso.id==3), id=3, Nombre="Estudio de mercado", Descripcion="Proceso estratégico.", Dueno="processOwner", Objetivo="", TipoProcesoId=2, AprobacionJefeRiesgo='T')
    db.Proceso.update_or_insert((db.Proceso.id==4), id=4, Nombre="Atención al cliente", Descripcion="Proceso operativo", Dueno="processOwner", Objetivo="", TipoProcesoId=3, AprobacionJefeRiesgo='T')
    db.Proceso.update_or_insert((db.Proceso.id==5), id=5, Nombre="Compra de insumos", Descripcion="Proceso de apoyo.", Dueno="processOwner", Objetivo="", TipoProcesoId=4, AprobacionJefeRiesgo='T')
    db.Proceso.update_or_insert((db.Proceso.id==6), id=6, Nombre="Control de la documentación", Descripcion="Proceso de apoyo", Dueno="processOwner", Objetivo="", TipoProcesoId=4, AprobacionJefeRiesgo='T')
    '''
    #--------------
    #ProcesoRegion
    #--------------
    db.ProcesoRegion.update_or_insert((db.ProcesoRegion.id==1), id=1, ProcesoId=2, RegionId=1, Descripcion="", AprobacionJefeRiesgo='T')
    db.ProcesoRegion.update_or_insert((db.ProcesoRegion.id==2), id=2, ProcesoId=3, RegionId=2, Descripcion="", AprobacionJefeRiesgo='T')
    db.ProcesoRegion.update_or_insert((db.ProcesoRegion.id==3), id=3, ProcesoId=4, RegionId=3, Descripcion="", AprobacionJefeRiesgo='T')
    db.ProcesoRegion.update_or_insert((db.ProcesoRegion.id==4), id=4, ProcesoId=5, RegionId=1, Descripcion="", AprobacionJefeRiesgo='T')
    db.ProcesoRegion.update_or_insert((db.ProcesoRegion.id==5), id=5, ProcesoId=6, RegionId=2, Descripcion="", AprobacionJefeRiesgo='T')
    '''
    #-------------------------
    #ProcesoActivoInformacion
    #-------------------------
    db.ProcesoActivoInformacion.update_or_insert((db.ProcesoActivoInformacion.id==1), id=1, ProcesoId=2, ActivoInformacionId=2, AprobacionJefeRiesgo='T' )
    db.ProcesoActivoInformacion.update_or_insert((db.ProcesoActivoInformacion.id==2), id=2, ProcesoId=3, ActivoInformacionId=3, AprobacionJefeRiesgo='T' )
    db.ProcesoActivoInformacion.update_or_insert((db.ProcesoActivoInformacion.id==3), id=3, ProcesoId=4, ActivoInformacionId=4, AprobacionJefeRiesgo='T' )
    db.ProcesoActivoInformacion.update_or_insert((db.ProcesoActivoInformacion.id==4), id=4, ProcesoId=5, ActivoInformacionId=2, AprobacionJefeRiesgo='T' )
    db.ProcesoActivoInformacion.update_or_insert((db.ProcesoActivoInformacion.id==5), id=5, ProcesoId=6, ActivoInformacionId=3, AprobacionJefeRiesgo='T' )
    #----------------
    #TipoCapaSistema
    #----------------
    db.TipoCapaSistema.update_or_insert((db.TipoCapaSistema.id==1), id=1, Nombre="NA", Descripcion="NA", AprobacionJefeRiesgo='T')
    db.TipoCapaSistema.update_or_insert((db.TipoCapaSistema.id==2), id=2, Nombre="Sistema Operativo", Descripcion="Sistema operativo donde residen aplicaciones.", AprobacionJefeRiesgo='T')
    db.TipoCapaSistema.update_or_insert((db.TipoCapaSistema.id==3), id=3, Nombre="Base de Datos", Descripcion="Sistema manejador de bases de datos, y/o modelo de datos.", AprobacionJefeRiesgo='T')
    db.TipoCapaSistema.update_or_insert((db.TipoCapaSistema.id==4), id=4, Nombre="Aplicacion", Descripcion="Aplicaciones Web, APIs, WebServices", AprobacionJefeRiesgo='T')
    db.TipoCapaSistema.update_or_insert((db.TipoCapaSistema.id==5), id=5, Nombre="Red", Descripcion="Red de dispositivos/nodos interconectados entre si por medios fisicos/logicos", AprobacionJefeRiesgo='T')
    #-----------------------
    #TipoIncidenteSeguridad
    #-----------------------
    db.TipoIncidenteSeguridad.update_or_insert((db.TipoIncidenteSeguridad.id==1), id=1, Nombre="Fuga de información", AprobacionJefeRiesgo='T')
    db.TipoIncidenteSeguridad.update_or_insert((db.TipoIncidenteSeguridad.id==2), id=2, Nombre="Infección por malware", AprobacionJefeRiesgo='T')
    db.TipoIncidenteSeguridad.update_or_insert((db.TipoIncidenteSeguridad.id==3), id=3, Nombre="Ataque web", AprobacionJefeRiesgo='T')
    db.TipoIncidenteSeguridad.update_or_insert((db.TipoIncidenteSeguridad.id==4), id=4, Nombre="Ingeniería social", AprobacionJefeRiesgo='T')
    db.TipoIncidenteSeguridad.update_or_insert((db.TipoIncidenteSeguridad.id==5), id=5, Nombre="Denegación de servicio", AprobacionJefeRiesgo='T')
    #----------------
    #AnalisisRiesgo
    #----------------
    db.AnalisisRiesgo.update_or_insert((db.AnalisisRiesgo.id==1), id=1, Riesgo="Riesgo estratégico de TI", TipoTratamientoRiesgoId=1, CriterioImpactoId=1, DuenoRiesgo="riskOwner", AnalistaRiesgo="riskOwner", RiesgoMaterializado="En un mundo rápidamente cambiante, el riesgo que emana de una estrategia inefectiva de TI se encuentra entre las principales amenazas que una institución financiera enfrenta.", NivelRiesgo="Bajo (Low)",  AprobacionJefeRiesgo='T')
    db.AnalisisRiesgo.update_or_insert((db.AnalisisRiesgo.id==2), id=2, Riesgo="Riesgo de seguridad cibernética y respuesta ante incidentes", TipoTratamientoRiesgoId=2, CriterioImpactoId=3, DuenoRiesgo="riskOwner", AnalistaRiesgo="riskAnalyst", RiesgoMaterializado="Muchos reportes de ataques cibernéticos, rupturas de la privacidad de los datos, y mala conducta de compañías importantes han colocado la seguridad cibernética en lo alto de las agendas de las juntas. Los directores necesitan entender el punto de vista que la administración tiene de los ataques cibernéticos, la potencial probabilidad y los impactos de los eventos de riesgo, y los pasos dados para abordar los riesgos. Ni es práctico ni es posible proteger igualmente todos los activos digitales; además de tener capacidades cibernéticas fundamentales a través de la institución, las joyas de la corona deben ser identificadas y protegidas adicionalmente. La administración tiene que estar vigilante en la identificación de las amenazas emergentes y en la implementación de mecanismos efectivos para mitigarlas. Finalmente, la vigilancia en la seguridad cibernética – controles de acceso, protocolos de seguridad, y similares – no deben ocultar el objetivo de la institución de ser fácil hacer negocios con ella. Ello puede ser un balance difícil de lograr.", NivelRiesgo="Moderado (Moderate)", AprobacionJefeRiesgo='T')
    db.AnalisisRiesgo.update_or_insert((db.AnalisisRiesgo.id==3), id=3, Riesgo="Capacidad de recuperación de TI y riesgo de continuidad", TipoTratamientoRiesgoId=3, CriterioImpactoId=2, DuenoRiesgo="riskOwner", AnalistaRiesgo="riskAnalyst", RiesgoMaterializado="Con la tecnología facilitando virtualmente cada actividad en los servicios financieros, la TI de la organización tiene que tener capacidad de recuperación ante disrupciones y cortes. La organización debe tener estándares de capacidad de recuperación de manera que las inversiones en capacidad de recuperación se dirijan a la tecnología que respalde sus procesos de negocio más críticos. La prueba de la recuperación, especialmente para la tecnología crítica, tiene que ser rigurosa y tiene que verificar que los planes de recuperación funcionarán.", NivelRiesgo="Alto (High)", AprobacionJefeRiesgo='T')
    db.AnalisisRiesgo.update_or_insert((db.AnalisisRiesgo.id==4), id=4, Riesgo="Riesgo de proveedor de tecnología y de terceros", TipoTratamientoRiesgoId=1, CriterioImpactoId=4, DuenoRiesgo="riskOwner", AnalistaRiesgo="riskAnalyst", RiesgoMaterializado="Como los acuerdos con vendedores y proveedores de servicio, socios de negocios conjuntos, y otras partes que son terceros proliferan en los servicios financieros, así también los riesgos. Además, el propio riesgo de tecnología de terceros puede generar riesgos operacionales, financieros, de reputación, y otros riesgos para las instituciones que usan sus servicios. ", NivelRiesgo="Critico (Critical)", AprobacionJefeRiesgo='T')
    db.AnalisisRiesgo.update_or_insert((db.AnalisisRiesgo.id==5), id=5, Riesgo="Riesgo de administración de datos", TipoTratamientoRiesgoId=2, CriterioImpactoId=5, DuenoProceso="processOwner", DuenoRiesgo="riskOwner", RiesgoMaterializado="La administración inefectiva de los datos en una institución financiera puede abrir la puerta al fraude financiero, a problemas de presentación de reportes de contabilidad y regulatorios, y a pérdida de la confianza de los stakeholders. Las agencias reguladoras están expresando fuerte interés en las capacidades de administración de datos, dado que la administración del riesgo y del capital dependen de datos confiables, exactos, y oportunos. Además, las instituciones financieras de manera creciente están combinando datos externos con datos internos, adicionando nuevos niveles de complejidad a la administración de los datos y, potencialmente, nuevos riesgos.", NivelRiesgo="Alto (High)", AprobacionJefeRiesgo='T')
    db.AnalisisRiesgo.update_or_insert((db.AnalisisRiesgo.id==6), id=6, Riesgo="Riesgo de ejecución del programa TI", TipoTratamientoRiesgoId=3, CriterioImpactoId=1, DuenoProceso="processOwner", DuenoRiesgo="riskOwner", RiesgoMaterializado="En cualquier momento, una institución financiera grande tendrá en desarrollo múltiples programas de TI a través de las funciones organizacionales y las regiones geográficas. Esos programas presentan riesgos, tales como sobrecostos en relación con el presupuesto, demoras, y falla en entregar los resultados de negocio que se tienen como objetivo. Los generadores del riesgo incluyen programas desalineados con los objetivos estratégicos, reglamentos del programa que fallan en abordar los riesgos, carencia de gobierno del programa, ejecución irregular, mala asignación de recursos, y carencia de comunicación formal. La administración del programa de TI también es crítica para el éxito de cualquier fusión o adquisición que combinará sistemas de TI.", NivelRiesgo="Moderado (Moderate)", AprobacionJefeRiesgo='T')
    db.AnalisisRiesgo.update_or_insert((db.AnalisisRiesgo.id==7), id=7, Riesgo="Riesgo de operaciones de tecnología", TipoTratamientoRiesgoId=1, CriterioImpactoId=2, DuenoProceso="processOwner", DuenoRiesgo="riskOwner", RiesgoMaterializado="La administración debe asegurar que estén en funcionamiento procesos operacionales rigurosos para proteger la integridad del entorno de la tecnología. La TI necesita entregar los servicios en los niveles acordados con el negocio, administrar la capacidad, entender y administrar sus activos, cumplir con los acuerdos de licencia de software, y administrar de manera efectiva los incidentes y los problemas. Las arquitecturas que no son estándar y complejas pueden menoscabar la capacidad para satisfacer los objetivos del desempeño del servicio. Un proceso débil de administración de incidentes conduce a la solución inoportuna e inconsistente de los problemas, y a oportunidades perdidas para fortalecer los procesos.", NivelRiesgo="Bajo (Low)", AprobacionJefeRiesgo='T')
    db.AnalisisRiesgo.update_or_insert((db.AnalisisRiesgo.id==8), id=8, Riesgo="Riesgo de administración inefectiva del riesgo", TipoTratamientoRiesgoId=2, CriterioImpactoId=3, DuenoRiesgo="riskOwner", AnalistaRiesgo="riskAnalyst", RiesgoMaterializado="Para abordar el riesgo tradicionalmente las instituciones financieras siguen el modelo de las tres líneas de defensa. La primera línea de defensa, propietarios de producto y procesos, identifica y administra el riesgo. La segunda línea, frecuentemente ejecutada por las funciones de riesgo y cumplimiento, proporciona la estructura de administración del riesgo y la vigilancia independiente de la primera línea. La tercera línea, usualmente auditoría interna, proporciona a la junta y a la administración senior aseguramiento independiente sobre la efectividad de las primeras dos líneas de defensa. Encontrar el modelo operacional correcto para permitir la administración efectiva del riesgo de tecnología ofrece retos. La función del riesgo puede tener la experticia en administración del riesgo, pero carencia de conocimiento sobre la tecnología que le permitiría ofrecer luces sólidas sobre el entorno de TI. Inversamente, la función de TI tiene el conocimiento de la tecnología, pero carece de la independencia necesaria para proporcionar un punto de vista no sesgado sobre el riesgo. Considerando la importancia que hoy tiene el riesgo de tecnología, las organizaciones necesitan mejorar el desarrollo de habilidades y de patrones de carrera en la administración del riesgo de tecnología. De hecho, la demostración de las habilidades tanto en tecnología como en administración del riesgo podrían ser criterios adicionales para posiciones de administración tales como el CIO o el CRO.", NivelRiesgo="Alto (High)", AprobacionJefeRiesgo='T')
    #------------------------------------
    #AnalisisRiesgoClasificacionRiesgo
    #------------------------------------
    db.AnalisisRiesgoClasificacionRiesgo.update_or_insert((db.AnalisisRiesgoClasificacionRiesgo.id==1), id=1, AnalisisRiesgoId=1, ClasificacionRiesgoId=1, AprobacionJefeRiesgo='T' )
    db.AnalisisRiesgoClasificacionRiesgo.update_or_insert((db.AnalisisRiesgoClasificacionRiesgo.id==2), id=2, AnalisisRiesgoId=2, ClasificacionRiesgoId=2, AprobacionJefeRiesgo='T' )
    db.AnalisisRiesgoClasificacionRiesgo.update_or_insert((db.AnalisisRiesgoClasificacionRiesgo.id==3), id=3, AnalisisRiesgoId=3, ClasificacionRiesgoId=3, AprobacionJefeRiesgo='T' )
    db.AnalisisRiesgoClasificacionRiesgo.update_or_insert((db.AnalisisRiesgoClasificacionRiesgo.id==4), id=4, AnalisisRiesgoId=4, ClasificacionRiesgoId=2, AprobacionJefeRiesgo='T' )
    db.AnalisisRiesgoClasificacionRiesgo.update_or_insert((db.AnalisisRiesgoClasificacionRiesgo.id==5), id=5, AnalisisRiesgoId=5, ClasificacionRiesgoId=3, AprobacionJefeRiesgo='T' )
    db.AnalisisRiesgoClasificacionRiesgo.update_or_insert((db.AnalisisRiesgoClasificacionRiesgo.id==6), id=6, AnalisisRiesgoId=6, ClasificacionRiesgoId=1, AprobacionJefeRiesgo='T' )
    db.AnalisisRiesgoClasificacionRiesgo.update_or_insert((db.AnalisisRiesgoClasificacionRiesgo.id==7), id=7, AnalisisRiesgoId=7, ClasificacionRiesgoId=2, AprobacionJefeRiesgo='T' )
    db.AnalisisRiesgoClasificacionRiesgo.update_or_insert((db.AnalisisRiesgoClasificacionRiesgo.id==8), id=8, AnalisisRiesgoId=8, ClasificacionRiesgoId=3, AprobacionJefeRiesgo='T' )
    #------------------------------------
    #AnalisisRiesgoObjetivoOrganizacion
    #------------------------------------
    db.AnalisisRiesgoObjetivoOrganizacion.update_or_insert((db.AnalisisRiesgoObjetivoOrganizacion.id==1), id=1, AnalisisRiesgoId=1, ObjetivoOrganizacionId=1, AprobacionJefeRiesgo='T' )
    db.AnalisisRiesgoObjetivoOrganizacion.update_or_insert((db.AnalisisRiesgoObjetivoOrganizacion.id==2), id=2, AnalisisRiesgoId=2, ObjetivoOrganizacionId=2, AprobacionJefeRiesgo='T' )
    db.AnalisisRiesgoObjetivoOrganizacion.update_or_insert((db.AnalisisRiesgoObjetivoOrganizacion.id==3), id=3, AnalisisRiesgoId=3, ObjetivoOrganizacionId=3, AprobacionJefeRiesgo='T' )
    db.AnalisisRiesgoObjetivoOrganizacion.update_or_insert((db.AnalisisRiesgoObjetivoOrganizacion.id==4), id=4, AnalisisRiesgoId=4, ObjetivoOrganizacionId=1, AprobacionJefeRiesgo='T' )
    db.AnalisisRiesgoObjetivoOrganizacion.update_or_insert((db.AnalisisRiesgoObjetivoOrganizacion.id==5), id=5, AnalisisRiesgoId=5, ObjetivoOrganizacionId=2, AprobacionJefeRiesgo='T' )
    db.AnalisisRiesgoObjetivoOrganizacion.update_or_insert((db.AnalisisRiesgoObjetivoOrganizacion.id==6), id=6, AnalisisRiesgoId=6, ObjetivoOrganizacionId=3, AprobacionJefeRiesgo='T' )
    db.AnalisisRiesgoObjetivoOrganizacion.update_or_insert((db.AnalisisRiesgoObjetivoOrganizacion.id==7), id=7, AnalisisRiesgoId=7, ObjetivoOrganizacionId=1, AprobacionJefeRiesgo='T' )
    db.AnalisisRiesgoObjetivoOrganizacion.update_or_insert((db.AnalisisRiesgoObjetivoOrganizacion.id==8), id=8, AnalisisRiesgoId=8, ObjetivoOrganizacionId=2, AprobacionJefeRiesgo='T' )
    db.AnalisisRiesgoObjetivoOrganizacion.update_or_insert((db.AnalisisRiesgoObjetivoOrganizacion.id==9), id=9, AnalisisRiesgoId=1, ObjetivoOrganizacionId=3, AprobacionJefeRiesgo='T' )
    db.AnalisisRiesgoObjetivoOrganizacion.update_or_insert((db.AnalisisRiesgoObjetivoOrganizacion.id==10), id=10, AnalisisRiesgoId=2, ObjetivoOrganizacionId=1, AprobacionJefeRiesgo='T' )
    db.AnalisisRiesgoObjetivoOrganizacion.update_or_insert((db.AnalisisRiesgoObjetivoOrganizacion.id==11), id=11, AnalisisRiesgoId=3, ObjetivoOrganizacionId=2, AprobacionJefeRiesgo='T' )
    db.AnalisisRiesgoObjetivoOrganizacion.update_or_insert((db.AnalisisRiesgoObjetivoOrganizacion.id==12), id=12, AnalisisRiesgoId=4, ObjetivoOrganizacionId=3, AprobacionJefeRiesgo='T' )
    db.AnalisisRiesgoObjetivoOrganizacion.update_or_insert((db.AnalisisRiesgoObjetivoOrganizacion.id==13), id=13, AnalisisRiesgoId=5, ObjetivoOrganizacionId=3, AprobacionJefeRiesgo='T' )
    #---------------
    #TipoRevision
    #---------------
    db.TipoRevision.update_or_insert((db.TipoRevision.id==1), id=1, Nombre="Auto Control (Self Assessment)", Descripcion="Revisión de control regularmente realizada las funciones que son propietarias de los riesgos y los gestionan (primera linea de defensa).", AprobacionJefeAuditoria='T')
    db.TipoRevision.update_or_insert((db.TipoRevision.id==2), id=2, Nombre="Diseño de control (Control Design)", Descripcion="Revisión efectuada regularmente por las funciones que supervisan los riesgos (segunda linea de defensa).", AprobacionJefeAuditoria='T')
    db.TipoRevision.update_or_insert((db.TipoRevision.id==3), id=3, Nombre="Auditoria (Audit)", Descripcion="Revisión efecutada regularmente por las funciones que proporcionan aseguramiento independiente (tercera linea de defensa).", AprobacionJefeAuditoria='T')
    db.TipoRevision.update_or_insert((db.TipoRevision.id==4), id=4, Nombre="Análisis de Brechas (Gap Analysis)", Descripcion="Análisis realizado contra un framework, estandar, marco de trabajo, para conocer el nivel de cumplimiento y definir un plan de acción.", AprobacionJefeAuditoria='T')

    #------------------
    #CVSS GrupoMetrica
    #------------------
    db.GrupoMetrica.update_or_insert((db.GrupoMetrica.id==1), id=1, Nombre="Base Metric Group", Descripcion="The Base metric group represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments. It is composed of two sets of metrics: the Exploitability metrics and the Impact metrics. The Exploitability metrics reflect the ease and technical means by which the vulnerability can be exploited. That is, they represent characteristics of the thing that is vulnerable, which we refer to formally as the vulnerable component. On the other hand, the Impact metrics reflect the direct consequence of a successful exploit, and represent the consequence to the thing that suffers the impact, which we refer to formally as the impacted component.", AprobacionJefeRiesgo='T' )
    db.GrupoMetrica.update_or_insert((db.GrupoMetrica.id==2), id=2, Nombre="Temporal Metric Group", Descripcion="The Temporal metric group reflects the characteristics of a vulnerability that may change over time but not across user environments. For example, the presence of a simple-to-use exploit kit would increase the CVSS score, while the creation of an official patch would decrease it.", AprobacionJefeRiesgo='T' )
    db.GrupoMetrica.update_or_insert((db.GrupoMetrica.id==3), id=3, Nombre="Environmental Metric Group", Descripcion="The Environmental metric group represents the characteristics of a vulnerability that are relevant and unique to a particular user’s environment. These metrics allow the scoring analyst to incorporate security controls which may mitigate any consequences, as well as promote or demote the importance of a vulnerable system according to her business risk.", AprobacionJefeRiesgo='T' )
    #------------------
    #CVSS Metrica
    #------------------
    db.Metrica.update_or_insert((db.Metrica.id==1), id=1, GrupoMetricaId=1, Nombre="Attack Vector (AV)", Descripcion="This metric reflects the context by which vulnerability exploitation is possible. This metric value (and consequently the Base score) will be larger the more remote (logically, and physically) an attacker can be in order to exploit the vulnerable component. The assumption is that the number of potential attackers for a vulnerability that could be exploited from across the Internet is larger than the number of potential attackers that could exploit a vulnerability requiring physical access to a device, and therefore warrants a greater score.", Codigo="AV", AprobacionJefeRiesgo='T' )
    db.Metrica.update_or_insert((db.Metrica.id==2), id=2, GrupoMetricaId=1, Nombre="Attack Complexity (AC)", Descripcion="This metric describes the conditions beyond the attacker’s control that must exist in order to exploit the vulnerability. As described below, such conditions may require the collection of more information about the target, the presence of certain system configuration settings, or computational exceptions. Importantly, the assessment of this metric excludes any requirements for user interaction in order to exploit the vulnerability (such conditions are captured in the User Interaction metric). This metric value is largest for the least complex attacks.", Codigo="AC", AprobacionJefeRiesgo='T' )
    db.Metrica.update_or_insert((db.Metrica.id==3), id=3, GrupoMetricaId=1, Nombre="Privileges Required (PR)", Descripcion="This metric describes the level of privileges an attacker must possess before successfully exploiting the vulnerability. This metric if greatest if no privileges are required.", Codigo="PR", AprobacionJefeRiesgo='T' )
    db.Metrica.update_or_insert((db.Metrica.id==4), id=4, GrupoMetricaId=1, Nombre="User Interaction (UI)", Descripcion="This metric captures the requirement for a user, other than the attacker, to participate in the successful compromise of the vulnerable component. This metric determines whether the vulnerability can be exploited solely at the will of the attacker, or whether a separate user (or user-initiated process) must participate in some manner. This metric value is greatest when no user interaction is required.", Codigo="UI", AprobacionJefeRiesgo='T' )
    db.Metrica.update_or_insert((db.Metrica.id==5), id=5, GrupoMetricaId=1, Nombre="Scope (S)", Descripcion="An important property captured by CVSS v3.0 is the ability for a vulnerability in one software component to impact resources beyond its means, or privileges. This consequence is represented by the metric Authorization Scope, or simply Scope. Formally, Scope refers to the collection of privileges defined by a computing authority (e.g. an application, an operating system, or a sandbox environment) when granting access to computing resources (e.g. files, CPU, memory, etc). These privileges are assigned based on some method of identification and authorization. When the vulnerability of a software component governed by one authorization scope is able to affect resources governed by another authorization scope, a Scope change has occurred.", Codigo="S", AprobacionJefeRiesgo='T' )
    db.Metrica.update_or_insert((db.Metrica.id==6), id=6, GrupoMetricaId=1, Nombre="Confidentiality (C)", Descripcion="This metric measures the impact to the confidentiality of the information resources managed by a software component due to a successfully exploited vulnerability. Confidentiality refers to limiting information access and disclosure to only authorized users, as well as preventing access by, or disclosure to, unauthorized ones", Codigo="C", AprobacionJefeRiesgo='T' )
    db.Metrica.update_or_insert((db.Metrica.id==7), id=7, GrupoMetricaId=1, Nombre="Integrity (I)", Descripcion="This metric measures the impact to integrity of a successfully exploited vulnerability. Integrity refers to the trustworthiness and veracity of information.", Codigo="I", AprobacionJefeRiesgo='T' )
    db.Metrica.update_or_insert((db.Metrica.id==8), id=8, GrupoMetricaId=1, Nombre="Availability (A)", Descripcion="This metric measures the impact to the availability of the impacted component resulting from a successfully exploited vulnerability. While the Confidentiality and Integrity impact metrics apply to the loss of confidentiality or integrity of data (e.g., information, files) used by the impacted component, this metric refers to the loss of availability of the impacted component itself, such as a networked service (e.g., web, database, email). Since availability refers to the accessibility of information resources, attacks that consume network bandwidth, processor cycles, or disk space all impact the availability of an impacted component.", Codigo="A", AprobacionJefeRiesgo='T' )
    db.Metrica.update_or_insert((db.Metrica.id==9), id=9, GrupoMetricaId=2, Nombre="Exploit Code Maturity (E)", Descripcion="This metric measures the likelihood of the vulnerability being attacked, and is typically based on the current state of exploit techniques, exploit code availability, or active, “in-the-wild” exploitation. Public availability of easy-to-use exploit code increases the number of potential attackers by including those who are unskilled, thereby increasing the severity of the vulnerability. Initially, real-world exploitation may only be theoretical. Publication of proof-of-concept code, functional exploit code, or sufficient technical details necessary to exploit the vulnerability may follow. Furthermore, the exploit code available may progress from a proof-of-concept demonstration to exploit code that is successful in exploiting the vulnerability consistently. In severe cases, it may be delivered as the payload of a network-based worm or virus or other automated attack tools.", Codigo="E", AprobacionJefeRiesgo='T' )
    db.Metrica.update_or_insert((db.Metrica.id==10), id=10, GrupoMetricaId=2, Nombre="Remediation Level (RL)", Descripcion="The Remediation Level of vulnerability is an important factor for prioritization. The typical vulnerability is unpatched when initially published. Workarounds or hotfixes may offer interim remediation until an official patch or upgrade is issued. Each of these respective stages adjusts the temporal score downwards, reflecting the decreasing urgency as remediation becomes final.", Codigo="RL", AprobacionJefeRiesgo='T' )
    db.Metrica.update_or_insert((db.Metrica.id==11), id=11, GrupoMetricaId=2, Nombre="Report Confidence (RC)", Descripcion="This metric measures the degree of confidence in the existence of the vulnerability and the credibility of the known technical details. Sometimes only the existence of vulnerabilities are publicized, but without specific details. For example, an impact may be recognized as undesirable, but the root cause may not be known. The vulnerability may later be corroborated by research which suggests where the vulnerability may lie, though the research may not be certain. Finally, a vulnerability may be confirmed through acknowledgement by the author or vendor of the affected technology. The urgency of a vulnerability is higher when a vulnerability is known to exist with certainty.", Codigo="RC", AprobacionJefeRiesgo='T' )
    db.Metrica.update_or_insert((db.Metrica.id==12), id=12, GrupoMetricaId=3, Nombre="Confidentiality Requirement (CR)", Descripcion="", Codigo="CR", AprobacionJefeRiesgo='T' )
    db.Metrica.update_or_insert((db.Metrica.id==13), id=13, GrupoMetricaId=3, Nombre="Integrity Requirement (IR)", Descripcion="", Codigo="IR", AprobacionJefeRiesgo='T' )
    db.Metrica.update_or_insert((db.Metrica.id==14), id=14, GrupoMetricaId=3, Nombre="Availability Requirement (AR)", Descripcion="", Codigo="AR", AprobacionJefeRiesgo='T' )
    db.Metrica.update_or_insert((db.Metrica.id==15), id=15, GrupoMetricaId=3, Nombre="Modified Attack Vector (MAV)", Descripcion="", Codigo="MAV", AprobacionJefeRiesgo='T' )
    db.Metrica.update_or_insert((db.Metrica.id==16), id=16, GrupoMetricaId=3, Nombre="Modified Attack Complexity (MAC)", Descripcion="", Codigo="MAC", AprobacionJefeRiesgo='T' )
    db.Metrica.update_or_insert((db.Metrica.id==17), id=17, GrupoMetricaId=3, Nombre="Modified Privileges Required (MPR)", Descripcion="", Codigo="MPR", AprobacionJefeRiesgo='T' )
    db.Metrica.update_or_insert((db.Metrica.id==18), id=18, GrupoMetricaId=3, Nombre="Modified User Interaction (MUI)", Descripcion="", Codigo="MUI", AprobacionJefeRiesgo='T' )
    db.Metrica.update_or_insert((db.Metrica.id==19), id=19, GrupoMetricaId=3, Nombre="Modified Scope (MS)", Descripcion="", Codigo="MS", AprobacionJefeRiesgo='T' )
    db.Metrica.update_or_insert((db.Metrica.id==20), id=20, GrupoMetricaId=3, Nombre="Modified Confidentiality (MC)", Descripcion="", Codigo="MC", AprobacionJefeRiesgo='T' )
    db.Metrica.update_or_insert((db.Metrica.id==21), id=21, GrupoMetricaId=3, Nombre="Modified Integrity (MI)", Descripcion="", Codigo="MI", AprobacionJefeRiesgo='T' )
    db.Metrica.update_or_insert((db.Metrica.id==22), id=22, GrupoMetricaId=3, Nombre="Modified Availability (MA)", Descripcion="", Codigo="MA", AprobacionJefeRiesgo='T' )
    #------------------
    #Valor Metrica
    #------------------
    db.ValorMetrica.update_or_insert((db.ValorMetrica.id==1), id=1, MetricaId=1, Nombre="Network (N)", Descripcion="A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed “remotely exploitable” and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers). An example of a network attack is an attacker causing a denial of service (DoS) by sending a specially crafted TCP packet from across the public Internet (e.g. CVE-2004-0230).", ValorMetrica="N", ValorNumerico="0.85", AprobacionJefeRiesgo='T' )
    db.ValorMetrica.update_or_insert((db.ValorMetrica.id==2), id=2, MetricaId=1, Nombre="Adjacent (A)", Descripcion="A vulnerability exploitable with adjacent network access means the vulnerable component is bound to the network stack, however the attack is limited to the same shared physical (e.g. Bluetooth, IEEE 802.11), or logical (e.g. local IP subnet) network, and cannot be performed across an OSI layer 3 boundary (e.g. a router). An example of an Adjacent attack would be an ARP (IPv4) or neighbor discovery (IPv6) flood leading to a denial of service on the local LAN segment. See also CVE-2013-6014", ValorMetrica="A", ValorNumerico="0.62", AprobacionJefeRiesgo='T' )
    db.ValorMetrica.update_or_insert((db.ValorMetrica.id==3), id=3, MetricaId=1, Nombre="Local (L)", Descripcion="A vulnerability exploitable with Local access means that the vulnerable component is not bound to the network stack, and the attacker’s path is via read/write/execute capabilities. In some cases, the attacker may be logged in locally in order to exploit the vulnerability, otherwise, she may rely on User Interaction to execute a malicious file.", ValorMetrica="L", ValorNumerico="0.55", AprobacionJefeRiesgo='T' )
    db.ValorMetrica.update_or_insert((db.ValorMetrica.id==4), id=4, MetricaId=1, Nombre="Physical (P)", Descripcion="A vulnerability exploitable with Physical access requires the attacker to physically touch or manipulate the vulnerable component. Physical interaction may be brief (e.g. evil maid attack 1 ) or persistent. An example of such an attack is a cold boot attack which allows an attacker to access to disk encryption keys after gaining physical access to the system, or peripheral attacks such as Firewire/USB Direct Memory Access attacks.", ValorMetrica="P", ValorNumerico="0.20", AprobacionJefeRiesgo='T' )
    db.ValorMetrica.update_or_insert((db.ValorMetrica.id==5), id=5, MetricaId=2, Nombre="High (H)", Descripcion="A successful attack depends on conditions beyond the attacker's control. That is, a successful attack cannot be accomplished at will, but requires the attacker to invest in some measurable amount of effort in preparation or execution against the vulnerable component before a successful attack can be expected. For example, a successful attack may depend on an attacker overcoming any of the following conditions: The attacker must conduct target-specific reconnaissance. For example, on target configuration settings, sequence numbers, shared secrets, etc. The attacker must prepare the target environment to improve exploit reliability. For example, repeated exploitation to win a race condition, or overcoming advanced exploit mitigation techniques. The attacker must inject herself into the logical network path between the target and the resource requested by the victim in order to read and/or modify network communications (e.g. man in the middle attack).", ValorMetrica="H", ValorNumerico="0.44", AprobacionJefeRiesgo='T' )
    db.ValorMetrica.update_or_insert((db.ValorMetrica.id==6), id=6, MetricaId=2, Nombre="Low (L)", Descripcion="Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.", ValorMetrica="L", ValorNumerico="0.77", AprobacionJefeRiesgo='T')
    db.ValorMetrica.update_or_insert((db.ValorMetrica.id==7), id=7, MetricaId=3, Nombre="High (H)", Descripcion="The attacker is authorized with (i.e requires) privileges that provide significant (e.g. administrative) control over the vulnerable component that could affect component-wide settings and files.", ValorMetrica="H", ValorNumerico="0.27", AprobacionJefeRiesgo='T' )
    db.ValorMetrica.update_or_insert((db.ValorMetrica.id==8), id=8, MetricaId=3, Nombre="Low (L)", Descripcion="The attacker is authorized with (i.e. requires) privileges that provide basic user capabilities that could normally affect only settings and files owned by a user. Alternatively, an attacker with Low privileges may have the ability to cause an impact only to non-sensitive resources.", ValorMetrica="L", ValorNumerico="0.62", AprobacionJefeRiesgo='T' )
    db.ValorMetrica.update_or_insert((db.ValorMetrica.id==9), id=9, MetricaId=3, Nombre="None (N)", Descripcion="The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.", ValorMetrica="N", ValorNumerico="0.85", AprobacionJefeRiesgo='T')
    db.ValorMetrica.update_or_insert((db.ValorMetrica.id==10), id=10, MetricaId=4, Nombre="Required (R)", Descripcion="Successful exploitation of thi vulnerability requires a user to take some action before the vulnerability can be exploited. For example, a successful exploit may only be possible during the installation of an application by a system administrator.", ValorMetrica="R", ValorNumerico="0.62", AprobacionJefeRiesgo='T' )
    db.ValorMetrica.update_or_insert((db.ValorMetrica.id==11), id=11, MetricaId=4, Nombre="None (N)", Descripcion="The vulnerable system can be exploited without interaction from any user.", ValorMetrica="N", ValorNumerico="0.85", AprobacionJefeRiesgo='T' )
    #----------------------------------
    #Base Metric Group | S | Scope (S)	
    #----------------------------------
    db.ValorMetrica.update_or_insert((db.ValorMetrica.id==12), id=12, MetricaId=5, Nombre="Changed (C)", Descripcion="An exploited vulnerability can affect resources beyond the authorization privileges intended by the vulnerable component. In this case the vulnerable component and the impacted component are different.", ValorMetrica="C", ValorNumerico="7.52", AprobacionJefeRiesgo='T' )
    db.ValorMetrica.update_or_insert((db.ValorMetrica.id==13), id=13, MetricaId=5, Nombre="Unchanged (U)", Descripcion="An exploited vulnerability can only affect resources managed by the same authority. In this case the vulnerable component and the impacted component are the same.", ValorMetrica="U", ValorNumerico="6.42", AprobacionJefeRiesgo='T' )
    #--------------------------------------------
    #Base Metric Group | C | Confidentiality (C)	
    #--------------------------------------------
    db.ValorMetrica.update_or_insert((db.ValorMetrica.id==14), id=14, MetricaId=6, Nombre="High (H)", Descripcion="There is total loss of confidentiality, resulting in all resources within the impacted component being divulged to the attacker. Alternatively, access to only some restricted information is obtained, but the disclosed information presents a direct, serious impact. For example, an attacker steals the administrator's password, or private encryption keys of a web server.", ValorMetrica="H", ValorNumerico="0.56", AprobacionJefeRiesgo='T' )
    db.ValorMetrica.update_or_insert((db.ValorMetrica.id==15), id=15, MetricaId=6, Nombre="Low (L)", Descripcion="There is some loss of confidentiality. Access to some restricted information is obtained, but the attacker does not have control over what information is obtained, or the amount or kind of loss is constrained. The information disclosure does not cause a direct, serious loss to the impacted component.", ValorMetrica="L", ValorNumerico="0.22", AprobacionJefeRiesgo='T' )
    db.ValorMetrica.update_or_insert((db.ValorMetrica.id==16), id=16, MetricaId=6, Nombre="None (N)", Descripcion="There is no loss of confidentiality within the impacted component.", ValorMetrica="N", ValorNumerico="0.00", AprobacionJefeRiesgo='T' )
    #--------------------------------------
    #Base Metric Group | I | Integrity (I)	
    #--------------------------------------
    db.ValorMetrica.update_or_insert((db.ValorMetrica.id==17), id=17, MetricaId=7, Nombre="High (H)", Descripcion="There is a total loss of integrity, or a complete loss of protection. For example, the attacker is able to modify any/all files protected by the impacted component. Alternatively, only some files can be modified, but malicious modification would present a direct, serious consequence to the impacted component.", ValorMetrica="H", ValorNumerico="0.56", AprobacionJefeRiesgo='T' )
    db.ValorMetrica.update_or_insert((db.ValorMetrica.id==18), id=18, MetricaId=7, Nombre="Low (L)", Descripcion="Modification of data is possible, but the attacker does not have control over the consequence of a modification, or the amount of modification is constrained. The data modification does not have a direct, serious impact on the impacted component.", ValorMetrica="L", ValorNumerico="0.22", AprobacionJefeRiesgo='T' )
    db.ValorMetrica.update_or_insert((db.ValorMetrica.id==19), id=19, MetricaId=7, Nombre="None (N)", Descripcion="There is no loss of integrity within the impacted component.", ValorMetrica="N", ValorNumerico="0.00", AprobacionJefeRiesgo='T' )
    #-------------------------------------------
    #Base Metric Group | A | Availability (A)	
    #-------------------------------------------
    db.ValorMetrica.update_or_insert((db.ValorMetrica.id==20), id=20, MetricaId=8, Nombre="High (H)", Descripcion="There is total loss of availability, resulting in the attacker being able to fully deny access to resources in the impacted component; this loss is either sustained (while the attacker continues to deliver the attack) or persistent (the condition persists even after the attack has completed). Alternatively, the attacker has the ability to deny some availability, but the loss of availability presents a direct, serious consequence to the impacted component (e.g., the attacker cannotdisrupt existing connections, but can prevent new connections; the attacker can repeatedly exploit a vulnerability that, in each instance of a successful attack, leaks a only small amount of memory, but after repeated exploitation causes a service to become completely unavailable).", ValorMetrica="H", ValorNumerico="0.56", AprobacionJefeRiesgo='T' )
    db.ValorMetrica.update_or_insert((db.ValorMetrica.id==21), id=21, MetricaId=8, Nombre="Low (L)", Descripcion="There is reduced performance or interruptions in resource availability. Even if repeated exploitation of the vulnerability is possible, the attacker does not have the ability to completely deny service to legitimate users. The resources in the impacted component are either partially available all of the time, or fully available only some of the time, but overall there is no direct, serious consequence to the impacted component.", ValorMetrica="L", ValorNumerico="0.22", AprobacionJefeRiesgo='T' )
    db.ValorMetrica.update_or_insert((db.ValorMetrica.id==22), id=22, MetricaId=8, Nombre="None (N)", Descripcion="There is no impact to availability within the impacted component.", ValorMetrica="N", ValorNumerico="0.00", AprobacionJefeRiesgo='T' )
    #---------------------------------------------------------
    #Temporal Metric Group | E | Exploit Code Maturity (E)
    #---------------------------------------------------------
    db.ValorMetrica.update_or_insert((db.ValorMetrica.id==23), id=23, MetricaId=9, Nombre="Not Defined (X)", Descripcion="Assigning this value to the metric will not influence the score. It is a signal to a scoring equation to skip this metric.", ValorMetrica="X", ValorNumerico="1.00", AprobacionJefeRiesgo='T' )
    db.ValorMetrica.update_or_insert((db.ValorMetrica.id==24), id=24, MetricaId=9, Nombre="High (H)", Descripcion="Functional autonomous code exists, or no exploit is required (manual trigger) and details are widely available. Exploit code works in every situation, or is actively being delivered via an autonomous agent (such as a worm or virus). Network-connected systems are likely to encounter scanning or exploitation attempts. Exploit development has reached the level of reliable, widely-available, easy-to-use automated tools.", ValorMetrica="H", ValorNumerico="1.00", AprobacionJefeRiesgo='T' )
    db.ValorMetrica.update_or_insert((db.ValorMetrica.id==25), id=25, MetricaId=9, Nombre="Functional (F)", Descripcion="Functional exploit code is available. The code works in most situations where the vulnerability exists.", ValorMetrica="F", ValorNumerico="0.97", AprobacionJefeRiesgo='T' )
    db.ValorMetrica.update_or_insert((db.ValorMetrica.id==26), id=26, MetricaId=9, Nombre="Proof of Concept (P)", Descripcion="Proof-of-concept exploit code is available, or an attack demonstration is not practical for most systems. The code or technique is not functional in all situations and may require substantial modification by a skilled attacker.", ValorMetrica="P", ValorNumerico="0.94", AprobacionJefeRiesgo='T' )
    db.ValorMetrica.update_or_insert((db.ValorMetrica.id==27), id=27, MetricaId=9, Nombre="Unproven (U)", Descripcion="No exploit code is available, or an exploit is theoretical.", ValorMetrica="U", ValorNumerico="0.91", AprobacionJefeRiesgo='T' )
    db.ValorMetrica.update_or_insert((db.ValorMetrica.id==28), id=28, MetricaId=10, Nombre="Not Defined (X)", Descripcion="Assigning this value to the metric will not influence the score. It is a signal to a scoring equation to skip this metric.", ValorMetrica="X", ValorNumerico="1.00", AprobacionJefeRiesgo='T' )
    db.ValorMetrica.update_or_insert((db.ValorMetrica.id==29), id=29, MetricaId=10, Nombre="Unavailable (U)", Descripcion="There is either no solution available or it is impossible to apply.", ValorMetrica="U", ValorNumerico="1.00", AprobacionJefeRiesgo='T' )
    db.ValorMetrica.update_or_insert((db.ValorMetrica.id==30), id=30, MetricaId=10, Nombre="Workaround (W)", Descripcion="There is an unofficial, non-vendor solution available. In some cases, users of the affected technology will create a patch of their own or provide steps to work around or otherwise mitigate the vulnerability.", ValorMetrica="W", ValorNumerico="0.97", AprobacionJefeRiesgo='T' )
    db.ValorMetrica.update_or_insert((db.ValorMetrica.id==31), id=31, MetricaId=10, Nombre="Temporary Fix (T)", Descripcion="There is an official but temporary fix available. This includes instances where the vendor issues a temporary hotfix, tool, or workaround.", ValorMetrica="T", ValorNumerico="0.96", AprobacionJefeRiesgo='T' )
    db.ValorMetrica.update_or_insert((db.ValorMetrica.id==32), id=32, MetricaId=10, Nombre="Official Fix (O)", Descripcion="A complete vendor solution is available. Either the vendor has issued an official patch, or an upgrade is available.", ValorMetrica="O", ValorNumerico="0.95", AprobacionJefeRiesgo='T' )
    db.ValorMetrica.update_or_insert((db.ValorMetrica.id==33), id=33, MetricaId=11, Nombre="Not Defined (X)", Descripcion="Assigning this value to the metric will not influence the score. It is a signal to a scoring equation to skip this metric.", ValorMetrica="X", ValorNumerico="1.00", AprobacionJefeRiesgo='T' )
    db.ValorMetrica.update_or_insert((db.ValorMetrica.id==34), id=34, MetricaId=11, Nombre="Confirmed (C)", Descripcion="Detailed reports exist, or functional reproduction is possible (functional exploits may provide this). Source code is available to independently verify the assertions of the research, or the author or vendor of the affected code has confirmed the presence of the vulnerability.", ValorMetrica="C", ValorNumerico="1.00", AprobacionJefeRiesgo='T' )
    db.ValorMetrica.update_or_insert((db.ValorMetrica.id==35), id=35, MetricaId=11, Nombre="Reasonable (R)", Descripcion="Significant details are published, but researchers either do not have full confidence in the root cause, or do not have access to source code to fully confirm all of the interactions that may lead to the result. Reasonable confidence exists, however, that the bug is reproducible and at least one impact is able to be verified (proof-of-concept exploits may provide this). An example is a detailed write-up of research into a vulnerability with an explanation (possibly obfuscated or “left as an exercise to the reader”) that gives assurances on how to reproduce the results.", ValorMetrica="R", ValorNumerico="0.96", AprobacionJefeRiesgo='T' )
    db.ValorMetrica.update_or_insert((db.ValorMetrica.id==36), id=36, MetricaId=11, Nombre="Unknown (U)", Descripcion="There are reports of impacts that indicate a vulnerability is present. The reports indicate that the cause of the vulnerability is unknown, or reports may differ on the cause or impacts of the vulnerability. Reporters are uncertain of the true nature of the vulnerability, and there is little confidence in the validity of the reports or whether a static Base score can be applied given the differences described. An example is a bug report which notes that an intermittent but non-reproducible crash occurs, with evidence of memory corruption suggesting that denial of service, or possible more serious impacts, may result.", ValorMetrica="U", ValorNumerico="0.92", AprobacionJefeRiesgo='T' )
    #----------------------------------
    #Metricas Ambientales
    #Security Requirements (CR, IR, AR)
    #----------------------------------
    db.ValorMetrica.update_or_insert((db.ValorMetrica.id==37), id=37, MetricaId=12, Nombre="Not Defined (X)", Descripcion="Assigning this value to the metric will not influence the score. It is a signal to the equation to skip this metric.", ValorMetrica="X", ValorNumerico="1.00", AprobacionJefeRiesgo='T' )
    db.ValorMetrica.update_or_insert((db.ValorMetrica.id==38), id=38, MetricaId=12, Nombre="High (H)", Descripcion="Loss of [Confidentiality | Integrity | Availability] is likely to have a catastrophic adverse effect on the organization or individuals associated with the organization (e.g., employees, customers).", ValorMetrica="H", ValorNumerico="1.50", AprobacionJefeRiesgo='T' )
    db.ValorMetrica.update_or_insert((db.ValorMetrica.id==39), id=39, MetricaId=12, Nombre="Medium (M)", Descripcion="Loss of [Confidentiality | Integrity | Availability] is likely to have a serious adverse effect on the organization or individuals associated with the organization (e.g., employees, customers).", ValorMetrica="M", ValorNumerico="1.00", AprobacionJefeRiesgo='T' )
    db.ValorMetrica.update_or_insert((db.ValorMetrica.id==40), id=40, MetricaId=12, Nombre="Low (L)", Descripcion="Loss of [Confidentiality | Integrity | Availability] is likely to have only a limited adverse effect on the organization or individuals associated with the organization (e.g., employees, customers).", ValorMetrica="L", ValorNumerico="0.50", AprobacionJefeRiesgo='T' )

    db.ValorMetrica.update_or_insert((db.ValorMetrica.id==41), id=41, MetricaId=13, Nombre="Not Defined (X)", Descripcion="Assigning this value to the metric will not influence the score. It is a signal to the equation to skip this metric.", ValorMetrica="X", ValorNumerico="1.00", AprobacionJefeRiesgo='T' )
    db.ValorMetrica.update_or_insert((db.ValorMetrica.id==42), id=42, MetricaId=13, Nombre="High (H)", Descripcion="Loss of [Confidentiality | Integrity | Availability] is likely to have a catastrophic adverse effect on the organization or individuals associated with the organization (e.g., employees, customers).", ValorMetrica="H", ValorNumerico="1.50", AprobacionJefeRiesgo='T' )
    db.ValorMetrica.update_or_insert((db.ValorMetrica.id==43), id=43, MetricaId=13, Nombre="Medium (M)", Descripcion="Loss of [Confidentiality | Integrity | Availability] is likely to have a serious adverse effect on the organization or individuals associated with the organization (e.g., employees, customers).", ValorMetrica="M", ValorNumerico="1.00", AprobacionJefeRiesgo='T' )
    db.ValorMetrica.update_or_insert((db.ValorMetrica.id==44), id=44, MetricaId=13, Nombre="Low (L)", Descripcion="Loss of [Confidentiality | Integrity | Availability] is likely to have only a limited adverse effect on the organization or individuals associated with the organization (e.g., employees, customers).", ValorMetrica="L", ValorNumerico="0.50", AprobacionJefeRiesgo='T' )

    db.ValorMetrica.update_or_insert((db.ValorMetrica.id==45), id=45, MetricaId=14, Nombre="Not Defined (X)", Descripcion="Assigning this value to the metric will not influence the score. It is a signal to the equation to skip this metric.", ValorMetrica="X", ValorNumerico="1.00", AprobacionJefeRiesgo='T' )
    db.ValorMetrica.update_or_insert((db.ValorMetrica.id==46), id=46, MetricaId=14, Nombre="High (H)", Descripcion="Loss of [Confidentiality | Integrity | Availability] is likely to have a catastrophic adverse effect on the organization or individuals associated with the organization (e.g., employees, customers).", ValorMetrica="H", ValorNumerico="1.50", AprobacionJefeRiesgo='T' )
    db.ValorMetrica.update_or_insert((db.ValorMetrica.id==47), id=47, MetricaId=14, Nombre="Medium (M)", Descripcion="Loss of [Confidentiality | Integrity | Availability] is likely to have a serious adverse effect on the organization or individuals associated with the organization (e.g., employees, customers).", ValorMetrica="M", ValorNumerico="1.00", AprobacionJefeRiesgo='T' )
    db.ValorMetrica.update_or_insert((db.ValorMetrica.id==48), id=48, MetricaId=14, Nombre="Low (L)", Descripcion="Loss of [Confidentiality | Integrity | Availability] is likely to have only a limited adverse effect on the organization or individuals associated with the organization (e.g., employees, customers).", ValorMetrica="L", ValorNumerico="0.50", AprobacionJefeRiesgo='T' )
    #----------------------------------
    #Metricas Ambientales
    #Modificacion de parametros base
    #----------------------------------
    #Modified Attack Vector (MAV)
    #----------------------------------
    db.ValorMetrica.update_or_insert((db.ValorMetrica.id==49), id=49, MetricaId=15, Nombre="Not Defined (X)", Descripcion="Assigning this value indicates there is insufficient information to choose one of the other values, and has no impact on the overall Environmental Score, i.e., it has the same effect on scoring as assigning Medium.", ValorMetrica="X", ValorNumerico="1", AprobacionJefeRiesgo='T' )
    db.ValorMetrica.update_or_insert((db.ValorMetrica.id==50), id=50, MetricaId=15, Nombre="Modified Network (N)", Descripcion="A vulnerability exploitable with network access means the vulnerable component is bound to the network stack and the attacker's path is through OSI layer 3 (the network layer). Such a vulnerability is often termed “remotely exploitable” and can be thought of as an attack being exploitable one or more network hops away (e.g. across layer 3 boundaries from routers). An example of a network attack is an attacker causing a denial of service (DoS) by sending a specially crafted TCP packet from across the public Internet (e.g. CVE-2004-0230).", ValorMetrica="N", ValorNumerico="0.85", AprobacionJefeRiesgo='T' )
    db.ValorMetrica.update_or_insert((db.ValorMetrica.id==51), id=51, MetricaId=15, Nombre="Modified Adjacent (A)", Descripcion="A vulnerability exploitable with adjacent network access means the vulnerable component is bound to the network stack, however the attack is limited to the same shared physical (e.g. Bluetooth, IEEE 802.11), or logical (e.g. local IP subnet) network, and cannot be performed across an OSI layer 3 boundary (e.g. a router). An example of an Adjacent attack would be an ARP (IPv4) or neighbor discovery (IPv6) flood leading to a denial of service on the local LAN segment. See also CVE-2013-6014", ValorMetrica="A", ValorNumerico="0.62", AprobacionJefeRiesgo='T' )
    db.ValorMetrica.update_or_insert((db.ValorMetrica.id==52), id=52, MetricaId=15, Nombre="Modified Local (L)", Descripcion="A vulnerability exploitable with Local access means that the vulnerable component is not bound to the network stack, and the attacker’s path is via read/write/execute capabilities. In some cases, the attacker may be logged in locally in order to exploit the vulnerability, otherwise, she may rely on User Interaction to execute a malicious file.", ValorMetrica="L", ValorNumerico="0.55", AprobacionJefeRiesgo='T' )
    db.ValorMetrica.update_or_insert((db.ValorMetrica.id==53), id=53, MetricaId=15, Nombre="Modified Physical (P)", Descripcion="A vulnerability exploitable with Physical access requires the attacker to physically touch or manipulate the vulnerable component. Physical interaction may be brief (e.g. evil maid attack 1 ) or persistent. An example of such an attack is a cold boot attack which allows an attacker to access to disk encryption keys after gaining physical access to the system, or peripheral attacks such as Firewire/USB Direct Memory Access attacks.", ValorMetrica="P", ValorNumerico="0.20", AprobacionJefeRiesgo='T' )
    #--------------------------------
    #Modified Attack Complexity (MAC)
    #--------------------------------
    db.ValorMetrica.update_or_insert((db.ValorMetrica.id==54), id=54, MetricaId=16, Nombre="Not Defined (X)", Descripcion="Assigning this value indicates there is insufficient information to choose one of the other values, and has no impact on the overall Environmental Score, i.e., it has the same effect on scoring as assigning Medium.", ValorMetrica="X", ValorNumerico="1", AprobacionJefeRiesgo='T' )
    db.ValorMetrica.update_or_insert((db.ValorMetrica.id==55), id=55, MetricaId=16, Nombre="Modified High (H)", Descripcion="A successful attack depends on conditions beyond the attacker's control. That is, a successful attack cannot be accomplished at will, but requires the attacker to invest in some measurable amount of effort in preparation or execution against the vulnerable component before a successful attack can be expected. For example, a successful attack may depend on an attacker overcoming any of the following conditions: The attacker must conduct target-specific reconnaissance. For example, on target configuration settings, sequence numbers, shared secrets, etc. The attacker must prepare the target environment to improve exploit reliability. For example, repeated exploitation to win a race condition, or overcoming advanced exploit mitigation techniques. The attacker must inject herself into the logical network path between the target and the resource requested by the victim in order to read and/or modify network communications (e.g. man in the middle attack).", ValorMetrica="H", ValorNumerico="0.44", AprobacionJefeRiesgo='T' )
    db.ValorMetrica.update_or_insert((db.ValorMetrica.id==56), id=56, MetricaId=16, Nombre="Modified Low (L)", Descripcion="Specialized access conditions or extenuating circumstances do not exist. An attacker can expect repeatable success against the vulnerable component.", ValorMetrica="L", ValorNumerico="0.77", AprobacionJefeRiesgo='T')
    #------------------------------------
    #Modified Privileges Required (MPR)	
    #------------------------------------
    db.ValorMetrica.update_or_insert((db.ValorMetrica.id==57), id=57, MetricaId=17, Nombre="Not Defined (X)", Descripcion="Assigning this value indicates there is insufficient information to choose one of the other values, and has no impact on the overall Environmental Score, i.e., it has the same effect on scoring as assigning Medium.", ValorMetrica="X", ValorNumerico="1", AprobacionJefeRiesgo='T' )
    db.ValorMetrica.update_or_insert((db.ValorMetrica.id==58), id=58, MetricaId=17, Nombre="Modified High (H)", Descripcion="The attacker is authorized with (i.e requires) privileges that provide significant (e.g. administrative) control over the vulnerable component that could affect component-wide settings and files.", ValorMetrica="H", ValorNumerico="0.27", AprobacionJefeRiesgo='T' )
    db.ValorMetrica.update_or_insert((db.ValorMetrica.id==59), id=59, MetricaId=17, Nombre="Modified Low (L)", Descripcion="The attacker is authorized with (i.e. requires) privileges that provide basic user capabilities that could normally affect only settings and files owned by a user. Alternatively, an attacker with Low privileges may have the ability to cause an impact only to non-sensitive resources.", ValorMetrica="L", ValorNumerico="0.62", AprobacionJefeRiesgo='T' )
    db.ValorMetrica.update_or_insert((db.ValorMetrica.id==60), id=60, MetricaId=17, Nombre="Modified None (N)", Descripcion="The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack.", ValorMetrica="N", ValorNumerico="0.85", AprobacionJefeRiesgo='T')
    #---------------------------------
    #Modified User Interaction (MUI)	
    #---------------------------------
    db.ValorMetrica.update_or_insert((db.ValorMetrica.id==61), id=61, MetricaId=18, Nombre="Not Defined (X)", Descripcion="Assigning this value indicates there is insufficient information to choose one of the other values, and has no impact on the overall Environmental Score, i.e., it has the same effect on scoring as assigning Medium.", ValorMetrica="X", ValorNumerico="1", AprobacionJefeRiesgo='T' )
    db.ValorMetrica.update_or_insert((db.ValorMetrica.id==62), id=62, MetricaId=18, Nombre="Modified Required (R)", Descripcion="Successful exploitation of thi vulnerability requires a user to take some action before the vulnerability can be exploited. For example, a successful exploit may only be possible during the installation of an application by a system administrator.", ValorMetrica="R", ValorNumerico="0.62", AprobacionJefeRiesgo='T' )
    db.ValorMetrica.update_or_insert((db.ValorMetrica.id==63), id=63, MetricaId=18, Nombre="Modified None (N)", Descripcion="The vulnerable system can be exploited without interaction from any user.", ValorMetrica="N", ValorNumerico="0.85", AprobacionJefeRiesgo='T' )
    #----------------------------------
    #Modified Metric Group | S | Scope (S)  
    #----------------------------------
    db.ValorMetrica.update_or_insert((db.ValorMetrica.id==64), id=64, MetricaId=19, Nombre="Not Defined (X)", Descripcion="Assigning this value indicates there is insufficient information to choose one of the other values, and has no impact on the overall Environmental Score, i.e., it has the same effect on scoring as assigning Medium.", ValorMetrica="X", ValorNumerico="1", AprobacionJefeRiesgo='T' )
    db.ValorMetrica.update_or_insert((db.ValorMetrica.id==65), id=65, MetricaId=19, Nombre="Modified Changed (C)", Descripcion="An exploited vulnerability can affect resources beyond the authorization privileges intended by the vulnerable component. In this case the vulnerable component and the impacted component are different.", ValorMetrica="C", ValorNumerico="7.52", AprobacionJefeRiesgo='T' )
    db.ValorMetrica.update_or_insert((db.ValorMetrica.id==66), id=66, MetricaId=19, Nombre="Modified Unchanged (U)", Descripcion="An exploited vulnerability can only affect resources managed by the same authority. In this case the vulnerable component and the impacted component are the same.", ValorMetrica="U", ValorNumerico="6.42", AprobacionJefeRiesgo='T' )
    #--------------------------------------------
    #Modified Metric Group | C | Confidentiality (C)        
    #--------------------------------------------
    db.ValorMetrica.update_or_insert((db.ValorMetrica.id==67), id=67, MetricaId=20, Nombre="Not Defined (X)", Descripcion="Assigning this value indicates there is insufficient information to choose one of the other values, and has no impact on the overall Environmental Score, i.e., it has the same effect on scoring as assigning Medium.", ValorMetrica="X", ValorNumerico="1", AprobacionJefeRiesgo='T' )
    db.ValorMetrica.update_or_insert((db.ValorMetrica.id==68), id=68, MetricaId=20, Nombre="Modified High (H)", Descripcion="There is total loss of confidentiality, resulting in all resources within the impacted component being divulged to the attacker. Alternatively, access to only some restricted information is obtained, but the disclosed information presents a direct, serious impact. For example, an attacker steals the administrator's password, or private encryption keys of a web server.", ValorMetrica="H", ValorNumerico="0.56", AprobacionJefeRiesgo='T' )
    db.ValorMetrica.update_or_insert((db.ValorMetrica.id==69), id=69, MetricaId=20, Nombre="Modified Low (L)", Descripcion="There is some loss of confidentiality. Access to some restricted information is obtained, but the attacker does not have control over what information is obtained, or the amount or kind of loss is constrained. The information disclosure does not cause a direct, serious loss to the impacted component.", ValorMetrica="L", ValorNumerico="0.22", AprobacionJefeRiesgo='T' )
    db.ValorMetrica.update_or_insert((db.ValorMetrica.id==70), id=70, MetricaId=20, Nombre="Modified None (N)", Descripcion="There is no loss of confidentiality within the impacted component.", ValorMetrica="N", ValorNumerico="0.00", AprobacionJefeRiesgo='T' )
    #--------------------------------------
    #Base Metric Group | I | Integrity (I)      
    #--------------------------------------
    db.ValorMetrica.update_or_insert((db.ValorMetrica.id==71), id=71, MetricaId=21, Nombre="Not Defined (X)", Descripcion="Assigning this value indicates there is insufficient information to choose one of the other values, and has no impact on the overall Environmental Score, i.e., it has the same effect on scoring as assigning Medium.", ValorMetrica="X", ValorNumerico="1", AprobacionJefeRiesgo='T' )
    db.ValorMetrica.update_or_insert((db.ValorMetrica.id==72), id=72, MetricaId=21, Nombre="Modified High (H)", Descripcion="There is a total loss of integrity, or a complete loss of protection. For example, the attacker is able to modify any/all files protected by the impacted component. Alternatively, only some files can be modified, but malicious modification would present a direct, serious consequence to the impacted component.", ValorMetrica="H", ValorNumerico="0.56", AprobacionJefeRiesgo='T' )
    db.ValorMetrica.update_or_insert((db.ValorMetrica.id==73), id=73, MetricaId=21, Nombre="Modified Low (L)", Descripcion="Modification of data is possible, but the attacker does not have control over the consequence of a modification, or the amount of modification is constrained. The data modification does not have a direct, serious impact on the impacted component.", ValorMetrica="L", ValorNumerico="0.22", AprobacionJefeRiesgo='T' )
    db.ValorMetrica.update_or_insert((db.ValorMetrica.id==74), id=74, MetricaId=21, Nombre="Modified None (N)", Descripcion="There is no loss of integrity within the impacted component.", ValorMetrica="N", ValorNumerico="0.00", AprobacionJefeRiesgo='T' )
    #-------------------------------------------
    #Base Metric Group | A | Availability (A)   
    #-------------------------------------------
    db.ValorMetrica.update_or_insert((db.ValorMetrica.id==75), id=75, MetricaId=22, Nombre="Not Defined (X)", Descripcion="Assigning this value indicates there is insufficient information to choose one of the other values, and has no impact on the overall Environmental Score, i.e., it has the same effect on scoring as assigning Medium.", ValorMetrica="X", ValorNumerico="1", AprobacionJefeRiesgo='T' )
    db.ValorMetrica.update_or_insert((db.ValorMetrica.id==76), id=76, MetricaId=22, Nombre="High (H)", Descripcion="There is total loss of availability, resulting in the attacker being able to fully deny access to resources in the impacted component; this loss is either sustained (while the attacker continues to deliver the attack) or persistent (the condition persists even after the attack has completed). Alternatively, the attacker has the ability to deny some availability, but the loss of availability presents a direct, serious consequence to the impacted component (e.g., the attacker cannotdisrupt existing connections, but can prevent new connections; the attacker can repeatedly exploit a vulnerability that, in each instance of a successful attack, leaks a only small amount of memory, but after repeated exploitation causes a service to become completely unavailable).", ValorMetrica="H", ValorNumerico="0.56", AprobacionJefeRiesgo='T' )
    db.ValorMetrica.update_or_insert((db.ValorMetrica.id==77), id=77, MetricaId=22, Nombre="Low (L)", Descripcion="There is reduced performance or interruptions in resource availability. Even if repeated exploitation of the vulnerability is possible, the attacker does not have the ability to completely deny service to legitimate users. The resources in the impacted component are either partially available all of the time, or fully available only some of the time, but overall there is no direct, serious consequence to the impacted component.", ValorMetrica="L", ValorNumerico="0.22", AprobacionJefeRiesgo='T' )
    db.ValorMetrica.update_or_insert((db.ValorMetrica.id==78), id=78, MetricaId=22, Nombre="None (N)", Descripcion="There is no impact to availability within the impacted component.", ValorMetrica="N", ValorNumerico="0.00", AprobacionJefeRiesgo='T' )
    #---------
    #ActivoTi
    #---------
    db.ActivoTi.update_or_insert((db.ActivoTi.id==1), id=1, Nombre="NA", TipoCapaSistemaId=1, Descripcion="NA", CvssConfidentiality=1, CvssIntegrity=1, CvssAvailability=1, AprobacionJefeRiesgo='T')
    db.ActivoTi.update_or_insert((db.ActivoTi.id==2), id=2, Nombre="Servidor de Ventas", TipoCapaSistemaId=2, Descripcion="Servidor de Ventas", CvssConfidentiality=2, CvssIntegrity=2, CvssAvailability=2, AprobacionJefeRiesgo='T')
    db.ActivoTi.update_or_insert((db.ActivoTi.id==3), id=3, Nombre="Base de Datos Clientes", TipoCapaSistemaId=3, Descripcion="Base de Datos Clientes", CvssConfidentiality=3, CvssIntegrity=3, CvssAvailability=3, AprobacionJefeRiesgo='T')
    db.ActivoTi.update_or_insert((db.ActivoTi.id==4), id=4, Nombre="Sistema de Respaldos", TipoCapaSistemaId=4, Descripcion="Sistema de Respaldos", CvssConfidentiality=4, CvssIntegrity=4, CvssAvailability=4, AprobacionJefeRiesgo='T')
    db.ActivoTi.update_or_insert((db.ActivoTi.id==5), id=5, Nombre="CRM", TipoCapaSistemaId=4, Descripcion="CRM", CvssConfidentiality=5, CvssIntegrity=5, CvssAvailability=5, AprobacionJefeRiesgo='T')
    db.ActivoTi.update_or_insert((db.ActivoTi.id==6), id=6, Nombre="Router", TipoCapaSistemaId=4, Descripcion="Router", CvssConfidentiality=5, CvssIntegrity=5, CvssAvailability=5, AprobacionJefeRiesgo='T')
    '''
    #---------------
    #ActivoTiRegion
    #---------------
    db.ActivoTiRegion.update_or_insert((db.ActivoTiRegion.id==1), id=1, ActivoTiId=2, RegionId=1, Descripcion="", AprobacionJefeRiesgo='T')
    db.ActivoTiRegion.update_or_insert((db.ActivoTiRegion.id==2), id=2, ActivoTiId=3, RegionId=2, Descripcion="", AprobacionJefeRiesgo='T')
    db.ActivoTiRegion.update_or_insert((db.ActivoTiRegion.id==3), id=3, ActivoTiId=4, RegionId=3, Descripcion="", AprobacionJefeRiesgo='T')
    db.ActivoTiRegion.update_or_insert((db.ActivoTiRegion.id==4), id=4, ActivoTiId=5, RegionId=1, Descripcion="", AprobacionJefeRiesgo='T')
    db.ActivoTiRegion.update_or_insert((db.ActivoTiRegion.id==5), id=5, ActivoTiId=6, RegionId=2, Descripcion="", AprobacionJefeRiesgo='T')
    '''
    #----------------
    #ActivoTiProceso
    #----------------
    db.ActivoTiProceso.update_or_insert((db.ActivoTiProceso.id==1), id=1, ActivoTiId=2, ProcesoId=2, AprobacionJefeRiesgo='T')
    db.ActivoTiProceso.update_or_insert((db.ActivoTiProceso.id==2), id=2, ActivoTiId=3, ProcesoId=3, AprobacionJefeRiesgo='T')
    db.ActivoTiProceso.update_or_insert((db.ActivoTiProceso.id==3), id=3, ActivoTiId=4, ProcesoId=4, AprobacionJefeRiesgo='T')
    db.ActivoTiProceso.update_or_insert((db.ActivoTiProceso.id==4), id=4, ActivoTiId=5, ProcesoId=5, AprobacionJefeRiesgo='T')
    #--------------------------
    #ActivoTiActivoInformacion
    #--------------------------
    db.ActivoTiActivoInformacion.update_or_insert((db.ActivoTiActivoInformacion.id==1), id=1, ActivoTiId=2, ActivoInformacionId=2, AprobacionJefeRiesgo='T')
    db.ActivoTiActivoInformacion.update_or_insert((db.ActivoTiActivoInformacion.id==2), id=2, ActivoTiId=3, ActivoInformacionId=3, AprobacionJefeRiesgo='T')
    db.ActivoTiActivoInformacion.update_or_insert((db.ActivoTiActivoInformacion.id==3), id=3, ActivoTiId=4, ActivoInformacionId=4, AprobacionJefeRiesgo='T')
    #---------------------------
    #ActivoInformacionRegulacion
    #---------------------------
    db.ActivoInformacionRegulacion.update_or_insert((db.ActivoInformacionRegulacion.id==1), id=1, ActivoInformacionId=1, RegulacionDatoId=1, AprobacionJefeRiesgo='T')
    db.ActivoInformacionRegulacion.update_or_insert((db.ActivoInformacionRegulacion.id==2), id=2, ActivoInformacionId=2, RegulacionDatoId=2, AprobacionJefeRiesgo='T')
    #-------------------
    #IncidenteSeguridad
    #-------------------
    db.IncidenteSeguridad.update_or_insert((db.IncidenteSeguridad.id==1), id=1, Nombre="IN01 - Ataque fuga de información", TipoIncidenteSeguridadId=1, ActivoTiId=1, AprobacionJefeRiesgo='T')
    db.IncidenteSeguridad.update_or_insert((db.IncidenteSeguridad.id==2), id=2, Nombre="IN02 - Infección en equipos", TipoIncidenteSeguridadId=2, ActivoTiId=2, AprobacionJefeRiesgo='T')
    db.IncidenteSeguridad.update_or_insert((db.IncidenteSeguridad.id==3), id=3, Nombre="IN03 - Ataque SQLi", TipoIncidenteSeguridadId=3, ActivoTiId=3, AprobacionJefeRiesgo='T')
    db.IncidenteSeguridad.update_or_insert((db.IncidenteSeguridad.id==4), id=4, Nombre="IN04 - Ataque phishing", TipoIncidenteSeguridadId=2, ActivoTiId=3, AprobacionJefeRiesgo='T')
    db.IncidenteSeguridad.update_or_insert((db.IncidenteSeguridad.id==5), id=5, Nombre="IN05 - Ataque DOS", TipoIncidenteSeguridadId=3, ActivoTiId=1, AprobacionJefeRiesgo='T')
    #------------------
    #TratamientoRiesgo
    #------------------
    db.TratamientoRiesgo.update_or_insert((db.TratamientoRiesgo.id==1), id=1, ProcesoId=1, ActivoTiId=1, ActivoInformacionId=1, FactorRiesgo="Ejecución de fraudes, debido a que no existen controles de segregación de funciones, por lo que un usuario puede tener privilegios excesivos", RiesgoFraude='T', EscenarioAmenaza="Un usuario mal intencionado puede acceder a información sensible de manera no autorizada, debido a que sus accesos/privilegios no están restringidos a los mínimos necesarios para realizar sus funciones.", TipoVulnerabilidadId=1, CriterioImpactoId=5, CriterioProbabilidadId=5, TipoTratamientoRiesgoId=1, CatalogoControlId=1, TipoControlId=1, ClasificacionControlId=1, ObjetivoControl="ObjetivoControl", ActividadControl="ActividadControl", ResponsableControl="controlResp", AprobacionJefeRiesgo='T', StatusImplementacionControl='Implementado (Implemented)')
    db.TratamientoRiesgo.update_or_insert((db.TratamientoRiesgo.id==2), id=2, ProcesoId=2, ActivoTiId=2, ActivoInformacionId=2, FactorRiesgo="Accesos no autorizados, debido a que se utilizan passwords débiles, por lo que un usuario malintencionado puede acceder al sistema de manera no autorizada", RiesgoFraude='F', EscenarioAmenaza="Un usuario malintencionado puede ejecutar un ataque de fuerza bruta para acceder al sistema de manera no autorizada.", TipoVulnerabilidadId=2, CriterioImpactoId=3, CriterioProbabilidadId=3, TipoTratamientoRiesgoId=2, CatalogoControlId=2, TipoControlId=2, ClasificacionControlId=2, ObjetivoControl="ObjetivoControl", ActividadControl="ActividadControl", ResponsableControl="controlResp", AprobacionJefeRiesgo='T', StatusImplementacionControl='No Implementado (Not Implemented)')
    db.TratamientoRiesgo.update_or_insert((db.TratamientoRiesgo.id==3), id=3, ProcesoId=3, ActivoTiId=3, ActivoInformacionId=1, FactorRiesgo="Ejecución de fraudes, debido a que no existen controles de segregación de funciones, por lo que un usuario puede tener privilegios excesivos", RiesgoFraude='F', EscenarioAmenaza="Un usuario mal intencionado puede acceder a información sensible de manera no autorizada, debido a que sus accesos/privilegios no están restringidos a los mínimos necesarios para realizar sus funciones.", TipoVulnerabilidadId=1, CriterioImpactoId=5, CriterioProbabilidadId=1, TipoTratamientoRiesgoId=2, CatalogoControlId=14, TipoControlId=2, ClasificacionControlId=3, ObjetivoControl="ObjetivoControl", ActividadControl="ActividadControl", ResponsableControl="controlResp", AprobacionJefeRiesgo='T', StatusImplementacionControl='Implementado (Implemented)')
    db.TratamientoRiesgo.update_or_insert((db.TratamientoRiesgo.id==4), id=4, ProcesoId=4, ActivoTiId=2, ActivoInformacionId=4, FactorRiesgo="Accesos no autorizados, debido a que se utilizan passwords débiles, por lo que un usuario malintencionado puede acceder al sistema de manera no autorizada", RiesgoFraude='T', EscenarioAmenaza="Un usuario malintencionado puede ejecutar un ataque de fuerza bruta para acceder al sistema de manera no autorizada.", TipoVulnerabilidadId=1, CriterioImpactoId=2, CriterioProbabilidadId=4, TipoTratamientoRiesgoId=1, CatalogoControlId=10, TipoControlId=3, ClasificacionControlId=1, ObjetivoControl="ObjetivoControl", ActividadControl="ActividadControl", ResponsableControl="controlResp", AprobacionJefeRiesgo='T', StatusImplementacionControl='No Implementado (Not Implemented)')
    db.TratamientoRiesgo.update_or_insert((db.TratamientoRiesgo.id==5), id=5, ProcesoId=1, ActivoTiId=1, ActivoInformacionId=1, FactorRiesgo="Ejecución de fraudes, debido a que no existen controles de segregación de funciones, por lo que un usuario puede tener privilegios excesivos", RiesgoFraude='T', EscenarioAmenaza="Un usuario mal intencionado puede acceder a información sensible de manera no autorizada, debido a que sus accesos/privilegios no están restringidos a los mínimos necesarios para realizar sus funciones.", TipoVulnerabilidadId=1, CriterioImpactoId=4, CriterioProbabilidadId=5, TipoTratamientoRiesgoId=1, CatalogoControlId=5, TipoControlId=3, ClasificacionControlId=2, ObjetivoControl="ObjetivoControl", ActividadControl="ActividadControl", ResponsableControl="controlResp", AprobacionJefeRiesgo='T', StatusImplementacionControl='Implementado (Implemented)')
    db.TratamientoRiesgo.update_or_insert((db.TratamientoRiesgo.id==6), id=6, ProcesoId=2, ActivoTiId=2, ActivoInformacionId=2, FactorRiesgo="Accesos no autorizados, debido a que se utilizan passwords débiles, por lo que un usuario malintencionado puede acceder al sistema de manera no autorizada", RiesgoFraude='F', EscenarioAmenaza="Un usuario malintencionado puede ejecutar un ataque de fuerza bruta para acceder al sistema de manera no autorizada.", TipoVulnerabilidadId=2, CriterioImpactoId=3, CriterioProbabilidadId=5, TipoTratamientoRiesgoId=1, CatalogoControlId=12, TipoControlId=4, ClasificacionControlId=3, ObjetivoControl="ObjetivoControl", ActividadControl="ActividadControl", ResponsableControl="controlResp", AprobacionJefeRiesgo='T', StatusImplementacionControl='No Implementado (Not Implemented)')
    db.TratamientoRiesgo.update_or_insert((db.TratamientoRiesgo.id==7), id=7, ProcesoId=3, ActivoTiId=3, ActivoInformacionId=1, FactorRiesgo="Ejecución de fraudes, debido a que no existen controles de segregación de funciones, por lo que un usuario puede tener privilegios excesivos", RiesgoFraude='T', EscenarioAmenaza="Un usuario mal intencionado puede acceder a información sensible de manera no autorizada, debido a que sus accesos/privilegios no están restringidos a los mínimos necesarios para realizar sus funciones.", TipoVulnerabilidadId=1, CriterioImpactoId=5, CriterioProbabilidadId=2, TipoTratamientoRiesgoId=3, CatalogoControlId=11, TipoControlId=3, ClasificacionControlId=3, ObjetivoControl="ObjetivoControl", ActividadControl="ActividadControl", ResponsableControl="controlResp", AprobacionJefeRiesgo='T', StatusImplementacionControl='Implementado (Implemented)')
    db.TratamientoRiesgo.update_or_insert((db.TratamientoRiesgo.id==8), id=8, ProcesoId=4, ActivoTiId=2, ActivoInformacionId=4, FactorRiesgo="Accesos no autorizados, debido a que se utilizan passwords débiles, por lo que un usuario malintencionado puede acceder al sistema de manera no autorizada", RiesgoFraude='T', EscenarioAmenaza="Un usuario malintencionado puede ejecutar un ataque de fuerza bruta para acceder al sistema de manera no autorizada.", TipoVulnerabilidadId=3, CriterioImpactoId=1, CriterioProbabilidadId=3, TipoTratamientoRiesgoId=4, CatalogoControlId=9, TipoControlId=2, ClasificacionControlId=1, ObjetivoControl="ObjetivoControl", ActividadControl="ActividadControl", ResponsableControl="controlResp", AprobacionJefeRiesgo='T', StatusImplementacionControl='No Implementado (Not Implemented)')
    #--------------------------------
    #Evaluacion CVSS 3.1
    #--------------------------------
    db.ValorMetricaSeguridadTi.update_or_insert((db.ValorMetricaSeguridadTi.id==1), id=1, TratamientoRiesgoId=1, ValorMetricaId=2, AprobacionJefeRiesgo='T')
    db.ValorMetricaSeguridadTi.update_or_insert((db.ValorMetricaSeguridadTi.id==2), id=2, TratamientoRiesgoId=1, ValorMetricaId=6, AprobacionJefeRiesgo='T')
    db.ValorMetricaSeguridadTi.update_or_insert((db.ValorMetricaSeguridadTi.id==3), id=3, TratamientoRiesgoId=1, ValorMetricaId=9, AprobacionJefeRiesgo='T')
    db.ValorMetricaSeguridadTi.update_or_insert((db.ValorMetricaSeguridadTi.id==4), id=4, TratamientoRiesgoId=1, ValorMetricaId=10, AprobacionJefeRiesgo='T')
    db.ValorMetricaSeguridadTi.update_or_insert((db.ValorMetricaSeguridadTi.id==5), id=5, TratamientoRiesgoId=1, ValorMetricaId=12, AprobacionJefeRiesgo='T')
    db.ValorMetricaSeguridadTi.update_or_insert((db.ValorMetricaSeguridadTi.id==6), id=6, TratamientoRiesgoId=1, ValorMetricaId=14, AprobacionJefeRiesgo='T')
    db.ValorMetricaSeguridadTi.update_or_insert((db.ValorMetricaSeguridadTi.id==7), id=7, TratamientoRiesgoId=1, ValorMetricaId=18, AprobacionJefeRiesgo='T')
    db.ValorMetricaSeguridadTi.update_or_insert((db.ValorMetricaSeguridadTi.id==8), id=8, TratamientoRiesgoId=1, ValorMetricaId=20, AprobacionJefeRiesgo='T')

    #--------------------------------
    #TratamientoRiesgoAnalisisRiesgo
    #--------------------------------
    db.TratamientoRiesgoAnalisisRiesgo.update_or_insert((db.TratamientoRiesgoAnalisisRiesgo.id==1), id=1, TratamientoRiesgoId=1, AnalisisRiesgoId=1, AprobacionJefeRiesgo='T' )
    db.TratamientoRiesgoAnalisisRiesgo.update_or_insert((db.TratamientoRiesgoAnalisisRiesgo.id==2), id=2, TratamientoRiesgoId=2, AnalisisRiesgoId=2, AprobacionJefeRiesgo='T' )
    db.TratamientoRiesgoAnalisisRiesgo.update_or_insert((db.TratamientoRiesgoAnalisisRiesgo.id==3), id=3, TratamientoRiesgoId=3, AnalisisRiesgoId=3, AprobacionJefeRiesgo='T' )
    db.TratamientoRiesgoAnalisisRiesgo.update_or_insert((db.TratamientoRiesgoAnalisisRiesgo.id==4), id=4, TratamientoRiesgoId=4, AnalisisRiesgoId=4, AprobacionJefeRiesgo='T' )
    db.TratamientoRiesgoAnalisisRiesgo.update_or_insert((db.TratamientoRiesgoAnalisisRiesgo.id==5), id=5, TratamientoRiesgoId=5, AnalisisRiesgoId=5, AprobacionJefeRiesgo='T' )
    db.TratamientoRiesgoAnalisisRiesgo.update_or_insert((db.TratamientoRiesgoAnalisisRiesgo.id==6), id=6, TratamientoRiesgoId=6, AnalisisRiesgoId=6, AprobacionJefeRiesgo='T' )
    db.TratamientoRiesgoAnalisisRiesgo.update_or_insert((db.TratamientoRiesgoAnalisisRiesgo.id==7), id=7, TratamientoRiesgoId=7, AnalisisRiesgoId=7, AprobacionJefeRiesgo='T' )
    db.TratamientoRiesgoAnalisisRiesgo.update_or_insert((db.TratamientoRiesgoAnalisisRiesgo.id==8), id=8, TratamientoRiesgoId=8, AnalisisRiesgoId=8, AprobacionJefeRiesgo='T' )
    #------------------
    #EvaluacionControl
    #------------------
    db.EvaluacionControl.update_or_insert((db.EvaluacionControl.id==1), id=1, TratamientoRiesgoId=1, DetallePoliticaId=1, BenchControlId=1, ProcesoId=1, ActivoTiId=1, CumplimientoControl='T', EfectividadControl='F', NivelMadurezId=1, TipoRevisionId=1, EscenarioRiesgo="El sistema no cuenta con matrices de segregación de funciones documentada y aprobada.", Hallazgo="Hallazgo 1", Recomendacion="Configurar las matrices de segregación de funcines.", ResponsableControl="ControlResp", AprobacionJefeAuditoria='T')
    db.EvaluacionControl.update_or_insert((db.EvaluacionControl.id==2), id=2,  TratamientoRiesgoId=2, DetallePoliticaId=2, BenchControlId=2, ProcesoId=2, ActivoTiId=2, CumplimientoControl='T', EfectividadControl='T', NivelMadurezId=2, TipoRevisionId=2, EscenarioRiesgo="El sistema no puede forzar el uso de password robusto en los usuarios.", Hallazgo="Hallazgo 2", Recomendacion="Configurar el sistema para que force el uso de password robusto.", ResponsableControl="ControlResp", AprobacionJefeAuditoria='T')
    db.EvaluacionControl.update_or_insert((db.EvaluacionControl.id==3), id=3,  TratamientoRiesgoId=3, DetallePoliticaId=3, BenchControlId=3, ProcesoId=3, ActivoTiId=3, CumplimientoControl='T', EfectividadControl='F', NivelMadurezId=3, TipoRevisionId=3, EscenarioRiesgo="El sistema no cuenta con matrices de segregación de funciones documentada y aprobada.", Hallazgo="Hallazgo 3", Recomendacion="Configurar las matrices de segregación de funcines.", ResponsableControl="ControlResp", AprobacionJefeAuditoria='T')
    db.EvaluacionControl.update_or_insert((db.EvaluacionControl.id==4), id=4,  TratamientoRiesgoId=4, DetallePoliticaId=4, BenchControlId=4, ProcesoId=4, ActivoTiId=4, CumplimientoControl='F', EfectividadControl='T', NivelMadurezId=4, TipoRevisionId=1, AlcanceRevisionId=1, EscenarioRiesgo="El sistema no cuenta con matrices de segregación de funciones documentada y aprobada.", Hallazgo="Hallazgo 4", Recomendacion="Configurar las matrices de segregación de funcines.", ResponsableControl="ControlResp", AprobacionJefeAuditoria='T')
    db.EvaluacionControl.update_or_insert((db.EvaluacionControl.id==5), id=5,  TratamientoRiesgoId=5, DetallePoliticaId=5, BenchControlId=5, ProcesoId=5, ActivoTiId=5, CumplimientoControl='T', EfectividadControl='F', NivelMadurezId=1, TipoRevisionId=2, EscenarioRiesgo="", Hallazgo="Hallazgo 5", Recomendacion="El sistema no cuenta con matrices de segregación de funciones documentada y aprobada.", ResponsableControl="Configurar las matrices de segregación de funcines.", AprobacionJefeAuditoria='T')
    db.EvaluacionControl.update_or_insert((db.EvaluacionControl.id==6), id=6,  TratamientoRiesgoId=6, DetallePoliticaId=1, BenchControlId=6, ProcesoId=1, ActivoTiId=1, CumplimientoControl='F', EfectividadControl='T', NivelMadurezId=2, TipoRevisionId=3, EscenarioRiesgo="El sistema no puede forzar el uso de password robusto en los usuarios.", Hallazgo="Hallazgo 6", Recomendacion="El sistema no puede forzar el uso de password robusto en los usuarios.", ResponsableControl="Configurar el sistema para que force el uso de password robusto.", AprobacionJefeAuditoria='T')
    db.EvaluacionControl.update_or_insert((db.EvaluacionControl.id==7), id=7,  TratamientoRiesgoId=7, DetallePoliticaId=2, BenchControlId=7, ProcesoId=2, ActivoTiId=2, CumplimientoControl='T', EfectividadControl='F', NivelMadurezId=3, TipoRevisionId=1, EscenarioRiesgo="El sistema no cuenta con matrices de segregación de funciones documentada y aprobada.", Hallazgo="Hallazgo 7", Recomendacion="El sistema no cuenta con matrices de segregación de funciones documentada y aprobada.", ResponsableControl="ControlResp", AprobacionJefeAuditoria='T')
    db.EvaluacionControl.update_or_insert((db.EvaluacionControl.id==8), id=8,  TratamientoRiesgoId=8, DetallePoliticaId=3, BenchControlId=8, ProcesoId=3, ActivoTiId=3, CumplimientoControl='F', EfectividadControl='T', NivelMadurezId=4, TipoRevisionId=2, EscenarioRiesgo="El sistema no cuenta con matrices de segregación de funciones documentada y aprobada.", Hallazgo="Hallazgo 8", Recomendacion="Configurar las matrices de segregación de funcines.", ResponsableControl="ControlResp", AprobacionJefeAuditoria='T')
    db.EvaluacionControl.update_or_insert((db.EvaluacionControl.id==9), id=9,  TratamientoRiesgoId=7, DetallePoliticaId=4, BenchControlId=7, ProcesoId=4, ActivoTiId=3, CumplimientoControl='T', EfectividadControl='F', NivelMadurezId=1, TipoRevisionId=3, EscenarioRiesgo="Escenario Riesgo 5", Hallazgo="Hallazgo 9", Recomendacion="El sistema no puede forzar el uso de password robusto en los usuarios.", ResponsableControl="Configurar el sistema para que force el uso de password robusto.", AprobacionJefeAuditoria='T')
    #--------------------------------
    #Medicion CVSS Evaluacion Control
    #--------------------------------
    db.ControlCvss.update_or_insert((db.ControlCvss.id==1), id=1, EvaluacionControlId=1, ValorMetricaId=2, AprobacionJefeRiesgo='T')
    db.ControlCvss.update_or_insert((db.ControlCvss.id==2), id=2, EvaluacionControlId=1, ValorMetricaId=6, AprobacionJefeRiesgo='T')
    db.ControlCvss.update_or_insert((db.ControlCvss.id==3), id=3, EvaluacionControlId=1, ValorMetricaId=8, AprobacionJefeRiesgo='T')
    db.ControlCvss.update_or_insert((db.ControlCvss.id==4), id=4, EvaluacionControlId=1, ValorMetricaId=10, AprobacionJefeRiesgo='T')
    db.ControlCvss.update_or_insert((db.ControlCvss.id==5), id=5, EvaluacionControlId=1, ValorMetricaId=13, AprobacionJefeRiesgo='T')
    db.ControlCvss.update_or_insert((db.ControlCvss.id==6), id=6, EvaluacionControlId=1, ValorMetricaId=16, AprobacionJefeRiesgo='T')
    db.ControlCvss.update_or_insert((db.ControlCvss.id==7), id=7, EvaluacionControlId=1, ValorMetricaId=18, AprobacionJefeRiesgo='T')
    db.ControlCvss.update_or_insert((db.ControlCvss.id==8), id=8, EvaluacionControlId=1, ValorMetricaId=20, AprobacionJefeRiesgo='T')
    #---------------
    #Configuracion
    #---------------
    db.Configuracion.update_or_insert((db.Configuracion.id==1), id=1, Lenguaje="Espanol", Organizacion='X')

def user():
    """
    exposes:
    http://..../[app]/default/user/login
    http://..../[app]/default/user/logout
    http://..../[app]/default/user/register
    http://..../[app]/default/user/profile
    http://..../[app]/default/user/retrieve_password
    http://..../[app]/default/user/change_password
    http://..../[app]/default/user/manage_users (requires membership in
    use @auth.requires_login()
        @auth.requires_membership('group name')
        @auth.requires_permission('read','table name',record_id)
    to decorate functions that need access control
    """
    if request.args(0) == 'login' and ("@" in str(request.post_vars.username)):
        redirect(URL('default','index'))
    return dict(form=auth())

def download():
    """
    allows downloading of uploaded files
    http://..../[app]/default/download/[filename]
    """
    return response.download(request, db)

def call():
    """
    exposes services. for example:
    http://..../[app]/default/call/jsonrpc
    decorate with @services.jsonrpc the functions to expose
    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv
    """
    return service()

@auth.requires_signature()
def data():
    """
    http://..../[app]/default/data/tables
    http://..../[app]/default/data/create/[table]
    http://..../[app]/default/data/read/[table]/[id]
    http://..../[app]/default/data/update/[table]/[id]
    http://..../[app]/default/data/delete/[table]/[id]
    http://..../[app]/default/data/select/[table]
    http://..../[app]/default/data/search/[table]
    but URLs must be signed, i.e. linked with
      A('table',_href=URL('data/tables',user_signature=True))
    or with the signed load operator
      LOAD('default','data.load',args='tables',ajax=True,user_signature=True)
    """
    return dict(form=crud())

#------------------------
#Index - Tablero Riesgo
#------------------------
@auth.requires_login()
def index():
    return TableroRiesgo()

@auth.requires_login()
def ReporteMapaCalor():
    return TableroRiesgo()

@auth.requires_login()
def ReporteRiesgo():
    return TableroRiesgo()

@auth.requires_login()
def ReporteFactorRiesgo():
    return TableroRiesgo()

@auth.requires_login()
def ReporteControlTest():
    return TableroRiesgo()

#----------------
#Menu Inventario
#----------------
@auth.requires_login()
def TipoObjetivo():
    db.TipoObjetivo.id.readable = False
    db.TipoObjetivo.AprobacionJefeRiesgo.writable = False
    db.TipoObjetivo.AprobacionAnalistaRiesgo.writable = False
    db.TipoObjetivo.LogJefeRiesgo.writable = False
    db.TipoObjetivo.LogAnalistaRiesgo.writable = False
    Tabla = 'TipoObjetivo'
    fields = (db.TipoObjetivo.Nombre, db.TipoObjetivo.Descripcion, db.TipoObjetivo.AprobacionJefeRiesgo)
    if request.vars.get('keywords'):
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1", base64.b64encode(request.vars.get('keywords'))] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0", base64.b64encode(request.vars.get('keywords'))]))]
    else:
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]
    if auth.has_membership(role='admin') or auth.has_membership(role='riskManager'):
        ActualizaAprobacion(Tabla)
        return dict(form=SQLFORM.grid(db.TipoObjetivo, links=links, fields=fields, searchable=True, create=True, editable=True, deletable=True, user_signature=True, paginate=10, maxtextlength=500))
    elif auth.has_membership(role='riskAnalyst'):
        ActualizaAprobacion(Tabla)
        return dict(form=SQLFORM.grid(db.TipoObjetivo, links=links, fields=fields, searchable=True, create=True, editable=True, deletable=False, user_signature=True, paginate=10, maxtextlength=500))
    elif  auth.has_membership(role='riskOwner') or auth.has_membership(role='auditManager') or auth.has_membership(role='auditAnalyst') or auth.has_membership(role='guest'):
        query=db.TipoObjetivo.AprobacionJefeRiesgo=='T'
        return dict(form=SQLFORM.grid(query=query, fields=fields, searchable=True, create=False, editable=False, deletable=False, user_signature=True, paginate=10, maxtextlength=500))
    else:
        redirect(URL('default','index'))

@auth.requires_login()
def ClasificacionRiesgo():
    db.ClasificacionRiesgo.id.readable=False
    db.ClasificacionRiesgo.AprobacionJefeRiesgo.writable=False
    db.ClasificacionRiesgo.AprobacionAnalistaRiesgo.writable=False
    db.ClasificacionRiesgo.LogJefeRiesgo.writable=False
    db.ClasificacionRiesgo.LogAnalistaRiesgo.writable=False
    Tabla = 'ClasificacionRiesgo'
    fields = (db.ClasificacionRiesgo.Nombre, db.ClasificacionRiesgo.Descripcion, db.ClasificacionRiesgo.AprobacionJefeRiesgo)
    if request.vars.get('keywords'):
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1", base64.b64encode(request.vars.get('keywords'))] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0", base64.b64encode(request.vars.get('keywords'))]))]
    else:
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]
    if auth.has_membership(role='admin') or auth.has_membership(role='riskManager'):
        ActualizaAprobacion(Tabla)
        return dict(form=SQLFORM.grid(db.ClasificacionRiesgo, fields=fields, links=links, searchable=True, create=True, editable=True, deletable=True, user_signature=True, paginate=10, maxtextlength=500))
    elif auth.has_membership(role='riskAnalyst'):
        ActualizaAprobacion(Tabla)
        return dict(form=SQLFORM.grid(db.ClasificacionRiesgo, fields=fields, links=links, searchable=True, create=True, editable=True, deletable=False, user_signature=True, paginate=10, maxtextlength=500))
    elif  auth.has_membership(role='riskOwner') or auth.has_membership(role='auditManager') or auth.has_membership(role='auditAnalyst') or auth.has_membership(role='guest'):
        query = db.ClasificacionRiesgo.AprobacionJefeRiesgo=='T'
        return dict(form=SQLFORM.grid(query=query, fields=fields, searchable=True, create=False, deletable=False,editable=False, user_signature=True, paginate=10, maxtextlength=500))
    else:
        redirect(URL('default','index'))

@auth.requires_login()
def TipoTratamientoRiesgo():
    db.TipoTratamientoRiesgo.id.readable = False
    db.TipoTratamientoRiesgo.AprobacionJefeRiesgo.writable=False
    db.TipoTratamientoRiesgo.AprobacionAnalistaRiesgo.writable=False
    db.TipoTratamientoRiesgo.LogJefeRiesgo.writable=False
    db.TipoTratamientoRiesgo.LogAnalistaRiesgo.writable=False
    #db.TipoTratamientoRiesgo.AnalistaRiesgo.writable=False
    Tabla = 'TipoTratamientoRiesgo'
    fields = (db.TipoTratamientoRiesgo.Nombre, db.TipoTratamientoRiesgo.Descripcion, db.TipoTratamientoRiesgo.AprobacionJefeRiesgo)
    if request.vars.get('keywords'):
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1", base64.b64encode(request.vars.get('keywords'))] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0", base64.b64encode(request.vars.get('keywords'))]))]
    else:
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]        
    if auth.has_membership(role='admin') or auth.has_membership(role='riskManager'):
        ActualizaAprobacion(Tabla)
        return dict(form=SQLFORM.grid(db.TipoTratamientoRiesgo, fields=fields, links=links, searchable=True, create=True, editable=True, deletable=True, user_signature=True, paginate=10, maxtextlength=500))
    elif auth.has_membership(role='riskAnalyst'):
        ActualizaAprobacion(Tabla)
        return dict(form=SQLFORM.grid(db.TipoTratamientoRiesgo, fields=fields, links=links, searchable=True, create=True, editable=True, deletable=False, user_signature=True, paginate=10, maxtextlength=500))
    elif  auth.has_membership(role='riskOwner') or auth.has_membership(role='auditManager') or auth.has_membership(role='auditAnalyst') or auth.has_membership(role='guest'):
        query = db.TipoTratamientoRiesgo.AprobacionJefeRiesgo == 'T'
        return dict(form=SQLFORM.grid(query=query, fields=fields, searchable=True,create=False, editable=False, deletable=False,user_signature=True, paginate=10, maxtextlength=500))
    else:
        redirect(URL('default','index'))

@auth.requires_login()
def GrupoFactorRiesgo():
    #db.TipoVulnerabilidad.id.readable = False
    db.TipoVulnerabilidad.LogJefeRiesgo.writable = False
    db.TipoVulnerabilidad.LogAnalistaRiesgo.writable = False
    db.TipoVulnerabilidad.AprobacionJefeRiesgo.writable = False
    db.TipoVulnerabilidad.AprobacionAnalistaRiesgo.writable = False
    Tabla = 'TipoVulnerabilidad'
    fields = (db.TipoVulnerabilidad.id, db.TipoVulnerabilidad.Nombre, db.TipoVulnerabilidad.Descripcion, db.TipoVulnerabilidad.AprobacionJefeRiesgo)
    if request.vars.get('keywords'):
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1", base64.b64encode(request.vars.get('keywords'))] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0", base64.b64encode(request.vars.get('keywords'))]))]
    else:
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]
    if auth.has_membership(role='admin') or auth.has_membership(role='riskManager'):
        ActualizaAprobacion(Tabla)
        return dict(form = SQLFORM.grid(db.TipoVulnerabilidad, fields=fields, links=links, searchable=True, create=True, editable=True, deletable=True, user_signature=True, paginate=10, maxtextlength=500))
    elif auth.has_membership(role='riskAnalyst'):
        ActualizaAprobacion(Tabla)
        return dict(form = SQLFORM.grid(db.TipoVulnerabilidad, fields=fields, links=links, searchable=True, create=True, editable=True, deletable=False, user_signature=True, paginate=10, maxtextlength=500))
    elif  auth.has_membership(role='riskOwner') or auth.has_membership(role='auditManager') or auth.has_membership(role='auditAnalyst') or auth.has_membership(role='guest'):
        query = db.TipoVulnerabilidad.AprobacionJefeRiesgo == 'T'
        return dict(form = SQLFORM.grid(query=query, fields=fields, searchable=True, create=False, editable=False, deletable=False, user_signature=True, paginate=10, maxtextlength=500))
    else:
        redirect(URL('default','index'))

@auth.requires_login()
def ClasificacionControl():
    db.ClasificacionControl.id.readable=False
    db.ClasificacionControl.AprobacionJefeRiesgo.writable=False
    db.ClasificacionControl.AprobacionAnalistaRiesgo.writable=False
    db.ClasificacionControl.LogJefeRiesgo.writable=False
    db.ClasificacionControl.LogAnalistaRiesgo.writable=False
    Tabla = 'ClasificacionControl'
    fields = (db.ClasificacionControl.Nombre, db.ClasificacionControl.Descripcion, db.ClasificacionControl.AprobacionJefeRiesgo)
    if request.vars.get('keywords'):
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1", base64.b64encode(request.vars.get('keywords'))] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0", base64.b64encode(request.vars.get('keywords'))]))]
    else:
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]
    if auth.has_membership(role='admin') or auth.has_membership(role='riskManager'):
        ActualizaAprobacion(Tabla)
        return dict(form=SQLFORM.grid(db.ClasificacionControl, fields=fields, links=links, deletable=True, searchable=True, create=True, editable=True, user_signature=True, paginate=10, maxtextlength=500))
    elif auth.has_membership(role='riskAnalyst'):
        ActualizaAprobacion(Tabla)
        return dict(form=SQLFORM.grid(db.ClasificacionControl, fields=fields, links=links, deletable=False, searchable=True, create=True, editable=True, user_signature=True, paginate=10, maxtextlength=500))
    elif  auth.has_membership(role='riskOwner') or auth.has_membership(role='auditManager') or auth.has_membership(role='auditAnalyst') or auth.has_membership(role='guest'):
        query = db.ClasificacionControl.AprobacionJefeRiesgo == 'T'
        return dict(form=SQLFORM.grid(query=query, fields=fields, searchable=True, deletable=False, create=False,editable=False, user_signature=True, paginate=10, maxtextlength=500))
    else:
        redirect(URL('default','index'))

@auth.requires_login()
def TipoControl():
    db.TipoControl.id.readable = False
    db.TipoControl.AprobacionJefeRiesgo.writable=False
    db.TipoControl.AprobacionAnalistaRiesgo.writable=False
    db.TipoControl.LogJefeRiesgo.writable=False
    db.TipoControl.LogAnalistaRiesgo.writable=False
    Tabla = 'TipoControl'
    fields = (db.TipoControl.Nombre, db.TipoControl.Descripcion, db.TipoControl.AprobacionJefeRiesgo)
    if request.vars.get('keywords'):
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1", base64.b64encode(request.vars.get('keywords'))] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0", base64.b64encode(request.vars.get('keywords'))]))]
    else:
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]
    if auth.has_membership(role='admin') or auth.has_membership(role='riskManager'):
        ActualizaAprobacion(Tabla)
        return dict(form=SQLFORM.grid(db.TipoControl, fields=fields, links=links, searchable=True, deletable=True, create=True, editable=True, user_signature=True, paginate=10, maxtextlength=500))
    elif auth.has_membership(role='riskAnalyst'):
        ActualizaAprobacion(Tabla)
        return dict(form=SQLFORM.grid(db.TipoControl, fields=fields, links=links, searchable=True, deletable=False, create=True, editable=True, user_signature=True, paginate=10, maxtextlength=500))
    elif  auth.has_membership(role='riskOwner') or auth.has_membership(role='auditManager') or auth.has_membership(role='auditAnalyst') or auth.has_membership(role='guest'):
        query = db.TipoControl.AprobacionJefeRiesgo == 'T'
        return dict(form=SQLFORM.grid(query=query, fields=fields, searchable=True,deletable=False, create=False, editable=False, user_signature=True, paginate=10, maxtextlength=500))
    else:
        redirect(URL('default','index'))

@auth.requires_login()
def GrupoControl():
    #db.CatalogoControl.id.readable = False
    db.CatalogoControl.AprobacionJefeRiesgo.writable=False
    db.CatalogoControl.AprobacionAnalistaRiesgo.writable=False
    db.CatalogoControl.LogJefeRiesgo.writable=False
    db.CatalogoControl.LogAnalistaRiesgo.writable=False
    Tabla = 'CatalogoControl'
    fields = (db.CatalogoControl.id, db.CatalogoControl.Nombre, db.CatalogoControl.Descripcion, db.CatalogoControl.Baseline, db.CatalogoControl.AprobacionJefeRiesgo)
    if request.vars.get('keywords'):
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1", base64.b64encode(request.vars.get('keywords'))] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0", base64.b64encode(request.vars.get('keywords'))]))]
    else:
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]
    if auth.has_membership(role='admin') or auth.has_membership(role='riskManager'):
        ActualizaAprobacion(Tabla)
        return dict(form=SQLFORM.grid(db.CatalogoControl, fields=fields, links=links, searchable=True, deletable=True, create=True, editable=True, user_signature=True, paginate=10, maxtextlength=500))
    elif auth.has_membership(role='riskAnalyst'):
        ActualizaAprobacion(Tabla)
        return dict(form=SQLFORM.grid(db.CatalogoControl, fields=fields, links=links, searchable=True, deletable=False, create=True, editable=True, user_signature=True, paginate=10, maxtextlength=500))
    elif  auth.has_membership(role='riskOwner') or auth.has_membership(role='auditManager') or auth.has_membership(role='auditAnalyst') or auth.has_membership(role='guest'):
        query = db.CatalogoControl.AprobacionJefeRiesgo=='T'
        return dict(form=SQLFORM.grid(query=query, fields=fields, searchable=True,deletable=False, create=False, editable=False, user_signature=True, paginate=10, maxtextlength=500))
    else:
        redirect(URL('default','index'))

@auth.requires_login()
def NivelMadurez():
    db.NivelMadurez.id.readable = False
    db.NivelMadurez.AprobacionJefeRiesgo.writable=False
    db.NivelMadurez.AprobacionAnalistaRiesgo.writable=False
    db.NivelMadurez.LogJefeRiesgo.writable=False
    db.NivelMadurez.LogAnalistaRiesgo.writable=False
    Tabla = 'NivelMadurez'
    fields = (db.NivelMadurez.Nombre, db.NivelMadurez.Descripcion, db.NivelMadurez.Valor, db.NivelMadurez.AprobacionJefeRiesgo)
    if request.vars.get('keywords'):
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1", base64.b64encode(request.vars.get('keywords'))] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0", base64.b64encode(request.vars.get('keywords'))]))]
    else:
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]
    if auth.has_membership(role='admin') or auth.has_membership(role='riskManager'):
        ActualizaAprobacion(Tabla)
        return dict(form=SQLFORM.grid(db.NivelMadurez, fields=fields, links=links, searchable=True, deletable=True, create=True, editable=True,  user_signature=True, paginate=10, maxtextlength=500))
    elif auth.has_membership(role='riskAnalyst'):
        ActualizaAprobacion(Tabla)
        return dict(form=SQLFORM.grid(db.NivelMadurez, fields=fields, links=links, searchable=True, deletable=False, create=True, editable=True,  user_signature=True, paginate=10, maxtextlength=500))
    elif  auth.has_membership(role='riskOwner') or auth.has_membership(role='auditManager') or auth.has_membership(role='auditAnalyst') or auth.has_membership(role='guest'):
        query = db.NivelMadurez.AprobacionJefeRiesgo=='T'
        return dict(form=SQLFORM.grid(query=query, fields=fields, searchable=True, deletable=False, create=False, editable=False, user_signature=True, paginate=10, maxtextlength=500))
    else:
        redirect(URL('default','index'))

'''
@auth.requires_login()
def Direccion():
    db.Direccion.AprobacionJefeRiesgo.writable=False
    db.Direccion.AprobacionAnalistaRiesgo.writable=False
    db.Direccion.LogJefeRiesgo.writable=False
    db.Direccion.LogAnalistaRiesgo.writable=False
    Tabla = 'Direccion'
    fields = (db.Direccion.id, db.Direccion.Nombre, db.Direccion.RegionId, db.Direccion.Responsable, db.Direccion.AprobacionJefeRiesgo)
    if request.vars.get('keywords'):
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1", base64.b64encode(request.vars.get('keywords'))] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0", base64.b64encode(request.vars.get('keywords'))]))]
    else:
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]
    if auth.has_membership(role='admin') or auth.has_membership(role='riskManager'):
        ActualizaAprobacion(Tabla)
        return dict(form=SQLFORM.grid(db.Direccion, fields=fields, links=links, searchable=True, create=True, deletable=True, editable=True, user_signature=True, paginate=10, maxtextlength=500))
    elif auth.has_membership(role='riskAnalyst'):
        ActualizaAprobacion(Tabla)
        return dict(form=SQLFORM.grid(db.Direccion, fields=fields, links=links, searchable=True, create=True, deletable=False, editable=True, user_signature=True, paginate=10, maxtextlength=500))
    elif  auth.has_membership(role='riskOwner') or auth.has_membership(role='auditManager') or auth.has_membership(role='auditAnalyst') or auth.has_membership(role='guest'):
        query = db.Direccion.AprobacionJefeRiesgo=='T'
        return dict(form=SQLFORM.grid(query=query, fields=fields, searchable=True, create=False, deletable=False, editable=False, user_signature=True, paginate=10, maxtextlength=500))
    else:
        redirect(URL('default','index'))
'''

#----------------
#Menu Contexto
#----------------
@auth.requires_login()
def CriterioImpacto():
    db.CriterioImpacto.id.readable = False
    db.CriterioImpacto.LogJefeRiesgo.writable = False
    db.CriterioImpacto.AprobacionJefeRiesgo.writable = False
    db.CriterioImpacto.Valor.writable = False
    db.CriterioImpacto.Nombre.writable = False
    #db.CriterioImpacto.
    Tabla = 'CriterioImpacto'
    fields = (db.CriterioImpacto.Nombre, db.CriterioImpacto.Valor, db.CriterioImpacto.Descripcion, db.CriterioImpacto.AprobacionJefeRiesgo)
    if request.vars.get('keywords'):
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1", base64.b64encode(request.vars.get('keywords'))] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0", base64.b64encode(request.vars.get('keywords'))]))]
    else:
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]
 
    if auth.has_membership(role='admin') or auth.has_membership(role='riskManager') or auth.has_membership(role='riskAnalyst'):
        ActualizaAprobacion(Tabla)
        return dict(form=SQLFORM.grid(db.CriterioImpacto, fields=fields, links=links, searchable=True, create=False, editable=True, deletable=False, user_signature=True, paginate=10, maxtextlength=500))
    elif  auth.has_membership(role='riskOwner') or auth.has_membership(role='auditManager') or auth.has_membership(role='auditAnalyst') or auth.has_membership(role='guest'):
        query = db.CriterioImpacto.AprobacionJefeRiesgo == 'T'
        return dict(form=SQLFORM.grid(query=query, fields=fields, searchable=True, create=False, editable=False, deletable=False, user_signature=True, paginate=10, maxtextlength=500))
    else:
        redirect(URL('default','index'))

@auth.requires_login()
def CriterioProbabilidad():
    db.CriterioProbabilidad.LogJefeRiesgo.writable = False
    db.CriterioProbabilidad.AprobacionJefeRiesgo.writable = False
    db.CriterioProbabilidad.Valor.writable = False
    db.CriterioProbabilidad.Nombre.writable = False
    db.CriterioProbabilidad.id.readable = False
    Tabla = 'CriterioProbabilidad'
    fields = (db.CriterioProbabilidad.Nombre, db.CriterioProbabilidad.Valor, db.CriterioProbabilidad.Descripcion, db.CriterioProbabilidad.AprobacionJefeRiesgo)
    if request.vars.get('keywords'):
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1", base64.b64encode(request.vars.get('keywords'))] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0", base64.b64encode(request.vars.get('keywords'))]))]
    else:
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]

    if auth.has_membership(role='admin') or auth.has_membership(role='riskManager') or auth.has_membership(role='riskAnalyst'):
        ActualizaAprobacion(Tabla)
        return dict(form=SQLFORM.grid(db.CriterioProbabilidad, fields=fields, links=links, searchable=True, create=False, editable=True, deletable=False, user_signature=True, paginate=10, maxtextlength=500))
    elif  auth.has_membership(role='riskOwner') or auth.has_membership(role='auditManager') or auth.has_membership(role='auditAnalyst') or auth.has_membership(role='guest'):
        query = db.CriterioProbabilidad.AprobacionJefeRiesgo == 'T'
        return dict(form=SQLFORM.grid(query=query, fields=fields, searchable=True, create=False, editable=False, deletable=False, user_signature=True, paginate=10, maxtextlength=500))
    else:
        redirect(URL('default','index'))

@auth.requires_login()
def CriterioRiesgo():
    db.CriterioRiesgo.LogJefeRiesgo.writable = False
    db.CriterioRiesgo.AprobacionJefeRiesgo.writable = False
    db.CriterioRiesgo.CriterioImpactoId.writable = False
    db.CriterioRiesgo.RiesgoValor.writable = False
    db.CriterioRiesgo.CriterioProbabilidadId.writable = False
    db.CriterioRiesgo.Nombre.writable = False
    db.CriterioRiesgo.id.readable = False
    #db.CriterioRiesgo.LogJefeRiesgo.readable = False
    #db.CriterioRiesgo.AprobacionJefeRiesgo.readable = False
    Tabla = 'CriterioRiesgo'
    fields = (db.CriterioRiesgo.CriterioImpactoId, db.CriterioRiesgo.CriterioProbabilidadId, db.CriterioRiesgo.Nombre, db.CriterioRiesgo.RiesgoValor, db.CriterioRiesgo.Descripcion, db.CriterioRiesgo.AprobacionJefeRiesgo)
    if request.vars.get('keywords'):
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1", base64.b64encode(request.vars.get('keywords'))] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0", base64.b64encode(request.vars.get('keywords'))]))]
    else:
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]

    if auth.has_membership(role='admin') or auth.has_membership(role='riskManager') or auth.has_membership(role='riskAnalyst'):
        ActualizaAprobacion(Tabla)
        return dict(form=SQLFORM.grid(db.CriterioRiesgo, fields=fields, links=links, searchable=True, create=False, editable=True, deletable=False, user_signature=True, paginate=10, maxtextlength=500))
    elif  auth.has_membership(role='riskOwner') or auth.has_membership(role='auditManager') or auth.has_membership(role='auditAnalyst') or auth.has_membership(role='guest'):
        query = db.CriterioRiesgo.AprobacionJefeRiesgo == 'T'
        return dict(form=SQLFORM.grid(query=query, fields=fields, searchable=True, create=False, editable=False, deletable=False, user_signature=True, paginate=10, maxtextlength=500))
    else:
        redirect(URL('default','index'))

@auth.requires_login()
def Organizacion():
    db.Organizacion.LogJefeRiesgo.writable = False
    db.Organizacion.AprobacionJefeRiesgo.writable = False
    db.Organizacion.LogAnalistaRiesgo.writable = False
    db.Organizacion.AprobacionAnalistaRiesgo.writable = False
    Tabla = 'Organizacion'
    if request.vars.get('keywords'):
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1", base64.b64encode(request.vars.get('keywords'))] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0", base64.b64encode(request.vars.get('keywords'))]))]
    else:
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]
    fields = (db.Organizacion.id, db.Organizacion.Nombre, db.Organizacion.Descripcion, db.Organizacion.AprobacionJefeRiesgo)

    if auth.has_membership(role='admin') or auth.has_membership(role='riskManager'):
        ActualizaAprobacion(Tabla)
        return dict(form=SQLFORM.grid(db.Organizacion, fields=fields, links=links, searchable=True, create=True, editable=True, deletable=True, user_signature=True, paginate=10, maxtextlength=500))
    elif auth.has_membership(role='riskAnalyst'):
        ActualizaAprobacion(Tabla)
        return dict(form=SQLFORM.grid(db.Organizacion, fields=fields, links=links, searchable=True, create=True, editable=True, deletable=False, user_signature=True, paginate=10, maxtextlength=500))
    elif  auth.has_membership(role='riskOwner') or auth.has_membership(role='auditManager') or auth.has_membership(role='auditAnalyst') or auth.has_membership(role='guest'):
        query = db.Organizacion.AprobacionJefeRiesgo == 'T'
        return dict(form=SQLFORM.grid(query=query, searchable=True, create=False, editable=False, deletable=False, user_signature=True, paginate=10, maxtextlength=500, fields=fields))
    else:
        redirect(URL('default','index'))

@auth.requires_login()
def ObjetivoOrganizacion():
    db.ObjetivoOrganizacion.LogJefeRiesgo.writable = False
    db.ObjetivoOrganizacion.AprobacionJefeRiesgo.writable = False
    db.ObjetivoOrganizacion.LogAnalistaRiesgo.writable = False
    db.ObjetivoOrganizacion.AprobacionAnalistaRiesgo.writable = False
    Tabla = 'ObjetivoOrganizacion'
    if request.vars.get('keywords'):
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1", base64.b64encode(request.vars.get('keywords'))] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0", base64.b64encode(request.vars.get('keywords'))]))]
    else:
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]
    fields = (db.ObjetivoOrganizacion.id, db.ObjetivoOrganizacion.Nombre, db.ObjetivoOrganizacion.Descripcion, db.ObjetivoOrganizacion.TipoObjetivoId, db.ObjetivoOrganizacion.AprobacionJefeRiesgo)
    if auth.has_membership(role='admin') or auth.has_membership(role='riskManager'):
        ActualizaAprobacion(Tabla)
        return dict(form=SQLFORM.grid(db.ObjetivoOrganizacion, fields=fields, links=links, searchable=True, create=True, editable=True, deletable=True, user_signature=True, paginate=10, maxtextlength=500))
    elif auth.has_membership(role='riskAnalyst'):
        ActualizaAprobacion(Tabla)
        return dict(form=SQLFORM.grid(db.ObjetivoOrganizacion, fields=fields, links=links, searchable=True, create=True, editable=True, deletable=False, user_signature=True, paginate=10, maxtextlength=500))
    elif  auth.has_membership(role='riskOwner') or auth.has_membership(role='auditManager') or auth.has_membership(role='auditAnalyst') or auth.has_membership(role='guest'):
        query = db.ObjetivoOrganizacion.AprobacionJefeRiesgo == 'T'
        return dict(form=SQLFORM.grid(query=query, searchable=True, create=False, editable=False, deletable=False, user_signature=True, paginate=10, maxtextlength=500, fields=fields))
    else:
        redirect(URL('default','index'))

@auth.requires_login()
def RolResponsabilidad():
    db.RolResponsabilidad.LogJefeRiesgo.writable = False
    db.RolResponsabilidad.AprobacionJefeRiesgo.writable = False
    db.RolResponsabilidad.LogAnalistaRiesgo.writable = False
    db.RolResponsabilidad.AprobacionAnalistaRiesgo.writable = False
    Tabla = 'RolResponsabilidad'
    if request.vars.get('keywords'):
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1", base64.b64encode(request.vars.get('keywords'))] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0", base64.b64encode(request.vars.get('keywords'))]))]
    else:
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]

    fields = (db.RolResponsabilidad.id, db.RolResponsabilidad.Rol, db.RolResponsabilidad.Descripcion, db.RolResponsabilidad.AprobacionJefeRiesgo)
    if auth.has_membership(role='admin') or auth.has_membership(role='riskManager'):
        ActualizaAprobacion(Tabla)
        return dict(form=SQLFORM.grid(db.RolResponsabilidad, fields=fields, links=links, searchable=True, create=True, editable=True, deletable=True, user_signature=True, paginate=10, maxtextlength=500))
    elif auth.has_membership(role='riskAnalyst'):
        ActualizaAprobacion(Tabla)
        return dict(form=SQLFORM.grid(db.RolResponsabilidad, fields=fields, links=links, searchable=True, create=True, editable=True, deletable=False, user_signature=True, paginate=10, maxtextlength=500))
    elif  auth.has_membership(role='riskOwner') or auth.has_membership(role='auditManager') or auth.has_membership(role='auditAnalyst') or auth.has_membership(role='guest'):
        query = (db.RolResponsabilidad.AprobacionJefeRiesgo=='T')
        return dict(form=SQLFORM.grid(query=query, searchable=True, create=False, editable=False, deletable=False, user_signature=True, paginate=10, maxtextlength=500, fields=fields))
    else:
        redirect(URL('default','index'))

@auth.requires_login()
def CatalogoPolitica():
    db.CatalogoPolitica.AprobacionJefeRiesgo.writable=False
    db.CatalogoPolitica.AprobacionAnalistaRiesgo.writable=False
    db.CatalogoPolitica.LogJefeRiesgo.writable=False
    db.CatalogoPolitica.LogAnalistaRiesgo.writable=False
    Tabla = 'CatalogoPolitica'
    fields = (db.CatalogoPolitica.id, db.CatalogoPolitica.Nombre, db.CatalogoPolitica.Version, db.CatalogoPolitica.FechaCreacion, db.CatalogoPolitica.Descripcion, db.CatalogoPolitica.Archivo, db.CatalogoPolitica.AprobacionJefeRiesgo)
    if request.vars.get('keywords'):
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1", base64.b64encode(request.vars.get('keywords'))] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0", base64.b64encode(request.vars.get('keywords'))]))]
    else:
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]

    if auth.has_membership(role='admin') or auth.has_membership(role='riskManager'):
        ActualizaAprobacion(Tabla)
        return dict(form = SQLFORM.grid(db.CatalogoPolitica, fields=fields, links=links, searchable=True, create=True, editable=True, deletable=True, user_signature=True, paginate=10, maxtextlength=500))
    elif auth.has_membership(role='riskAnalyst'):
        ActualizaAprobacion(Tabla)
        return dict(form = SQLFORM.grid(db.CatalogoPolitica, fields=fields, links=links, searchable=True, create=True, editable=True, deletable=False, user_signature=True, paginate=10, maxtextlength=500))
    elif  auth.has_membership(role='riskOwner') or auth.has_membership(role='auditManager') or auth.has_membership(role='auditAnalyst') or auth.has_membership(role='guest'):
        query=(db.CatalogoPolitica.AprobacionJefeRiesgo=='T')
        return dict(form = SQLFORM.grid(query=query, fields=fields, searchable=True, create=False, editable=False, deletable=False, user_signature=True, paginate=10, maxtextlength=500))
    else:
       redirect(URL('default','index'))

@auth.requires_login()
def DetallePolitica():
    db.DetallePolitica.AprobacionJefeRiesgo.writable=False
    db.DetallePolitica.AprobacionAnalistaRiesgo.writable=False
    db.DetallePolitica.LogJefeRiesgo.writable=False
    db.DetallePolitica.LogAnalistaRiesgo.writable=False
    Tabla = 'DetallePolitica'
    fields = (db.DetallePolitica.id, db.DetallePolitica.CatalogoPoliticaId, db.DetallePolitica.Codigo, db.DetallePolitica.Nombre, db.DetallePolitica.Archivo, db.DetallePolitica.AprobacionJefeRiesgo)
    if request.vars.get('keywords'):
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1", base64.b64encode(request.vars.get('keywords'))] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0", base64.b64encode(request.vars.get('keywords'))]))]
    else:
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]

    if auth.has_membership(role='admin') or auth.has_membership(role='riskManager'):
        ActualizaAprobacion(Tabla)
        return dict(form = SQLFORM.grid(db.DetallePolitica, fields=fields, links=links, searchable=True, create=True, editable=True, deletable=True, user_signature=True, paginate=10, maxtextlength=500, orderby=db.DetallePolitica.Codigo ))
    elif auth.has_membership(role='riskAnalyst'):
        ActualizaAprobacion(Tabla)
        return dict(form = SQLFORM.grid(db.DetallePolitica, fields=fields, links=links, searchable=True, create=True, editable=True, deletable=False, user_signature=True, paginate=10, maxtextlength=500, orderby=db.DetallePolitica.Codigo ))
    elif  auth.has_membership(role='riskOwner') or auth.has_membership(role='auditManager') or auth.has_membership(role='auditAnalyst') or auth.has_membership(role='guest'):
        query=(db.DetallePolitica.AprobacionJefeRiesgo=='T')
        return dict(form = SQLFORM.grid(query=query, fields=fields, searchable=True, create=False, editable=False, deletable=False, user_signature=True, paginate=10, maxtextlength=500, orderby=db.DetallePolitica.Codigo))
    else:
        redirect(URL('default','index'))

#--------------------
# Risks & Controls
#--------------------
@auth.requires_login()
def AnalisisRiesgo():
    db.AnalisisRiesgo.AnalistaRiesgo.default = auth.user.username
    #if versionGratuita==1:
    #    numRiesgos=db().select(db.AnalisisRiesgo.id, limitby=(0,10), orderby=db.AnalisisRiesgo.id).last().id
    #    db(db.AnalisisRiesgo.id>numRiesgos).delete()
    #    db(db.TratamientoRiesgo.AnalisisRiesgoId>numRiesgos).delete()
    db.AnalisisRiesgo.LogAnalistaRiesgo.writable=False
    db.AnalisisRiesgo.LogJefeRiesgo.writable=False
    db.AnalisisRiesgo.LogDuenoRiesgo.writable=False
    db.AnalisisRiesgo.AprobacionAnalistaRiesgo.writable=False
    db.AnalisisRiesgo.AprobacionJefeRiesgo.writable=False
    db.AnalisisRiesgo.AprobacionDuenoRiesgo.writable=False
    db.AnalisisRiesgo.AnalistaRiesgo.writable=False
    Tabla = 'AnalisisRiesgo'
    if request.vars.get('keywords'):
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1", base64.b64encode(request.vars.get('keywords'))] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0", base64.b64encode(request.vars.get('keywords'))]))]
    else:
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]
        
    fields=(db.AnalisisRiesgo.id, db.AnalisisRiesgo.Riesgo, db.AnalisisRiesgo.NivelRiesgo, db.AnalisisRiesgo.RiesgoMaterializado, db.AnalisisRiesgo.ImpactoJustificacion, db.AnalisisRiesgo.AprobacionJefeRiesgo)

    if auth.has_membership(role='admin') or auth.has_membership(role='riskManager'):
        ActualizaAprobacion(Tabla)
        return dict(form=SQLFORM.grid(db.AnalisisRiesgo, fields=fields, links=links, searchable=True, create=True, editable=True, deletable=True, user_signature=True, paginate=10, maxtextlength=500))
    elif auth.has_membership(role='riskAnalyst'):
        ActualizaAprobacion(Tabla)
        return dict(form=SQLFORM.grid(db.AnalisisRiesgo, fields=fields, links=links, searchable=True, create=True, editable=True, deletable=False, user_signature=True, paginate=10, maxtextlength=500))
    elif auth.has_membership(role='riskOwner'):
        db.AnalisisRiesgo.Riesgo.writable = False
        db.AnalisisRiesgo.FechaRevision.writable = False
        db.AnalisisRiesgo.EvidenciaRiesgo.writable = False
        db.AnalisisRiesgo.RiesgoMaterializado.writable = False
        db.AnalisisRiesgo.NivelRiesgo.writable = False
        #db.AnalisisRiesgo.ImpactoJustificacion.writable = False
        db.AnalisisRiesgo.DuenoRiesgo.writable = False
        #db.AnalisisRiesgo.AnalisisRiesgo.writable = False
        db.AnalisisRiesgo.LogAnalistaRiesgo.writable = False
        db.AnalisisRiesgo.LogJefeRiesgo.writable = False
        db.AnalisisRiesgo.LogDuenoRiesgo.writable = False
        db.AnalisisRiesgo.AprobacionAnalistaRiesgo.writable = False
        db.AnalisisRiesgo.AprobacionJefeRiesgo.writable = False
        db.AnalisisRiesgo.AprobacionDuenoRiesgo.writable = False
        #ActualizaAprobacion(Tabla)
        riesgoId=[]
        #for a in db(db.AnalisisRiesgo.AprobacionJefeRiesgo=='T').select(db.AnalisisRiesgo.id, db.AnalisisRiesgo.DuenoRiesgo, cacheable=True):
        for a in db(db.AnalisisRiesgo.AprobacionJefeRiesgo=='T').select(db.AnalisisRiesgo.id, db.AnalisisRiesgo.DuenoRiesgo):
            try:
                for b in str(str(a.DuenoRiesgo).replace(' ','')).split(','):
                    if b==auth.user.username:
                        riesgoId.append(int(a.id))
            except:
                pass
        query = db.AnalisisRiesgo.id.belongs(riesgoId)
        return dict(form=SQLFORM.grid(query=query, fields=fields, searchable=True, create=False, editable=True, deletable=False, user_signature=True, paginate=10, maxtextlength=500))
    elif  auth.has_membership(role='auditManager') or auth.has_membership(role='auditAnalyst') or auth.has_membership(role='guest'):
        query = (db.AnalisisRiesgo.AprobacionJefeRiesgo=='T')
        return dict(form=SQLFORM.grid(query=query, fields=fields, searchable=True, create=False, editable=False, deletable=False, user_signature=True, paginate=10, maxtextlength=500))
    else:
        redirect(URL('default','index'))

@auth.requires_login()
def TratamientoRiesgo():
    db.TratamientoRiesgo.CalculoImpacto.readable = False
    db.TratamientoRiesgo.CalculoProbabilidad.readable = False
    db.TratamientoRiesgo.AnalistaRiesgo.default = auth.user.username
    db.TratamientoRiesgo.AnalistaRiesgo.writable=False
    db.TratamientoRiesgo.LogAnalistaRiesgo.writable = False
    db.TratamientoRiesgo.LogJefeRiesgo.writable = False
    db.TratamientoRiesgo.LogResponsableControl.writable = False
    db.TratamientoRiesgo.AprobacionAnalistaRiesgo.writable = False
    db.TratamientoRiesgo.AprobacionJefeRiesgo.writable = False
    db.TratamientoRiesgo.AprobacionResponsableControl.writable = False
    db.TratamientoRiesgo.CalculoImpacto.writable = False
    db.TratamientoRiesgo.CalculoProbabilidad.writable = False
    db.TratamientoRiesgo.CuantificacionCVSS.writable = False
    db.TratamientoRiesgo.VectorCVSS.writable = False
    db.TratamientoRiesgo.CuantificacionCVSSE.writable = False
    db.TratamientoRiesgo.VectorCVSSE.writable = False
    #if riesgosTI==False:
    #db.TratamientoRiesgo.CuantificacionCVSS.readable = False
    #db.TratamientoRiesgo.VectorCVSS.readable = False
    db.TratamientoRiesgo.CuantificacionCVSSE.readable = False
    db.TratamientoRiesgo.VectorCVSSE.readable = False

    Tabla="TratamientoRiesgo"

    if request.vars.get('keywords'):
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1", base64.b64encode(request.vars.get('keywords'))] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0", base64.b64encode(request.vars.get('keywords'))])), lambda row: A(T('CVSS'),_class='button btn btn-info',_href=URL("default","CvssEvaluation", args=[row.id, Tabla, "2", base64.b64encode(request.vars.get('keywords'))], vars=dict(metrica="base") ))   ]
    else:
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"])),  lambda row: A(T('CVSS'),_class='button btn btn-info',_href=URL("default","CvssEvaluation", args=[row.id, Tabla, "2"], vars=dict(metrica="base") )) ]
        
    fields=(db.TratamientoRiesgo.id, db.TratamientoRiesgo.FactorRiesgo, db.TratamientoRiesgo.ProcesoId, db.TratamientoRiesgo.ActivoTiId, db.TratamientoRiesgo.CriterioImpactoId, db.TratamientoRiesgo.CriterioProbabilidadId, db.TratamientoRiesgo.AprobacionJefeRiesgo)

    if auth.has_membership(role='admin') or auth.has_membership(role='riskManager'):
        ActualizaAprobacion(Tabla)
        return dict(form=SQLFORM.grid(db.TratamientoRiesgo, fields=fields, links=links, searchable=True, create=True, editable=True, deletable=True, user_signature=True, paginate=10, maxtextlength=500))
    elif auth.has_membership(role='riskAnalyst'):
        ActualizaAprobacion(Tabla)
        return dict(form=SQLFORM.grid(db.TratamientoRiesgo, fields=fields, links=links, searchable=True, create=True, editable=True, deletable=False, user_signature=True, paginate=10, maxtextlength=500))
    elif auth.has_membership(role='controlResp'):
        #ActualizaAprobacion(Tabla)
        db.TratamientoRiesgo.FechaRevision.writable = False
        db.TratamientoRiesgo.ProcesoId.writable = False
        db.TratamientoRiesgo.ActivoTiId.writable = False
        db.TratamientoRiesgo.FactorRiesgo.writable = False
        db.TratamientoRiesgo.TipoVulnerabilidadId.writable = False
        db.TratamientoRiesgo.RiesgoFraude.writable = False
        db.TratamientoRiesgo.EscenarioAmenaza.writable = False
        db.TratamientoRiesgo.CriterioImpactoId.writable = False
        db.TratamientoRiesgo.CriterioProbabilidadId.writable = False
        db.TratamientoRiesgo.CuantificacionCVSS.writable = False
        db.TratamientoRiesgo.VectorCVSS.writable = False
        db.TratamientoRiesgo.CuantificacionCVSSE.writable = False
        db.TratamientoRiesgo.VectorCVSSE.writable = False
        db.TratamientoRiesgo.CalculoImpacto.writable = False
        db.TratamientoRiesgo.CalculoProbabilidad.writable = False
        db.TratamientoRiesgo.TipoTratamientoRiesgoId.writable = False
        db.TratamientoRiesgo.EvidenciaRiesgo.writable = False
        db.TratamientoRiesgo.RiesgoMaterializadoCheck.writable = False
        db.TratamientoRiesgo.CatalogoControlId.writable = False
        db.TratamientoRiesgo.ObjetivoControl.writable = False
        db.TratamientoRiesgo.Referencia.writable = False
        db.TratamientoRiesgo.ActividadControl.writable = False
        db.TratamientoRiesgo.TipoControlId.writable = False
        db.TratamientoRiesgo.ClasificacionControlId.writable = False
        db.TratamientoRiesgo.KeyControl.writable = False
        db.TratamientoRiesgo.ResponsableControl.writable = False
        #db.TratamientoRiesgo.StatusImplementacionControl.writable = False
        #db.TratamientoRiesgo.EvidenciaControl.writable = False
        #db.TratamientoRiesgo.FechaImplementacionControl.writable = False
        #db.TratamientoRiesgo..writable = False
        #db.TratamientoRiesgo.ComentariosResponsableControl.writable = False
        db.TratamientoRiesgo.AnalistaRiesgo.writable = False
        db.TratamientoRiesgo.LogAnalistaRiesgo.writable = False
        db.TratamientoRiesgo.LogJefeRiesgo.writable = False
        db.TratamientoRiesgo.LogResponsableControl.writable = False
        db.TratamientoRiesgo.AprobacionAnalistaRiesgo.writable = False
        db.TratamientoRiesgo.AprobacionJefeRiesgo.writable = False
        db.TratamientoRiesgo.AprobacionResponsableControl.writable = False

        controlId=[]
        for a in db(db.TratamientoRiesgo.AprobacionJefeRiesgo=='T').select(db.TratamientoRiesgo.id, db.TratamientoRiesgo.ResponsableControl):
            try:
                for b in str(str(a.ResponsableControl).replace(' ','')).split(','):
                    if b==auth.user.username:
                        controlId.append(int(a.id))
            except:
                pass
        query = db.TratamientoRiesgo.id.belongs(controlId)
        return dict(form=SQLFORM.grid(query=query, fields=fields, links=links, searchable=True, create=False, editable=True, deletable=False, user_signature=True, paginate=10, maxtextlength=500))
    elif auth.has_membership(role='riskOwner'):
        #ActualizaAprobacion(Tabla)
        db.TratamientoRiesgo.FechaRevision.writable = False
        db.TratamientoRiesgo.ProcesoId.writable = False
        db.TratamientoRiesgo.ActivoTiId.writable = False
        db.TratamientoRiesgo.FactorRiesgo.writable = False
        db.TratamientoRiesgo.TipoVulnerabilidadId.writable = False
        db.TratamientoRiesgo.RiesgoFraude.writable = False
        db.TratamientoRiesgo.EscenarioAmenaza.writable = False
        db.TratamientoRiesgo.CriterioImpactoId.writable = False
        db.TratamientoRiesgo.CriterioProbabilidadId.writable = False
        db.TratamientoRiesgo.CuantificacionCVSS.writable = False
        db.TratamientoRiesgo.VectorCVSS.writable = False
        db.TratamientoRiesgo.CuantificacionCVSSE.writable = False
        db.TratamientoRiesgo.VectorCVSSE.writable = False
        db.TratamientoRiesgo.CalculoImpacto.writable = False
        db.TratamientoRiesgo.CalculoProbabilidad.writable = False
        db.TratamientoRiesgo.TipoTratamientoRiesgoId.writable = False
        db.TratamientoRiesgo.EvidenciaRiesgo.writable = False
        db.TratamientoRiesgo.RiesgoMaterializadoCheck.writable = False
        db.TratamientoRiesgo.CatalogoControlId.writable = False
        db.TratamientoRiesgo.ObjetivoControl.writable = False
        db.TratamientoRiesgo.Referencia.writable = False
        db.TratamientoRiesgo.ActividadControl.writable = False
        db.TratamientoRiesgo.TipoControlId.writable = False
        db.TratamientoRiesgo.ClasificacionControlId.writable = False
        db.TratamientoRiesgo.KeyControl.writable = False
        db.TratamientoRiesgo.ResponsableControl.writable = False
        #db.TratamientoRiesgo.StatusImplementacionControl.writable = False
        #db.TratamientoRiesgo.EvidenciaControl.writable = False
        #db.TratamientoRiesgo.FechaImplementacionControl.writable = False
        #db.TratamientoRiesgo..writable = False
        #db.TratamientoRiesgo.ComentariosResponsableControl.writable = False
        db.TratamientoRiesgo.AnalistaRiesgo.writable = False
        db.TratamientoRiesgo.LogAnalistaRiesgo.writable = False
        db.TratamientoRiesgo.LogJefeRiesgo.writable = False
        db.TratamientoRiesgo.LogResponsableControl.writable = False
        db.TratamientoRiesgo.AprobacionAnalistaRiesgo.writable = False
        db.TratamientoRiesgo.AprobacionJefeRiesgo.writable = False
        db.TratamientoRiesgo.AprobacionResponsableControl.writable = False

        controlId=[]
        for a in db((db.TratamientoRiesgo.AprobacionJefeRiesgo=='T') & (db.TratamientoRiesgoAnalisisRiesgo.TratamientoRiesgoId==db.TratamientoRiesgo.id) & (db.TratamientoRiesgoAnalisisRiesgo.AnalisisRiesgoId == db.AnalisisRiesgo.id)).select(db.TratamientoRiesgo.id, db.AnalisisRiesgo.DuenoRiesgo):
            try:
                for b in str(str(a.AnalisisRiesgo.DuenoRiesgo).replace(' ','')).split(','):
                    if b==auth.user.username:
                        controlId.append(int(a.TratamientoRiesgo.id))
            except:
                pass
        query = db.TratamientoRiesgo.id.belongs(controlId)
        return dict(form=SQLFORM.grid(query=query, fields=fields, searchable=True, create=False, editable=False, deletable=False, user_signature=True, paginate=10, maxtextlength=500))
    elif  auth.has_membership(role='auditManager') or auth.has_membership(role='auditAnalyst') or auth.has_membership(role='guest'):
        query = (db.TratamientoRiesgo.AprobacionJefeRiesgo=='T')
        return dict(form=SQLFORM.grid(query=query, fields=fields, searchable=True, create=False, editable=False, deletable=False, user_signature=True, paginate=10, maxtextlength=500))
    else:
        redirect(URL('default','index'))

@auth.requires_login()
def AnalisisRiesgoClasificacionRiesgo():
    #db.AnalisisRiesgoClasificacionRiesgo.id.readable=False
    db.AnalisisRiesgoClasificacionRiesgo.AprobacionJefeRiesgo.writable=False
    db.AnalisisRiesgoClasificacionRiesgo.AprobacionAnalistaRiesgo.writable=False
    db.AnalisisRiesgoClasificacionRiesgo.LogJefeRiesgo.writable=False
    db.AnalisisRiesgoClasificacionRiesgo.LogAnalistaRiesgo.writable=False
    Tabla = 'AnalisisRiesgoClasificacionRiesgo'

    fields = (db.AnalisisRiesgoClasificacionRiesgo.id, db.AnalisisRiesgoClasificacionRiesgo.AnalisisRiesgoId, db.AnalisisRiesgoClasificacionRiesgo.ClasificacionRiesgoId, db.AnalisisRiesgoClasificacionRiesgo.Descripcion, db.AnalisisRiesgoClasificacionRiesgo.AprobacionJefeRiesgo)
    if request.vars.get('keywords'):
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1", base64.b64encode(request.vars.get('keywords'))] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0", base64.b64encode(request.vars.get('keywords'))]))]
    else:
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]

    if auth.has_membership(role='admin') or auth.has_membership(role='riskManager'):
        ActualizaAprobacion(Tabla)
        return dict(form=SQLFORM.grid(db.AnalisisRiesgoClasificacionRiesgo, fields=fields, links=links, searchable=True, create=True, editable=True, deletable=True, user_signature=True, paginate=10, maxtextlength=500))
    elif auth.has_membership(role='riskAnalyst'):
        ActualizaAprobacion(Tabla)
        return dict(form=SQLFORM.grid(db.AnalisisRiesgoClasificacionRiesgo, fields=fields, links=links, searchable=True, create=True, editable=True, deletable=False, user_signature=True, paginate=10, maxtextlength=500))

    elif auth.has_membership(role='riskOwner'):
        db.AnalisisRiesgoClasificacionRiesgo.AnalisisRiesgoId.writable=False
        controlId=[]
        for a in db((db.AnalisisRiesgoClasificacionRiesgo.AprobacionJefeRiesgo=='T') & (db.AnalisisRiesgoClasificacionRiesgo.AnalisisRiesgoId==db.AnalisisRiesgo.id)).select(db.AnalisisRiesgoClasificacionRiesgo.id, db.AnalisisRiesgo.DuenoRiesgo):
            try:
                for b in str(str(a.AnalisisRiesgo.DuenoRiesgo).replace(' ','')).split(','):
                    if b==auth.user.username:
                        controlId.append(int(a.AnalisisRiesgoClasificacionRiesgo.id))
            except:
                pass
        query = db.AnalisisRiesgoClasificacionRiesgo.id.belongs(controlId)
        return dict(form=SQLFORM.grid(query=query, fields=fields, searchable=True, create=False, editable=True, deletable=False, user_signature=True, paginate=10, maxtextlength=500))

    elif  auth.has_membership(role='auditManager') or auth.has_membership(role='auditAnalyst') or auth.has_membership(role='guest'):
        query = db.AnalisisRiesgoClasificacionRiesgo.AprobacionJefeRiesgo=='T'
        return dict(form=SQLFORM.grid(query=query, fields=fields, searchable=True, create=False, deletable=False,editable=False, user_signature=True, paginate=10, maxtextlength=500))
    else:
        redirect(URL('default','index'))

@auth.requires_login()
def AnalisisRiesgoObjetivoOrganizacion():
    #db.AnalisisRiesgoClasificacionRiesgo.id.readable=False
    db.AnalisisRiesgoObjetivoOrganizacion.AprobacionJefeRiesgo.writable=False
    db.AnalisisRiesgoObjetivoOrganizacion.AprobacionAnalistaRiesgo.writable=False
    db.AnalisisRiesgoObjetivoOrganizacion.LogJefeRiesgo.writable=False
    db.AnalisisRiesgoObjetivoOrganizacion.LogAnalistaRiesgo.writable=False
    Tabla = 'AnalisisRiesgoObjetivoOrganizacion'
    fields = (db.AnalisisRiesgoObjetivoOrganizacion.id, db.AnalisisRiesgoObjetivoOrganizacion.AnalisisRiesgoId, db.AnalisisRiesgoObjetivoOrganizacion.ObjetivoOrganizacionId, db.AnalisisRiesgoObjetivoOrganizacion.Descripcion, db.AnalisisRiesgoObjetivoOrganizacion.AprobacionJefeRiesgo)

    if request.vars.get('keywords'):
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1", base64.b64encode(request.vars.get('keywords'))] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0", base64.b64encode(request.vars.get('keywords'))]))]
    else:
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]

    if auth.has_membership(role='admin') or auth.has_membership(role='riskManager'):
        ActualizaAprobacion(Tabla)
        return dict(form=SQLFORM.grid(db.AnalisisRiesgoObjetivoOrganizacion, fields=fields, links=links, searchable=True, create=True, editable=True, deletable=True, user_signature=True, paginate=10, maxtextlength=500))
    elif auth.has_membership(role='riskAnalyst'):
        ActualizaAprobacion(Tabla)
        return dict(form=SQLFORM.grid(db.AnalisisRiesgoObjetivoOrganizacion, fields=fields, links=links, searchable=True, create=True, editable=True, deletable=False, user_signature=True, paginate=10, maxtextlength=500))

    elif auth.has_membership(role='riskOwner'):
        db.AnalisisRiesgoObjetivoOrganizacion.AnalisisRiesgoId.writable=False
        controlId=[]
        for a in db((db.AnalisisRiesgoObjetivoOrganizacion.AprobacionJefeRiesgo=='T') & (db.AnalisisRiesgoObjetivoOrganizacion.AnalisisRiesgoId==db.AnalisisRiesgo.id)).select(db.AnalisisRiesgoObjetivoOrganizacion.id, db.AnalisisRiesgo.DuenoRiesgo):
            try:
                for b in str(str(a.AnalisisRiesgo.DuenoRiesgo).replace(' ','')).split(','):
                    if b==auth.user.username:
                        controlId.append(int(a.AnalisisRiesgoObjetivoOrganizacion.id))
            except:
                pass
        query = db.AnalisisRiesgoObjetivoOrganizacion.id.belongs(controlId)
        return dict(form=SQLFORM.grid(query=query, fields=fields, searchable=True, create=False, editable=True, deletable=False, user_signature=True, paginate=10, maxtextlength=500))

    elif auth.has_membership(role='auditManager') or auth.has_membership(role='auditAnalyst') or auth.has_membership(role='guest'): 
        query = db.AnalisisRiesgoObjetivoOrganizacion.AprobacionJefeRiesgo=='T'
        return dict(form=SQLFORM.grid(query=query, fields=fields, searchable=True, create=False, deletable=False,editable=False, user_signature=True, paginate=10, maxtextlength=500))
    else:
        redirect(URL('default','index'))

@auth.requires_login()
def TratamientoRiesgoAnalisisRiesgo():
    #db.AnalisisRiesgoClasificacionRiesgo.id.readable=False
    db.TratamientoRiesgoAnalisisRiesgo.AprobacionJefeRiesgo.writable=False
    db.TratamientoRiesgoAnalisisRiesgo.AprobacionAnalistaRiesgo.writable=False
    db.TratamientoRiesgoAnalisisRiesgo.LogJefeRiesgo.writable=False
    db.TratamientoRiesgoAnalisisRiesgo.LogAnalistaRiesgo.writable=False
    Tabla = 'TratamientoRiesgoAnalisisRiesgo'
    fields = (db.TratamientoRiesgoAnalisisRiesgo.id, db.TratamientoRiesgoAnalisisRiesgo.AnalisisRiesgoId, db.TratamientoRiesgoAnalisisRiesgo.TratamientoRiesgoId, db.TratamientoRiesgoAnalisisRiesgo.Descripcion, db.TratamientoRiesgoAnalisisRiesgo.AprobacionJefeRiesgo)

    if request.vars.get('keywords'):
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1", base64.b64encode(request.vars.get('keywords'))] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0", base64.b64encode(request.vars.get('keywords'))]))]
    else:
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]

    if auth.has_membership(role='admin') or auth.has_membership(role='riskManager'):
        ActualizaAprobacion(Tabla)
        return dict(form=SQLFORM.grid(db.TratamientoRiesgoAnalisisRiesgo, fields=fields, links=links, searchable=True, create=True, editable=True, deletable=True, user_signature=True, paginate=10, maxtextlength=500))
    elif auth.has_membership(role='riskAnalyst'):
        ActualizaAprobacion(Tabla)
        return dict(form=SQLFORM.grid(db.TratamientoRiesgoAnalisisRiesgo, fields=fields, links=links, searchable=True, create=True, editable=True, deletable=False, user_signature=True, paginate=10, maxtextlength=500))

    elif auth.has_membership('controlResp'):
        db.TratamientoRiesgoAnalisisRiesgo.TratamientoRiesgoId.writable=False
        controlId=[]
        for a in db( (db.TratamientoRiesgoAnalisisRiesgo.AprobacionJefeRiesgo=='T') & (db.TratamientoRiesgoAnalisisRiesgo.TratamientoRiesgoId==db.TratamientoRiesgo.id) ).select(db.TratamientoRiesgoAnalisisRiesgo.id, db.TratamientoRiesgo.ResponsableControl):
            try:
                for b in str(str(a.ResponsableControl).replace(' ','')).split(','):
                    if b==auth.user.username:
                        controlId.append(int(a.id))
            except:
                pass
        query = db.TratamientoRiesgoAnalisisRiesgo.id.belongs(controlId)
        return dict(form=SQLFORM.grid(query=query, fields=fields, searchable=True, create=False, editable=True, deletable=False, user_signature=True, paginate=10, maxtextlength=500))

    elif auth.has_membership(role='auditManager') or auth.has_membership(role='auditAnalyst') or auth.has_membership(role='guest') or auth.has_membership(role='processOwner') or auth.has_membership(role='informationOwner') or auth.has_membership(role='itAdmin') or auth.has_membership(role='riskOwner'):
        query = db.TratamientoRiesgoAnalisisRiesgo.AprobacionJefeRiesgo=='T'
        return dict(form=SQLFORM.grid(query=query, fields=fields, searchable=True, create=False, deletable=False,editable=False, user_signature=True, paginate=10, maxtextlength=500))
    else:
        redirect(URL('default','index'))

#---------
#Activo
#---------
@auth.requires_login()
def EvaluacionControl():
    #db.SeguridadTi.id.readable = False
    db.EvaluacionControl.LogAnalistaAuditoria.writable = False
    db.EvaluacionControl.LogJefeAuditoria.writable = False
    #db.EvaluacionControl.LogResponsableControl.writable = False
    db.EvaluacionControl.AprobacionAnalistaAuditoria.writable = False
    db.EvaluacionControl.AprobacionJefeAuditoria.writable = False
    #db.EvaluacionControl.AprobacionResponsableControl.writable = False
    Tabla = 'EvaluacionControl'
     
    fields = (db.EvaluacionControl.id, db.EvaluacionControl.TipoRevisionId, db.EvaluacionControl.DetallePoliticaId, db.EvaluacionControl.BenchControlId, db.EvaluacionControl.TratamientoRiesgoId, db.EvaluacionControl.ActivoTiId, db.EvaluacionControl.ProcesoId, db.EvaluacionControl.AprobacionJefeAuditoria)
    if request.vars.get('keywords'):
        #links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1", base64.b64encode(request.vars.get('keywords'))] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0", base64.b64encode(request.vars.get('keywords'))])), lambda row: A(T('File'),_class='button btn btn-info',_href=URL("default","EvaluacionEvidencia", vars=dict(EvaluacionControlId=row.id), args=[ base64.b64encode(request.vars.get('keywords'))])) ]
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1", base64.b64encode(request.vars.get('keywords'))] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0", base64.b64encode(request.vars.get('keywords'))])), lambda row: A(T('CVSS'),_class='button btn btn-info',_href=URL("default","CvssEvaluation1", args=[row.id, Tabla, "2", base64.b64encode(request.vars.get('keywords'))], vars=dict(metrica="base") )) ]
    else:
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"])), lambda row: A(T('CVSS'),_class='button btn btn-info',_href=URL("default","CvssEvaluation1", args=[row.id, Tabla, "2"], vars=dict(metrica="base") )) ]

    if auth.has_membership(role='auditAnalyst') or auth.has_membership(role='auditManager') or auth.has_membership(role='admin'):
        ActualizaAprobacion(Tabla)
        form = SQLFORM.grid(db.EvaluacionControl, fields=fields, links=links, searchable=True, create=True, editable=True, deletable=True, user_signature=True, paginate=10, maxtextlength=500)
    #elif auth.has_membership(role='controlResp'):
    #    ActualizaAprobacion(Tabla)
    #    controlId=[]
    #    for a in db(db.EvaluacionControl.AprobacionJefeAuditoria=='T').select(db.EvaluacionControl.id, db.EvaluacionControl.ResponsableControl):
    #        try:
    #            for b in str(str(a.ResponsableControl).replace(' ','')).split(','):
    #                if b==auth.user.username:
    #                    controlId.append(int(a.id))
    #        except:
    #            pass
    #    query = db.EvaluacionControl.id.belongs(controlId)
    #    db.EvaluacionControl.TratamientoRiesgoId.writable=False
    #    db.EvaluacionControl.DetallePoliticaId.writable=False
    #    db.EvaluacionControl.CumplimientoControl.writable=False
    #    db.EvaluacionControl.EfectividadControl.writable=False
    #    db.EvaluacionControl.NivelMadurezId.writable=False
    #    db.EvaluacionControl.FechaRevision.writable=False
    #    db.EvaluacionControl.TipoRevisionId.writable=False
    #    db.EvaluacionControl.AlcanceRevisionId.writable=False
    #    db.EvaluacionControl.EscenarioRiesgo.writable=False
    #    db.EvaluacionControl.Recomendacion.writable=False
    #    db.EvaluacionControl.EvidenciaCumplimiento.writable=False
    #    db.EvaluacionControl.ResponsableControl.writable=False
    #    #db.EvaluacionControl.ComentariosResponsableControl.writable=False
    #    #db.EvaluacionControl.EvidenciaControl.writable=False
    #    #db.EvaluacionControl.FechaImplementacionControl.writable=False
    #    form=SQLFORM.grid(query=query, fields=fields, links=links, searchable=True, create=False, editable=True, deletable=False, user_signature=True, paginate=10, maxtextlength=500)
    elif auth.has_membership(role='riskAnalyst') or auth.has_membership(role='riskManager') or auth.has_membership(role='guest'):
        form = SQLFORM.grid(db.EvaluacionControl, fields=fields, searchable=True, create=False, editable=False, deletable=False, user_signature=True, paginate=10, maxtextlength=500)
    else:
        redirect(URL('default','index'))
    return dict(form=form)

@auth.requires_login()
def TipoRevision():
    db.TipoRevision.id.readable = False
    db.TipoRevision.LogJefeAuditoria.writable = False
    db.TipoRevision.LogAnalistaAuditoria.writable = False
    db.TipoRevision.AprobacionJefeAuditoria.writable = False
    db.TipoRevision.AprobacionAnalistaAuditoria.writable = False
    #db.TipoRevision.Nombre.writable = False
    Tabla = 'TipoRevision'
    fields = (db.TipoRevision.Nombre, db.TipoRevision.Descripcion, db.TipoRevision.AprobacionJefeAuditoria)
    if request.vars.get('keywords'):
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1", base64.b64encode(request.vars.get('keywords'))] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0", base64.b64encode(request.vars.get('keywords'))]))]
    else:
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]

    if auth.has_membership(role='riskAnalyst') or auth.has_membership(role='riskManager') or auth.has_membership(role='admin'):
        ActualizaAprobacion(Tabla)
        form = SQLFORM.grid(db.TipoRevision, fields=fields, links=links, searchable=True, create=True, editable=True, deletable=True, user_signature=True, paginate=15, maxtextlength=250)
    elif auth.has_membership(role='auditAnalyst') or auth.has_membership(role='auditManager') or auth.has_membership(role='guest'):
        form = SQLFORM.grid(db.TipoRevision, fields=fields, searchable=True, create=False, editable=False, deletable=False, user_signature=True, paginate=15, maxtextlength=250)
    else:
        redirect(URL('default','index'))
    return dict(form=form)

#------------------
#Proceso
#------------------

@auth.requires_login()
def ActivoInformacion():
    db.ActivoInformacion.LogAnalistaRiesgo.writable = False
    db.ActivoInformacion.LogJefeRiesgo.writable = False
    db.ActivoInformacion.LogDuenoInformacion.writable = False
    db.ActivoInformacion.AprobacionAnalistaRiesgo.writable = False
    db.ActivoInformacion.AprobacionJefeRiesgo.writable = False
    db.ActivoInformacion.AprobacionDuenoInformacion.writable = False
    Tabla = "ActivoInformacion"
    if request.vars.get('keywords'):
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1", base64.b64encode(request.vars.get('keywords'))] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0", base64.b64encode(request.vars.get('keywords'))]))]
    else:
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]

    #fields = (db.ActivoInformacion.id, db.ActivoInformacion.Nombre, db.ActivoInformacion.ClasificacionInformacionId, db.ActivoInformacion.RegulacionDatoId, db.ActivoInformacion.DuenoInformacion, db.ActivoInformacion.AprobacionJefeRiesgo)
    fields = (db.ActivoInformacion.id, db.ActivoInformacion.Nombre, db.ActivoInformacion.ClasificacionInformacionId, db.ActivoInformacion.DuenoInformacion, db.ActivoInformacion.AprobacionJefeRiesgo)
    if auth.has_membership(role='admin') or auth.has_membership(role='riskManager'):
        ActualizaAprobacion(Tabla)
        form = SQLFORM.grid(db.ActivoInformacion, fields=fields, searchable=True, create=True, editable=True, deletable=True, user_signature=True, paginate=10, maxtextlength=500, links=links)
    elif auth.has_membership(role='riskAnalyst'):
        ActualizaAprobacion(Tabla)
        form = SQLFORM.grid(db.ActivoInformacion, fields=fields, searchable=True, create=True, editable=True, deletable=False, user_signature=True, paginate=10, maxtextlength=500, links=links)
    #elif auth.has_membership(role='guest') or auth.has_membership(role='auditManager') or auth.has_membership(role='auditAnalyst'):
    elif auth.has_membership(role='auditManager') or auth.has_membership(role='auditAnalyst') or auth.has_membership(role='guest') or auth.has_membership(role='processOwner') or auth.has_membership(role='controlResp'):
        ActualizaAprobacion(Tabla)
        query = (db.ActivoInformacion.AprobacionJefeRiesgo=='T')
        form = SQLFORM.grid(query=query, fields=fields, searchable=True, create=False, editable=False, deletable=False, user_signature=True, paginate=10, maxtextlength=500)
    elif auth.has_membership(role='informationOwner'):
        ActivosInformacion=[]
        for a in db().select(db.ActivoInformacion.id, db.ActivoInformacion.DuenoInformacion, cacheable=True):
            try:
                for b in str(str(a.DuenoInformacion).replace(' ','')).split(','):
                    if b==auth.user.username:
                        ActivosInformacion.append(int(a.id))
            except:
                pass
        query = db.ActivoInformacion.id.belongs(ActivosInformacion)
        form = SQLFORM.grid(query=query, fields=fields, searchable=True, create=False, editable=False, deletable=False, user_signature=True, paginate=10, maxtextlength=500, links=links)
    else:
        redirect(URL('default','index'))
    return dict(form=form)

#--------
#Proceso
#--------

@auth.requires_login()
def TipoVulnerabilidadAnalisisRiesgo():
    #db.AnalisisRiesgoClasificacionRiesgo.id.readable=False
    db.TipoVulnerabilidadAnalisisRiesgo.AprobacionJefeRiesgo.writable=False
    db.TipoVulnerabilidadAnalisisRiesgo.AprobacionAnalistaRiesgo.writable=False
    db.TipoVulnerabilidadAnalisisRiesgo.LogJefeRiesgo.writable=False
    db.TipoVulnerabilidadAnalisisRiesgo.LogAnalistaRiesgo.writable=False
    Tabla = 'TipoVulnerabilidadAnalisisRiesgo'
    fields = (db.TipoVulnerabilidadAnalisisRiesgo.id, db.TipoVulnerabilidadAnalisisRiesgo.AnalisisRiesgoId, db.TipoVulnerabilidadAnalisisRiesgo.TipoVulnerabilidadId, db.TipoVulnerabilidadAnalisisRiesgo.Descripcion, db.TipoVulnerabilidadAnalisisRiesgo.AprobacionJefeRiesgo)
    #links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1", base64.b64encode(request.vars.get('keywords'))])), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0", base64.b64encode(request.vars.get('keywords'))]))]
    if request.vars.get('keywords'):
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1", base64.b64encode(request.vars.get('keywords'))] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0", base64.b64encode(request.vars.get('keywords'))]))]
    else:
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]
    if auth.has_membership(role='admin') or auth.has_membership(role='riskManager'):
        ActualizaAprobacion(Tabla)
        return dict(form=SQLFORM.grid(db.TipoVulnerabilidadAnalisisRiesgo, fields=fields, links=links, searchable=True, create=True, editable=True, deletable=True, user_signature=True, paginate=10, maxtextlength=500))
    elif auth.has_membership(role='riskAnalyst'):
        ActualizaAprobacion(Tabla)
        return dict(form=SQLFORM.grid(db.TipoVulnerabilidadAnalisisRiesgo, fields=fields, links=links, searchable=True, create=True, editable=True, deletable=False, user_signature=True, paginate=10, maxtextlength=500))
    elif auth.has_membership(role='auditManager') or auth.has_membership(role='auditAnalyst') or auth.has_membership(role='guest'):
        query = db.TipoVulnerabilidadAnalisisRiesgo.AprobacionJefeRiesgo=='T'
        return dict(form=SQLFORM.grid(query=query, fields=fields, searchable=True, create=False, deletable=False,editable=False, user_signature=True, paginate=10, maxtextlength=500))
    else:
        redirect(URL('default','index'))

'''
@auth.requires_login()
def GrupoControl():
    #db.CatalogoControl.id.readable = False
    db.GrupoControl.AprobacionJefeRiesgo.writable=False
    db.GrupoControl.AprobacionAnalistaRiesgo.writable=False
    db.GrupoControl.LogJefeRiesgo.writable=False
    db.GrupoControl.LogAnalistaRiesgo.writable=False
    Tabla = 'GrupoControl'
    #fields = (db.CatalogoControl.id, db.CatalogoControl.Nombre, db.CatalogoControl.Descripcion, db.CatalogoControl.ControlClave, db.CatalogoControl.AprobacionJefeRiesgo)
    fields = (db.GrupoControl.id, db.GrupoControl.Nombre, db.GrupoControl.Descripcion, db.GrupoControl.AprobacionJefeRiesgo)
    #links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"])), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]
    if request.vars.get('keywords'):
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1", base64.b64encode(request.vars.get('keywords'))] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0", base64.b64encode(request.vars.get('keywords'))]))]
    else:
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]
        
    if auth.has_membership(role='admin') or auth.has_membership(role='riskManager'):
        ActualizaAprobacion(Tabla)
        return dict(form=SQLFORM.grid(db.GrupoControl, fields=fields, links=links, searchable=True, deletable=True, create=True, editable=True, user_signature=True, paginate=10, maxtextlength=500))
    elif auth.has_membership(role='riskAnalyst'):
        ActualizaAprobacion(Tabla)
        return dict(form=SQLFORM.grid(db.GrupoControl, fields=fields, links=links, searchable=True, deletable=False, create=True, editable=True, user_signature=True, paginate=10, maxtextlength=500))
    elif auth.has_membership(role='auditManager') or auth.has_membership(role='auditAnalyst') or auth.has_membership(role='guest'):
        return dict(form=SQLFORM.grid(db.GrupoControl, fields=fields, searchable=True,deletable=False, create=False, editable=False, user_signature=True, paginate=10, maxtextlength=500))
    else:
        redirect(URL('default','index'))
@auth.requires_login()
def AlcanceControl():
    db.AlcanceControl.AprobacionJefeRiesgo.writable=False
    db.AlcanceControl.AprobacionAnalistaRiesgo.writable=False
    db.AlcanceControl.LogJefeRiesgo.writable=False
    db.AlcanceControl.LogAnalistaRiesgo.writable=False
    Tabla = 'AlcanceControl'
    fields = (db.AlcanceControl.id, db.AlcanceControl.Nombre, db.AlcanceControl.Descripcion, db.AlcanceControl.AprobacionJefeRiesgo)
    #links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"])), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]
    if request.vars.get('keywords'):
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1", base64.b64encode(request.vars.get('keywords'))] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0", base64.b64encode(request.vars.get('keywords'))]))]
    else:
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]
        
    if auth.has_membership(role='admin') or auth.has_membership(role='riskManager'):
        ActualizaAprobacion(Tabla)
        return dict(form=SQLFORM.grid(db.AlcanceControl, fields=fields, links=links, searchable=True, deletable=True, create=True, editable=True, user_signature=True, paginate=10, maxtextlength=500))
    elif auth.has_membership(role='riskAnalyst'):
        ActualizaAprobacion(Tabla)
        return dict(form=SQLFORM.grid(db.AlcanceControl, fields=fields, links=links, searchable=True, deletable=False, create=True, editable=True, user_signature=True, paginate=10, maxtextlength=500))
    elif auth.has_membership(role='auditManager') or auth.has_membership(role='auditAnalyst') or auth.has_membership(role='guest'):
        return dict(form=SQLFORM.grid(db.AlcanceControl, fields=fields, searchable=True,deletable=False, create=False, editable=False, user_signature=True, paginate=10, maxtextlength=500))
    else:
        redirect(URL('default','index'))
@auth.requires_login()
def BenchMark():
    #db.CatalogoControl.id.readable = False
    db.BenchMark.AprobacionJefeRiesgo.writable=False
    db.BenchMark.AprobacionAnalistaRiesgo.writable=False
    db.BenchMark.LogJefeRiesgo.writable=False
    db.BenchMark.LogAnalistaRiesgo.writable=False
    Tabla = 'BenchMark'
    fields = (db.BenchMark.id, db.BenchMark.Nombre, db.BenchMark.Descripcion, db.BenchMark.AprobacionJefeRiesgo)
    #links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"])), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]
    if request.vars.get('keywords'):
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1", base64.b64encode(request.vars.get('keywords'))] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0", base64.b64encode(request.vars.get('keywords'))]))]
    else:
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]
        
    if auth.has_membership(role='admin') or auth.has_membership(role='riskManager'):
        ActualizaAprobacion(Tabla)
        return dict(form=SQLFORM.grid(db.BenchMark, fields=fields, links=links, searchable=True, deletable=True, create=True, editable=True, user_signature=True, paginate=10, maxtextlength=500))
    elif auth.has_membership(role='riskAnalyst'):
        ActualizaAprobacion(Tabla)
        return dict(form=SQLFORM.grid(db.BenchMark, fields=fields, links=links, searchable=True, deletable=False, create=True, editable=True, user_signature=True, paginate=10, maxtextlength=500))
    elif auth.has_membership(role='auditManager') or auth.has_membership(role='auditAnalyst') or auth.has_membership(role='guest'):
        return dict(form=SQLFORM.grid(db.BenchMark, fields=fields, searchable=True,deletable=False, create=False, editable=False, user_signature=True, paginate=10, maxtextlength=500))
    else:
        redirect(URL('default','index'))
@auth.requires_login()
def ObjetivoControl():
    #db.CatalogoControl.id.readable = False
    db.BenchMarkLista.AprobacionJefeRiesgo.writable=False
    db.BenchMarkLista.AprobacionAnalistaRiesgo.writable=False
    db.BenchMarkLista.LogJefeRiesgo.writable=False
    db.BenchMarkLista.LogAnalistaRiesgo.writable=False
    Tabla = 'BenchMarkLista'
    fields = (db.BenchMarkLista.id, db.BenchMarkLista.BenchMarkId, db.BenchMarkLista.Codigo, db.BenchMarkLista.Nombre, db.BenchMarkLista.AprobacionJefeRiesgo)
    #links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"])), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]
    if request.vars.get('keywords'):
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1", base64.b64encode(request.vars.get('keywords'))] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0", base64.b64encode(request.vars.get('keywords'))]))]
    else:
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]
        
    if auth.has_membership(role='admin') or auth.has_membership(role='riskManager'):
        ActualizaAprobacion(Tabla)
        return dict(form=SQLFORM.grid(db.BenchMarkLista, fields=fields, links=links, searchable=True, deletable=True, create=True, editable=True, user_signature=True, paginate=10, maxtextlength=500))
    elif auth.has_membership(role='riskAnalyst'):
        ActualizaAprobacion(Tabla)
        return dict(form=SQLFORM.grid(db.BenchMarkLista, fields=fields, links=links, searchable=True, deletable=False, create=True, editable=True, user_signature=True, paginate=10, maxtextlength=500))
    elif auth.has_membership(role='auditManager') or auth.has_membership(role='auditAnalyst') or auth.has_membership(role='guest'):
        return dict(form=SQLFORM.grid(db.BenchMarkLista, fields=fields, searchable=True,deletable=False, create=False, editable=False, user_signature=True, paginate=10, maxtextlength=500))
    else:
        redirect(URL('default','index'))
'''        
@auth.requires_login()
def CatalogoControlBenchControl():
    #db.CatalogoControl.id.readable = False
    db.CatalogoControlBenchControl.AprobacionJefeRiesgo.writable=False
    db.CatalogoControlBenchControl.AprobacionAnalistaRiesgo.writable=False
    db.CatalogoControlBenchControl.LogJefeRiesgo.writable=False
    db.CatalogoControlBenchControl.LogAnalistaRiesgo.writable=False
    Tabla = 'CatalogoControlBenchControl'
    fields = (db.CatalogoControlBenchControl.id, db.CatalogoControlBenchControl.CatalogoControlId, db.CatalogoControlBenchControl.BenchControlId, db.CatalogoControlBenchControl.Descripcion, db.CatalogoControlBenchControl.AprobacionJefeRiesgo)
    #links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"])), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]
    if request.vars.get('keywords'):
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1", base64.b64encode(request.vars.get('keywords'))] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0", base64.b64encode(request.vars.get('keywords'))]))]
    else:
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]
        
    if auth.has_membership(role='admin') or auth.has_membership(role='riskManager'):
        ActualizaAprobacion(Tabla)
        return dict(form=SQLFORM.grid(db.CatalogoControlBenchControl, fields=fields, links=links, searchable=True, deletable=True, create=True, editable=True, user_signature=True, paginate=10, maxtextlength=500))
    elif auth.has_membership(role='riskAnalyst'):
        ActualizaAprobacion(Tabla)
        return dict(form=SQLFORM.grid(db.CatalogoControlBenchControl, fields=fields, links=links, searchable=True, deletable=False, create=True, editable=True, user_signature=True, paginate=10, maxtextlength=500))
    elif auth.has_membership(role='auditManager') or auth.has_membership(role='auditAnalyst') or auth.has_membership(role='guest'):
        return dict(form=SQLFORM.grid(db.CatalogoControlBenchControl, fields=fields, searchable=True,deletable=False, create=False, editable=False, user_signature=True, paginate=10, maxtextlength=500))
    else:
        redirect(URL('default','index'))

@auth.requires_login()
def DetallePoliticaBenchControl():
    #db.CatalogoControl.id.readable = False
    db.DetallePoliticaBenchControl.AprobacionJefeRiesgo.writable=False
    db.DetallePoliticaBenchControl.AprobacionAnalistaRiesgo.writable=False
    db.DetallePoliticaBenchControl.LogJefeRiesgo.writable=False
    db.DetallePoliticaBenchControl.LogAnalistaRiesgo.writable=False
    Tabla = 'DetallePoliticaBenchControl'
    fields = (db.DetallePoliticaBenchControl.id, db.DetallePoliticaBenchControl.DetallePoliticaId, db.DetallePoliticaBenchControl.BenchControlId, db.DetallePoliticaBenchControl.Descripcion, db.DetallePoliticaBenchControl.AprobacionJefeRiesgo)
    #links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"])), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]
    if request.vars.get('keywords'):
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1", base64.b64encode(request.vars.get('keywords'))] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0", base64.b64encode(request.vars.get('keywords'))]))]
    else:
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]
        
    if auth.has_membership(role='admin') or auth.has_membership(role='riskManager'):
        ActualizaAprobacion(Tabla)
        return dict(form=SQLFORM.grid(db.DetallePoliticaBenchControl, fields=fields, links=links, searchable=True, deletable=True, create=True, editable=True, user_signature=True, paginate=10, maxtextlength=500))
    elif auth.has_membership(role='riskAnalyst'):
        ActualizaAprobacion(Tabla)
        return dict(form=SQLFORM.grid(db.DetallePoliticaBenchControl, fields=fields, links=links, searchable=True, deletable=False, create=True, editable=True, user_signature=True, paginate=10, maxtextlength=500))
    elif auth.has_membership(role='auditManager') or auth.has_membership(role='auditAnalyst') or auth.has_membership(role='guest'):
        return dict(form=SQLFORM.grid(db.DetallePoliticaBenchControl, fields=fields, searchable=True,deletable=False, create=False, editable=False, user_signature=True, paginate=10, maxtextlength=500))
    else:
        redirect(URL('default','index'))

@auth.requires_login()
def ClasificacionInformacion():
    db.ClasificacionInformacion.id.readable=False
    db.ClasificacionInformacion.AprobacionJefeRiesgo.writable=False
    db.ClasificacionInformacion.AprobacionAnalistaRiesgo.writable=False
    db.ClasificacionInformacion.LogJefeRiesgo.writable=False
    db.ClasificacionInformacion.LogAnalistaRiesgo.writable=False
    Tabla = 'ClasificacionInformacion'
    fields = (db.ClasificacionInformacion.Nombre, db.ClasificacionInformacion.Descripcion, db.ClasificacionInformacion.AprobacionJefeRiesgo)
    #links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"])), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]
    if request.vars.get('keywords'):
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1", base64.b64encode(request.vars.get('keywords'))] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0", base64.b64encode(request.vars.get('keywords'))]))]
    else:
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]
        
    if auth.has_membership(role='admin') or auth.has_membership(role='riskManager'):
        ActualizaAprobacion(Tabla)
        return dict(form=SQLFORM.grid(db.ClasificacionInformacion, fields=fields, links=links, searchable=True, create=True, editable=True, deletable=True, user_signature=True, paginate=15, maxtextlength=500))
    elif auth.has_membership(role='riskAnalyst'):
        ActualizaAprobacion(Tabla)
        return dict(form=SQLFORM.grid(db.ClasificacionInformacion, fields=fields, links=links, searchable=True, create=True, editable=True, deletable=False, user_signature=True, paginate=15, maxtextlength=500))
    elif auth.has_membership(role='auditManager') or auth.has_membership(role='auditAnalyst') or auth.has_membership(role='guest'):
        query=db.ClasificacionInformacion.AprobacionJefeRiesgo=='T'
        return dict(form=SQLFORM.grid(query=query, fields=fields, searchable=True, create=False, editable=False, deletable=False, user_signature=True, paginate=15, maxtextlength=500))
    else:
        redirect(URL('default','index'))
'''
@auth.requires_login()
def CicloNegocio():
    #if versionGratuita==1:
    #    db.CicloNegocio.Nombre.writable = False
    db.CicloNegocio.id.readable = False
    db.CicloNegocio.AprobacionJefeRiesgo.writable=False
    db.CicloNegocio.AprobacionAnalistaRiesgo.writable=False
    db.CicloNegocio.LogJefeRiesgo.writable=False
    db.CicloNegocio.LogAnalistaRiesgo.writable=False
    Tabla = 'CicloNegocio'
    #fields = (db.CicloNegocio.Nombre, db.CicloNegocio.Descripcion, db.CicloNegocio.AprobacionAnalistaRiesgo, db.CicloNegocio.AprobacionJefeRiesgo)
    fields = (db.CicloNegocio.Nombre, db.CicloNegocio.Descripcion, db.CicloNegocio.AprobacionJefeRiesgo)
    #links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"])), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]
    if request.vars.get('keywords'):
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1", base64.b64encode(request.vars.get('keywords'))] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0", base64.b64encode(request.vars.get('keywords'))]))]
    else:
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]
        
    if auth.has_membership(role='admin') or auth.has_membership(role='riskManager'):
        ActualizaAprobacion(Tabla)
        return dict(form=SQLFORM.grid(db.CicloNegocio, fields=fields, links=links, searchable=True, deletable=True, create=True, editable=True, user_signature=True, paginate=10, maxtextlength=500))
    elif auth.has_membership(role='riskAnalyst'):
        ActualizaAprobacion(Tabla)
        return dict(form=SQLFORM.grid(db.CicloNegocio, fields=fields, links=links, searchable=True, deletable=False, create=True, editable=True, user_signature=True, paginate=10, maxtextlength=500))
    elif auth.has_membership(role='auditManager') or auth.has_membership(role='auditAnalyst') or auth.has_membership(role='guest'):
        return dict(form = SQLFORM.grid(db.CicloNegocio, fields=fields, searchable=True, create=False, editable=False, deletable=False, user_signature=True, paginate=10, maxtextlength=500))
    else:
        redirect(URL('default','index'))
'''
@auth.requires_login()
def TipoProceso():
    #if versionGratuita==1:
    #    db.TipoProceso.Nombre.writable = False
    db.TipoProceso.id.readable = False
    db.TipoProceso.AprobacionJefeRiesgo.writable=False
    db.TipoProceso.AprobacionAnalistaRiesgo.writable=False
    db.TipoProceso.LogJefeRiesgo.writable=False
    db.TipoProceso.LogAnalistaRiesgo.writable=False
    Tabla = 'TipoProceso'
    #fields = (db.TipoProceso.Nombre, db.TipoProceso.Descripcion, db.TipoProceso.AprobacionAnalistaRiesgo, db.TipoProceso.AprobacionJefeRiesgo)
    fields = (db.TipoProceso.Nombre, db.TipoProceso.Descripcion, db.TipoProceso.AprobacionJefeRiesgo)
    #links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"])), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]
    if request.vars.get('keywords'):
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1", base64.b64encode(request.vars.get('keywords'))] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0", base64.b64encode(request.vars.get('keywords'))]))]
    else:
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]
        
    if auth.has_membership(role='admin') or auth.has_membership(role='riskManager'):
        ActualizaAprobacion(Tabla)
        return dict(form=SQLFORM.grid(db.TipoProceso, fields=fields, links=links, searchable=True, create=True, editable=True, deletable=True, user_signature=True, paginate=10, maxtextlength=500))
    elif auth.has_membership(role='riskAnalyst'):
        ActualizaAprobacion(Tabla)
        return dict(form=SQLFORM.grid(db.TipoProceso, fields=fields, links=links, searchable=True, create=True, editable=True, deletable=False, user_signature=True, paginate=10, maxtextlength=500))
    elif auth.has_membership(role='auditManager') or auth.has_membership(role='auditAnalyst') or auth.has_membership(role='guest'):
        return dict(form=SQLFORM.grid(db.TipoProceso, fields=fields, searchable=True, create=False, deletable=False, editable=False, user_signature=True, paginate=10, maxtextlength=500))
    else:
        redirect(URL('default','index'))

@auth.requires_login()
def Proceso():
    #db.Proceso.id.readable = False
    db.Proceso.AprobacionJefeRiesgo.writable=False
    db.Proceso.AprobacionAnalistaRiesgo.writable=False
    db.Proceso.LogJefeRiesgo.writable=False
    db.Proceso.LogAnalistaRiesgo.writable=False
    Tabla = 'Proceso'
    #fields = (db.Proceso.Nombre, db.Proceso.Descripcion, db.Proceso.Dueno, db.Proceso.TipoProcesoId, db.Proceso.RegionId, db.Proceso.AprobacionAnalistaRiesgo, db.Proceso.AprobacionJefeRiesgo)
    #fields = (db.Proceso.id, db.Proceso.Nombre, db.Proceso.CicloNegocioId, db.Proceso.MacroProcesoId, db.Proceso.TipoProcesoId, db.Proceso.Descripcion, db.Proceso.AprobacionJefeRiesgo)
    fields = (db.Proceso.id, db.Proceso.Nombre, db.Proceso.TipoProcesoId, db.Proceso.Descripcion, db.Proceso.AprobacionJefeRiesgo)
    #links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"])), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"])), lambda row: A(T('Copy'),_class='button btn btn-warning',_href=URL("default","CopiarRegistro", args=[row.id, Tabla]))]
    if request.vars.get('keywords'):
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1", base64.b64encode(request.vars.get('keywords'))] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0", base64.b64encode(request.vars.get('keywords'))]))]
    else:
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"])) ]
        
    if auth.has_membership(role='admin') or auth.has_membership(role='riskManager'):
        ActualizaAprobacion(Tabla)
        return dict(form=SQLFORM.grid(db.Proceso, fields=fields, links=links, searchable=True, create=True, editable=True, deletable=True, user_signature=True, paginate=10, maxtextlength=500))
    elif auth.has_membership(role='riskAnalyst'):
        ActualizaAprobacion(Tabla)
        return dict(form=SQLFORM.grid(db.Proceso, fields=fields, links=links, searchable=True, create=True, editable=True, deletable=False, user_signature=True, paginate=10, maxtextlength=500))
    elif auth.has_membership(role='auditManager') or auth.has_membership(role='auditAnalyst') or auth.has_membership(role='guest'):
        query = (db.Proceso.AprobacionJefeRiesgo=='T')
        return dict(form=SQLFORM.grid(query=query, fields=fields, searchable=True, create=False, editable=False, deletable=False, user_signature=True, paginate=10, maxtextlength=500))
    else:
        redirect(URL('default','index'))

@auth.requires_login()
def MacroProceso():
    #db.MacroProceso.id.readable = False
    db.MacroProceso.AprobacionJefeRiesgo.writable=False
    db.MacroProceso.AprobacionAnalistaRiesgo.writable=False
    db.MacroProceso.LogJefeRiesgo.writable=False
    db.MacroProceso.LogAnalistaRiesgo.writable=False
    Tabla = 'MacroProceso'
    fields = (db.MacroProceso.id, db.MacroProceso.Nombre, db.MacroProceso.Descripcion, db.MacroProceso.AprobacionJefeRiesgo)
    #links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"])), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"])), lambda row: A(T('Copy'),_class='button btn btn-warning',_href=URL("default","CopiarRegistro", args=[row.id, Tabla]))]
    if request.vars.get('keywords'):
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1", base64.b64encode(request.vars.get('keywords'))] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0", base64.b64encode(request.vars.get('keywords'))])), lambda row: A(T('Copy'),_class='button btn btn-warning',_href=URL("default","CopiarRegistro", args=[row.id, Tabla]))]
    else:
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"])), lambda row: A(T('Copy'),_class='button btn btn-warning',_href=URL("default","CopiarRegistro", args=[row.id, Tabla]))]

    if auth.has_membership(role='admin') or auth.has_membership(role='riskManager'):
        ActualizaAprobacion(Tabla)
        return dict(form=SQLFORM.grid(db.MacroProceso, fields=fields, links=links, searchable=True, create=True, editable=True, deletable=True, user_signature=True, paginate=10, maxtextlength=500))
    elif auth.has_membership(role='riskAnalyst'):
        ActualizaAprobacion(Tabla)
        return dict(form=SQLFORM.grid(db.MacroProceso, fields=fields, links=links, searchable=True, create=True, editable=True, deletable=False, user_signature=True, paginate=10, maxtextlength=500))
    elif auth.has_membership(role='auditManager') or auth.has_membership(role='auditAnalyst') or auth.has_membership(role='guest'):
        query = (db.MacroProceso.AprobacionJefeRiesgo=='T')
        return dict(form=SQLFORM.grid(query=query, fields=fields, searchable=True, create=False, editable=False, deletable=False, user_signature=True, paginate=10, maxtextlength=500))
    else:
        redirect(URL('default','index'))

@auth.requires_login()
def TipoDato():
    db.TipoDato.id.readable = False
    db.TipoDato.LogJefeRiesgo.writable = False
    db.TipoDato.LogAnalistaRiesgo.writable = False
    db.TipoDato.AprobacionJefeRiesgo.writable = False
    db.TipoDato.AprobacionAnalistaRiesgo.writable = False
    Tabla = 'TipoDato'
    fields = (db.TipoDato.Nombre, db.TipoDato.Descripcion, db.TipoDato.AprobacionJefeRiesgo)
    #links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"])), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]
    if request.vars.get('keywords'):
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1", base64.b64encode(request.vars.get('keywords'))] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0", base64.b64encode(request.vars.get('keywords'))]))]
    else:
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]
 
    #if auth.has_membership(role='auditAnalyst') or auth.has_membership(role='auditManager') or auth.has_membership(role='admin'):
    if auth.has_membership(role='admin') or auth.has_membership(role='riskManager'):
        ActualizaAprobacion(Tabla)
        form = SQLFORM.grid(db.TipoDato, fields=fields, links=links, searchable=True, create=True, editable=True, deletable=True, user_signature=True, paginate=10, maxtextlength=500)
    elif auth.has_membership(role='riskAnalyst'):
        ActualizaAprobacion(Tabla)
        form = SQLFORM.grid(db.TipoDato, fields=fields, links=links, searchable=True, create=True, editable=True, deletable=False, user_signature=True, paginate=10, maxtextlength=500)
    #elif auth.has_membership(role='riskAnalyst') or auth.has_membership(role='riskManager') or auth.has_membership(role='guest'):
    elif auth.has_membership(role='guest') or auth.has_membership(role='auditManager') or auth.has_membership(role='auditAnalyst'):
        form = SQLFORM.grid(db.TipoDato, fields=fields, searchable=True, create=False, editable=False, deletable=False, user_signature=True, paginate=10, maxtextlength=500)
    else:
        redirect(URL('default','index'))
    return dict(form=form)

#-------------------
# Ambiente Control
#-------------------
@auth.requires_login()
def AreaImpacto():
    db.AreaImpacto.id.readable = False
    db.AreaImpacto.LogAnalistaRiesgo.writable = False
    db.AreaImpacto.AprobacionAnalistaRiesgo.writable = False
    db.AreaImpacto.LogJefeRiesgo.writable = False
    db.AreaImpacto.AprobacionJefeRiesgo.writable = False
    #db.AreaImpacto.Valor.writable = False
    #db.AreaImpacto.Nombre.writable = False
    Tabla = 'AreaImpacto'
    #fields = (db.AreaImpacto.Nombre, db.AreaImpacto.CriterioImpactoId, db.AreaImpacto.Descripcion, db.AreaImpacto.AprobacionJefeRiesgo)
    fields = (db.AreaImpacto.Nombre, db.AreaImpacto.Descripcion, db.AreaImpacto.AprobacionJefeRiesgo)
    #links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"])), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]
    if request.vars.get('keywords'):
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1", base64.b64encode(request.vars.get('keywords'))] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0", base64.b64encode(request.vars.get('keywords'))]))]
    else:
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]
 
    if auth.has_membership(role='admin') or auth.has_membership(role='riskManager'):
        ActualizaAprobacion(Tabla)
        return dict(form=SQLFORM.grid(db.AreaImpacto, fields=fields, searchable=True, create=True, editable=True, deletable=True, user_signature=True, paginate=10, maxtextlength=500, links=links))
    elif auth.has_membership(role='riskAnalyst'):
        ActualizaAprobacion(Tabla)
        return dict(form=SQLFORM.grid(db.AreaImpacto, fields=fields, searchable=True, create=True, editable=True, deletable=False, user_signature=True, paginate=10, maxtextlength=500, links=links))
    elif auth.has_membership(role='auditManager') or auth.has_membership(role='auditAnalyst') or auth.has_membership(role='guest'):
        query = db.AreaImpacto.AprobacionJefeRiesgo=='T'
        return dict(form=SQLFORM.grid(query=query, fields=fields, searchable=True, create=False, editable=False, deletable=False, user_signature=True, paginate=10, maxtextlength=500))
    else:
        redirect(URL('default','index'))

@auth.requires_login()
def AreaProbabilidad():
    db.AreaProbabilidad.id.readable = False
    db.AreaProbabilidad.LogAnalistaRiesgo.writable = False
    db.AreaProbabilidad.AprobacionAnalistaRiesgo.writable = False
    db.AreaProbabilidad.LogJefeRiesgo.writable = False
    db.AreaProbabilidad.AprobacionJefeRiesgo.writable = False
    #db.AreaImpacto.Valor.writable = False
    #db.AreaImpacto.Nombre.writable = False
    Tabla = 'AreaProbabilidad'
    fields = (db.AreaProbabilidad.Nombre, db.AreaProbabilidad.Descripcion, db.AreaProbabilidad.AprobacionJefeRiesgo)
    #links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"])), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]
    if request.vars.get('keywords'):
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1", base64.b64encode(request.vars.get('keywords'))] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0", base64.b64encode(request.vars.get('keywords'))]))]
    else:
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]
 
    if auth.has_membership(role='admin') or auth.has_membership(role='riskManager'):
        ActualizaAprobacion(Tabla)
        return dict(form=SQLFORM.grid(db.AreaProbabilidad, fields=fields, searchable=True, create=True, editable=True, deletable=True, user_signature=True, paginate=10, maxtextlength=500, links=links))
    elif auth.has_membership(role='riskAnalyst'):
        ActualizaAprobacion(Tabla)
        return dict(form=SQLFORM.grid(db.AreaProbabilidad, fields=fields, searchable=True, create=True, editable=True, deletable=False, user_signature=True, paginate=10, maxtextlength=500, links=links))
    elif auth.has_membership(role='auditManager') or auth.has_membership(role='auditAnalyst') or auth.has_membership(role='guest'):
        query = db.AreaProbabilidad.AprobacionJefeRiesgo=='T'
        return dict(form=SQLFORM.grid(query=query, fields=fields, searchable=True, create=False, editable=False, deletable=False, user_signature=True, paginate=10, maxtextlength=500))
    else:
        redirect(URL('default','index'))

@auth.requires_login()
def AreaImpactoCriterioImpacto():
    db.AreaImpactoCriterioImpacto.LogAnalistaRiesgo.writable = False
    db.AreaImpactoCriterioImpacto.AprobacionAnalistaRiesgo.writable = False
    db.AreaImpactoCriterioImpacto.LogJefeRiesgo.writable = False
    db.AreaImpactoCriterioImpacto.AprobacionJefeRiesgo.writable = False
    Tabla = 'AreaImpactoCriterioImpacto'

    fields = (db.AreaImpactoCriterioImpacto.id, db.AreaImpactoCriterioImpacto.AreaImpactoId, db.AreaImpactoCriterioImpacto.CriterioImpactoId, db.AreaImpactoCriterioImpacto.Descripcion, db.AreaImpactoCriterioImpacto.AprobacionJefeRiesgo)
    #links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"])), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]
    if request.vars.get('keywords'):
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1", base64.b64encode(request.vars.get('keywords'))] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0", base64.b64encode(request.vars.get('keywords'))]))]
    else:
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]
 
    if auth.has_membership(role='admin') or auth.has_membership(role='riskManager'):
        ActualizaAprobacion(Tabla)
        return dict(form=SQLFORM.grid(db.AreaImpactoCriterioImpacto, fields=fields, searchable=True, create=True, editable=True, deletable=True, user_signature=True, paginate=10, maxtextlength=500, links=links))
    elif auth.has_membership(role='riskAnalyst'):
        ActualizaAprobacion(Tabla)
        return dict(form=SQLFORM.grid(db.AreaImpactoCriterioImpacto, fields=fields, searchable=True, create=True, editable=True, deletable=False, user_signature=True, paginate=10, maxtextlength=500, links=links))
    elif auth.has_membership(role='auditManager') or auth.has_membership(role='auditAnalyst') or auth.has_membership(role='guest'):
        query = db.AreaImpactoCriterioImpacto.AprobacionJefeRiesgo=='T'
        return dict(form=SQLFORM.grid(query=query, fields=fields, searchable=True, create=False, editable=False, deletable=False, user_signature=True, paginate=10, maxtextlength=500))
    else:
        redirect(URL('default','index'))

@auth.requires_login()
def AreaProbabilidadCriterioProbabilidad():
    db.AreaProbabilidadCriterioProbabilidad.LogAnalistaRiesgo.writable = False
    db.AreaProbabilidadCriterioProbabilidad.AprobacionAnalistaRiesgo.writable = False
    db.AreaProbabilidadCriterioProbabilidad.LogJefeRiesgo.writable = False
    db.AreaProbabilidadCriterioProbabilidad.AprobacionJefeRiesgo.writable = False
    Tabla = 'AreaProbabilidadCriterioProbabilidad'

    fields = (db.AreaProbabilidadCriterioProbabilidad.id, db.AreaProbabilidadCriterioProbabilidad.AreaProbabilidadId, db.AreaProbabilidadCriterioProbabilidad.CriterioProbabilidadId, db.AreaProbabilidadCriterioProbabilidad.Descripcion, db.AreaProbabilidadCriterioProbabilidad.AprobacionJefeRiesgo)
    #links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"])), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]
    if request.vars.get('keywords'):
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1", base64.b64encode(request.vars.get('keywords'))] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0", base64.b64encode(request.vars.get('keywords'))]))]
    else:
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]
 
    if auth.has_membership(role='admin') or auth.has_membership(role='riskManager'):
        ActualizaAprobacion(Tabla)
        return dict(form=SQLFORM.grid(db.AreaProbabilidadCriterioProbabilidad, fields=fields, searchable=True, create=True, editable=True, deletable=True, user_signature=True, paginate=10, maxtextlength=500, links=links))
    elif auth.has_membership(role='riskAnalyst'):
        ActualizaAprobacion(Tabla)
        return dict(form=SQLFORM.grid(db.AreaProbabilidadCriterioProbabilidad, fields=fields, searchable=True, create=True, editable=True, deletable=False, user_signature=True, paginate=10, maxtextlength=500, links=links))
    elif auth.has_membership(role='auditManager') or auth.has_membership(role='auditAnalyst') or auth.has_membership(role='guest'):
        query = db.AreaProbabilidadCriterioProbabilidad.AprobacionJefeRiesgo=='T'
        return dict(form=SQLFORM.grid(query=query, fields=fields, searchable=True, create=False, editable=False, deletable=False, user_signature=True, paginate=10, maxtextlength=500))
    else:
        redirect(URL('default','index'))

@auth.requires_login()
def TratamientoRiesgoAreaImpacto():
    #db.TratamientoRiesgoAreaImpacto.id.readable = False
    db.TratamientoRiesgoAreaImpacto.LogAnalistaRiesgo.writable = False
    db.TratamientoRiesgoAreaImpacto.AprobacionAnalistaRiesgo.writable = False
    db.TratamientoRiesgoAreaImpacto.LogJefeRiesgo.writable = False
    db.TratamientoRiesgoAreaImpacto.AprobacionJefeRiesgo.writable = False
    Tabla = 'TratamientoRiesgoAreaImpacto'
    fields = (db.TratamientoRiesgoAreaImpacto.id, db.TratamientoRiesgoAreaImpacto.TratamientoRiesgoId, db.TratamientoRiesgoAreaImpacto.AreaImpactoCriterioImpactoId, db.TratamientoRiesgoAreaImpacto.Descripcion, db.TratamientoRiesgoAreaImpacto.AprobacionJefeRiesgo)
    #links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"])), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]
    if request.vars.get('keywords'):
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1", base64.b64encode(request.vars.get('keywords'))] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0", base64.b64encode(request.vars.get('keywords'))]))]
    else:
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]
 
    if auth.has_membership(role='admin') or auth.has_membership(role='riskManager'):
        ActualizaAprobacion(Tabla)
        return dict(form=SQLFORM.grid(db.TratamientoRiesgoAreaImpacto, fields=fields, searchable=True, create=True, editable=True, deletable=True, user_signature=True, paginate=10, maxtextlength=500, links=links))
    elif auth.has_membership(role='riskAnalyst'):
        ActualizaAprobacion(Tabla)
        return dict(form=SQLFORM.grid(db.TratamientoRiesgoAreaImpacto, fields=fields, searchable=True, create=True, editable=True, deletable=False, user_signature=True, paginate=10, maxtextlength=500, links=links))
    elif auth.has_membership(role='auditManager') or auth.has_membership(role='auditAnalyst') or auth.has_membership(role='guest'):
        query = db.TratamientoRiesgoAreaImpacto.AprobacionJefeRiesgo=='T'
        return dict(form=SQLFORM.grid(query=query, fields=fields, searchable=True, create=False, editable=False, deletable=False, user_signature=True, paginate=10, maxtextlength=500))
    else:
        redirect(URL('default','index'))

@auth.requires_login()
def TratamientoRiesgoAreaProbabilidad():
    db.TratamientoRiesgoAreaProbabilidad.id.readable = False
    db.TratamientoRiesgoAreaProbabilidad.LogJefeRiesgo.writable = False
    db.TratamientoRiesgoAreaProbabilidad.AprobacionJefeRiesgo.writable = False
    Tabla = 'TratamientoRiesgoAreaProbabilidad'
    fields = (db.TratamientoRiesgoAreaProbabilidad.TratamientoRiesgoId, db.TratamientoRiesgoAreaProbabilidad.AreaProbabilidadCriterioProbabilidadId, db.TratamientoRiesgoAreaProbabilidad.Descripcion, db.TratamientoRiesgoAreaProbabilidad.AprobacionJefeRiesgo)
    #links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"])), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]
    if request.vars.get('keywords'):
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1", base64.b64encode(request.vars.get('keywords'))] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0", base64.b64encode(request.vars.get('keywords'))]))]
    else:
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]
 
    if auth.has_membership(role='admin') or auth.has_membership(role='riskManager'):
        ActualizaAprobacion(Tabla)
        return dict(form=SQLFORM.grid(db.TratamientoRiesgoAreaProbabilidad, fields=fields, searchable=True, create=True, editable=True, deletable=True, user_signature=True, paginate=10, maxtextlength=500, links=links))
    elif auth.has_membership(role='riskAnalyst'):
        ActualizaAprobacion(Tabla)
        return dict(form=SQLFORM.grid(db.TratamientoRiesgoAreaProbabilidad, fields=fields, searchable=True, create=True, editable=True, deletable=False, user_signature=True, paginate=10, maxtextlength=500, links=links))
    elif auth.has_membership(role='auditManager') or auth.has_membership(role='auditAnalyst') or auth.has_membership(role='guest'):
        query = db.TratamientoRiesgoAreaProbabilidad.AprobacionJefeRiesgo=='T'
        return dict(form=SQLFORM.grid(query=query, fields=fields, searchable=True, create=False, editable=False, deletable=False, user_signature=True, paginate=10, maxtextlength=500))
    else:
        redirect(URL('default','index'))


@auth.requires_login()
def AmbienteControl():
    db.AmbienteControl.id.readable = False
    db.AmbienteControl.LogJefeRiesgo.writable = False
    db.AmbienteControl.LogAnalistaRiesgo.writable = False
    db.AmbienteControl.AprobacionJefeRiesgo.writable = False
    db.AmbienteControl.AprobacionAnalistaRiesgo.writable = False
    Tabla="AmbienteControl"
    fields = (db.AmbienteControl.Nombre, db.AmbienteControl.DireccionId, db.AmbienteControl.Descripcion, db.AmbienteControl.NivelMadurezId, db.AmbienteControl.Evidencia, db.AmbienteControl.AprobacionJefeRiesgo)
    #LinkJefeRiesgo = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"])), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]
    #Links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"])), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]
    #LinkAnalistaRiesgo = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla]))]
    if request.vars.get('keywords'):
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1", base64.b64encode(request.vars.get('keywords'))] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0", base64.b64encode(request.vars.get('keywords'))]))]
    else:
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]
        
    if auth.has_membership(role='admin') or auth.has_membership(role='riskManager'):
        ActualizaAprobacion(Tabla)
        return dict(form=SQLFORM.grid(db.AmbienteControl, searchable=True, create=True, editable=True, deletable=True, user_signature=True, paginate=3, maxtextlength=250, links=Links, fields=fields))
    elif auth.has_membership(role='riskAnalyst'):
        ActualizaAprobacion(Tabla)
        return dict(form=SQLFORM.grid(db.AmbienteControl, searchable=True, create=True, editable=True, deletable=True, user_signature=True, paginate=3, maxtextlength=250, links=Links, fields=fields))
    elif auth.has_membership(role='auditManager') or auth.has_membership(role='auditAnalyst') or auth.has_membership(role='guest'):
        return dict(form=SQLFORM.grid(db.AmbienteControl, searchable=True, create=False, editable=False, deletable=False, user_signature=True, paginate=3, maxtextlength=250, fields=fields))
    else:
        redirect(URL('default','index'))

#-----------
#Politicas
#-----------
@auth.requires_login()
def RegulacionDato():
    db.RegulacionDato.id.readable = False
    db.RegulacionDato.AprobacionJefeRiesgo.writable=False
    db.RegulacionDato.AprobacionAnalistaRiesgo.writable=False
    db.RegulacionDato.LogJefeRiesgo.writable=False
    db.RegulacionDato.LogAnalistaRiesgo.writable=False
    Tabla = 'RegulacionDato'
    fields = (db.RegulacionDato.Nombre, db.RegulacionDato.Version, db.RegulacionDato.Descripcion, db.RegulacionDato.AprobacionJefeRiesgo)
    #links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"])), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]
    if request.vars.get('keywords'):
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1", base64.b64encode(request.vars.get('keywords'))] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0", base64.b64encode(request.vars.get('keywords'))]))]
    else:
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]
        
    if auth.has_membership(role='admin') or auth.has_membership(role='riskManager'):
        ActualizaAprobacion(Tabla)
        form = SQLFORM.grid(db.RegulacionDato, searchable=True, fields=fields, links=links, create=True, editable=True, deletable=True, user_signature=True, paginate=10, maxtextlength=500)
    elif auth.has_membership(role='riskAnalyst'):
        ActualizaAprobacion(Tabla)
        form = SQLFORM.grid(db.RegulacionDato, searchable=True, fields=fields, links=links, create=True, editable=True, deletable=False, user_signature=True, paginate=10, maxtextlength=500)
    elif auth.has_membership(role='guest') or auth.has_membership(role='auditManager') or auth.has_membership(role='auditAnalyst'):
        query=(db.RegulacionDato.AprobacionJefeRiesgo=='T')
        form = SQLFORM.grid(query=query, searchable=True, create=False, editable=False, deletable=False, user_signature=True, paginate=10, maxtextlength=500)
    else:
        redirect(URL('default','index'))
    return dict(form=form)

@auth.requires_login()
def ActivoInformacionRegulacion():
    db.ActivoInformacionRegulacion.id.readable = False
    db.ActivoInformacionRegulacion.AprobacionJefeRiesgo.writable=False
    db.ActivoInformacionRegulacion.AprobacionAnalistaRiesgo.writable=False
    db.ActivoInformacionRegulacion.LogJefeRiesgo.writable=False
    db.ActivoInformacionRegulacion.LogAnalistaRiesgo.writable=False
    Tabla = 'ActivoInformacionRegulacion'
    fields = (db.ActivoInformacionRegulacion.ActivoInformacionId, db.ActivoInformacionRegulacion.RegulacionDatoId, db.ActivoInformacionRegulacion.Descripcion, db.ActivoInformacionRegulacion.AprobacionJefeRiesgo)
    #links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"])), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]
    if request.vars.get('keywords'):
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1", base64.b64encode(request.vars.get('keywords'))] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0", base64.b64encode(request.vars.get('keywords'))]))]
    else:
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]

    if auth.has_membership(role='admin') or auth.has_membership(role='riskManager'):
        ActualizaAprobacion(Tabla)
        form = SQLFORM.grid(db.ActivoInformacionRegulacion, fields=fields, searchable=True, links=links, create=True, editable=True, deletable=True, user_signature=True, paginate=10, maxtextlength=500)
    elif auth.has_membership(role='riskAnalyst'):
        ActualizaAprobacion(Tabla)
        form = SQLFORM.grid(db.ActivoInformacionRegulacion, fields=fields, searchable=True, links=links, create=True, editable=True, deletable=False, user_signature=True, paginate=10, maxtextlength=500)
    elif auth.has_membership(role='guest') or auth.has_membership(role='auditManager') or auth.has_membership(role='auditAnalyst'):
        query=(db.ActivoInformacionRegulacion.AprobacionJefeRiesgo=='T')
        form = SQLFORM.grid(query=query, fields=fields, searchable=True, create=False, editable=False, deletable=False, user_signature=True, paginate=10, maxtextlength=500)
    else:
        redirect(URL('default','index'))
    return dict(form=form)

@auth.requires_login()
def RegulacionPolitica():
    db.RegulacionPolitica.id.readable = False
    db.RegulacionPolitica.AprobacionJefeRiesgo.writable=False
    db.RegulacionPolitica.AprobacionAnalistaRiesgo.writable=False
    db.RegulacionPolitica.LogJefeRiesgo.writable=False
    db.RegulacionPolitica.LogAnalistaRiesgo.writable=False
    Tabla = 'RegulacionPolitica'
    fields = (db.RegulacionPolitica.RegulacionId, db.RegulacionPolitica.DetallePoliticaId, db.RegulacionPolitica.Descripcion, db.RegulacionPolitica.AprobacionAnalistaRiesgo, db.RegulacionPolitica.AprobacionJefeRiesgo)
    #links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"])), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]
    if request.vars.get('keywords'):
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1", base64.b64encode(request.vars.get('keywords'))] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0", base64.b64encode(request.vars.get('keywords'))]))]
    else:
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]
        
    if auth.has_membership(role='admin') or auth.has_membership(role='riskManager') or auth.has_membership(role='riskAnalyst'):
        ActualizaAprobacion(Tabla)
        form = SQLFORM.grid(db.RegulacionPolitica, searchable=True, fields=fields, links=links, create=True, editable=True, deletable=True, user_signature=True, paginate=15, maxtextlength=2500)
    elif auth.has_membership(role='guest') or auth.has_membership(role='auditManager') or auth.has_membership(role='auditAnalyst'):
        query=(db.RegulacionPolitica.AprobacionJefeRiesgo=='T')
        form = SQLFORM.grid(query=query, searchable=True, create=False, editable=False, deletable=False, user_signature=True, paginate=10, maxtextlength=500)
    else:
        redirect(URL('default','index'))
    return dict(form=form)

@auth.requires_login()
def PoliticaVigente():
    Politica = db(db.RegionPolitica.AprobacionJefeRiesgo=='T').select(db.RegionPolitica.ALL)
    return dict(Politica=Politica)

@auth.requires_login()
def ProcesoTipoProceso():
    db.ProcesoTipoProceso.id.readable = False
    db.ProcesoTipoProceso.AprobacionJefeRiesgo.writable=False
    db.ProcesoTipoProceso.AprobacionAnalistaRiesgo.writable=False
    db.ProcesoTipoProceso.LogJefeRiesgo.writable=False
    db.ProcesoTipoProceso.LogAnalistaRiesgo.writable=False
    Tabla = 'ProcesoTipoProceso'
    fields = (db.ProcesoTipoProceso.ProcesoId, db.ProcesoTipoProceso.TipoProcesoId, db.ProcesoTipoProceso.Descripcion, db.ProcesoTipoProceso.AprobacionJefeRiesgo)
    #links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"])), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]
    if request.vars.get('keywords'):
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1", base64.b64encode(request.vars.get('keywords'))] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0", base64.b64encode(request.vars.get('keywords'))]))]
    else:
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]
        
    if auth.has_membership(role='admin') or auth.has_membership(role='riskManager') or auth.has_membership(role='riskAnalyst'):
        ActualizaAprobacion(Tabla)
        form = SQLFORM.grid(db.ProcesoTipoProceso, searchable=True, fields=fields, links=links, create=True, editable=True, deletable=True, user_signature=True, paginate=15, maxtextlength=2500)
    elif auth.has_membership(role='guest') or auth.has_membership(role='auditManager') or auth.has_membership(role='auditAnalyst'):
        query=(db.ProcesoTipoProceso.AprobacionJefeRiesgo=='T')
        form = SQLFORM.grid(query=query, searchable=True, create=False, editable=False, deletable=False, user_signature=True, paginate=10, maxtextlength=500)
    else:
        redirect(URL('default','index'))
    return dict(form=form)

@auth.requires_login()
def ProcesoMacroProceso():
    db.ProcesoMacroProceso.id.readable = False
    db.ProcesoMacroProceso.AprobacionJefeRiesgo.writable=False
    db.ProcesoMacroProceso.AprobacionAnalistaRiesgo.writable=False
    db.ProcesoMacroProceso.LogJefeRiesgo.writable=False
    db.ProcesoMacroProceso.LogAnalistaRiesgo.writable=False
    Tabla = 'ProcesoMacroProceso'
    fields = (db.ProcesoMacroProceso.ProcesoId, db.ProcesoMacroProceso.MacroProcesoId, db.ProcesoMacroProceso.Descripcion, db.ProcesoMacroProceso.AprobacionJefeRiesgo)
    #links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"])), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]
    if request.vars.get('keywords'):
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1", base64.b64encode(request.vars.get('keywords'))] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0", base64.b64encode(request.vars.get('keywords'))]))]
    else:
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]
        
    if auth.has_membership(role='admin') or auth.has_membership(role='riskManager') or auth.has_membership(role='riskAnalyst'):
        ActualizaAprobacion(Tabla)
        form = SQLFORM.grid(db.ProcesoMacroProceso, searchable=True, fields=fields, links=links, create=True, editable=True, deletable=True, user_signature=True, paginate=15, maxtextlength=2500)
    elif auth.has_membership(role='guest') or auth.has_membership(role='auditManager') or auth.has_membership(role='auditAnalyst'):
        query=(db.ProcesoMacroProceso.AprobacionJefeRiesgo=='T')
        form = SQLFORM.grid(query=query, searchable=True, create=False, editable=False, deletable=False, user_signature=True, paginate=10, maxtextlength=500)
    else:
        redirect(URL('default','index'))
    return dict(form=form)
'''
@auth.requires_login()
def ProcesoCicloNegocio():
    db.ProcesoCicloNegocio.id.readable = False
    db.ProcesoCicloNegocio.AprobacionJefeRiesgo.writable=False
    db.ProcesoCicloNegocio.AprobacionAnalistaRiesgo.writable=False
    db.ProcesoCicloNegocio.LogJefeRiesgo.writable=False
    db.ProcesoCicloNegocio.LogAnalistaRiesgo.writable=False
    Tabla = 'ProcesoCicloNegocio'
    fields = (db.ProcesoCicloNegocio.ProcesoId, db.ProcesoCicloNegocio.CicloNegocioId, db.ProcesoCicloNegocio.Descripcion, db.ProcesoCicloNegocio.AprobacionJefeRiesgo)
    links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"])), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]

    if auth.has_membership(role='admin') or auth.has_membership(role='riskManager') or auth.has_membership(role='riskAnalyst'):
        ActualizaAprobacion(Tabla)
        form = SQLFORM.grid(db.ProcesoCicloNegocio, searchable=True, fields=fields, links=links, create=True, editable=True, deletable=True, user_signature=True, paginate=15, maxtextlength=2500)
    elif auth.has_membership(role='guest') or auth.has_membership(role='auditManager') or auth.has_membership(role='auditAnalyst'):
        query=(db.ProcesoCicloNegocio.AprobacionJefeRiesgo=='T')
        form = SQLFORM.grid(query=query, searchable=True, create=False, editable=False, deletable=False, user_signature=True, paginate=10, maxtextlength=500)
    else:
        redirect(URL('default','index'))
    return dict(form=form)
'''
'''
@auth.requires_login()
def ProcesoRegion():
    #db.ProcesoRegion.id.readable = False
    db.ProcesoRegion.AprobacionJefeRiesgo.writable=False
    db.ProcesoRegion.AprobacionAnalistaRiesgo.writable=False
    db.ProcesoRegion.LogJefeRiesgo.writable=False
    db.ProcesoRegion.LogAnalistaRiesgo.writable=False
    Tabla = 'ProcesoRegion'
    fields = (db.ProcesoRegion.id, db.ProcesoRegion.ProcesoId, db.ProcesoRegion.RegionId, db.ProcesoRegion.Descripcion, db.ProcesoRegion.AprobacionJefeRiesgo)
    #links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"])), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]
    if request.vars.get('keywords'):
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1", base64.b64encode(request.vars.get('keywords'))] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0", base64.b64encode(request.vars.get('keywords'))]))]
    else:
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]
        
    if auth.has_membership(role='admin') or auth.has_membership(role='riskManager'):
        ActualizaAprobacion(Tabla)
        form = SQLFORM.grid(db.ProcesoRegion, searchable=True, fields=fields, links=links, create=True, editable=True, deletable=True, user_signature=True, paginate=10, maxtextlength=500)
    elif auth.has_membership(role='riskAnalyst'):
        ActualizaAprobacion(Tabla)
        form = SQLFORM.grid(db.ProcesoRegion, searchable=True, fields=fields, links=links, create=True, editable=True, deletable=False, user_signature=True, paginate=10, maxtextlength=500)
    elif auth.has_membership(role='guest') or auth.has_membership(role='auditManager') or auth.has_membership(role='auditAnalyst'):
        query=(db.ProcesoRegion.AprobacionJefeRiesgo=='T')
        form = SQLFORM.grid(query=query, searchable=True, create=False, editable=False, deletable=False, user_signature=True, paginate=10, maxtextlength=500)
    else:
        redirect(URL('default','index'))
    return dict(form=form)
'''
@auth.requires_login()
def ProcesoActivoInformacion():
    db.ProcesoActivoInformacion.AprobacionJefeRiesgo.writable=False
    db.ProcesoActivoInformacion.AprobacionAnalistaRiesgo.writable=False
    db.ProcesoActivoInformacion.LogJefeRiesgo.writable=False
    db.ProcesoActivoInformacion.LogAnalistaRiesgo.writable=False
    Tabla = 'ProcesoActivoInformacion'
    fields = (db.ProcesoActivoInformacion.id, db.ProcesoActivoInformacion.ProcesoId, db.ProcesoActivoInformacion.ActivoInformacionId, db.ProcesoActivoInformacion.Descripcion, db.ProcesoActivoInformacion.AprobacionJefeRiesgo)
    #links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"])), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]
    if request.vars.get('keywords'):
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1", base64.b64encode(request.vars.get('keywords'))] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0", base64.b64encode(request.vars.get('keywords'))]))]
    else:
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]
        
    if auth.has_membership(role='admin') or auth.has_membership(role='riskManager'):
        ActualizaAprobacion(Tabla)
        form = SQLFORM.grid(db.ProcesoActivoInformacion, searchable=True, fields=fields, links=links, create=True, editable=True, deletable=True, user_signature=True, paginate=10, maxtextlength=500)
    elif auth.has_membership(role='riskAnalyst'):
        ActualizaAprobacion(Tabla)
        form = SQLFORM.grid(db.ProcesoActivoInformacion, searchable=True, fields=fields, links=links, create=True, editable=True, deletable=False, user_signature=True, paginate=10, maxtextlength=500)
    elif auth.has_membership(role='guest') or auth.has_membership(role='auditManager') or auth.has_membership(role='auditAnalyst'):
        query=(db.ProcesoActivoInformacion.AprobacionJefeRiesgo=='T')
        form = SQLFORM.grid(query=query, searchable=True, create=False, editable=False, deletable=False, user_signature=True, paginate=10, maxtextlength=500)
    else:
        redirect(URL('default','index'))
    return dict(form=form)

@auth.requires_login()
def ActivoTiRegion():
    #db.RegionPolitica.id.readable = False
    db.ActivoTiRegion.AprobacionJefeRiesgo.writable=False
    db.ActivoTiRegion.AprobacionAnalistaRiesgo.writable=False
    db.ActivoTiRegion.LogJefeRiesgo.writable=False
    db.ActivoTiRegion.LogAnalistaRiesgo.writable=False
    Tabla = 'ActivoTiRegion'
    fields = (db.ActivoTiRegion.id, db.ActivoTiRegion.ActivoTiId, db.ActivoTiRegion.RegionId, db.ActivoTiRegion.Descripcion, db.ActivoTiRegion.AprobacionJefeRiesgo)
    #links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"])), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]
    if request.vars.get('keywords'):
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1", base64.b64encode(request.vars.get('keywords'))] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0", base64.b64encode(request.vars.get('keywords'))]))]
    else:
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]
        
    if auth.has_membership(role='admin') or auth.has_membership(role='riskManager'):
        ActualizaAprobacion(Tabla)
        form = SQLFORM.grid(db.ActivoTiRegion, searchable=True, fields=fields, links=links, create=True, editable=True, deletable=True, user_signature=True, paginate=15, maxtextlength=2500)
    elif auth.has_membership(role='riskAnalyst'):
        ActualizaAprobacion(Tabla)
        form = SQLFORM.grid(db.ActivoTiRegion, searchable=True, fields=fields, links=links, create=True, editable=True, deletable=False, user_signature=True, paginate=15, maxtextlength=2500)
    elif auth.has_membership(role='guest') or auth.has_membership(role='auditManager') or auth.has_membership(role='auditAnalyst'):
        query=(db.RegionPolitica.AprobacionJefeRiesgo=='T')
        form = SQLFORM.grid(query=query, searchable=True, create=False, editable=False, deletable=False, user_signature=True, paginate=10, maxtextlength=500)
    else:
        redirect(URL('default','index'))
    return dict(form=form)

@auth.requires_login()
def ProcesoPolitica():
    db.ProcesoPolitica.id.readable = False
    db.ProcesoPolitica.AprobacionJefeRiesgo.writable=False
    db.ProcesoPolitica.AprobacionAnalistaRiesgo.writable=False
    db.ProcesoPolitica.LogJefeRiesgo.writable=False
    db.ProcesoPolitica.LogAnalistaRiesgo.writable=False
    Tabla = 'ProcesoPolitica'
    fields = (db.ProcesoPolitica.ProcesoId, db.ProcesoPolitica.RegionPoliticaId, db.ProcesoPolitica.Descripcion, db.ProcesoPolitica.AprobacionJefeRiesgo)
    #links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"])), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]
    if request.vars.get('keywords'):
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1", base64.b64encode(request.vars.get('keywords'))] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0", base64.b64encode(request.vars.get('keywords'))]))]
    else:
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]
        
    if auth.has_membership(role='admin') or auth.has_membership(role='riskManager') or auth.has_membership(role='riskAnalyst'):
        ActualizaAprobacion(Tabla)
        form = SQLFORM.grid(db.ProcesoPolitica, searchable=True, fields=fields, links=links, create=True, editable=True, deletable=True, user_signature=True, paginate=10, maxtextlength=500)
    elif auth.has_membership(role='guest') or auth.has_membership(role='auditManager') or auth.has_membership(role='auditAnalyst'):
        query=(db.ProcesoPolitica.AprobacionJefeRiesgo=='T')
        form = SQLFORM.grid(query=query, searchable=True, create=False, editable=False, deletable=False, user_signature=True, paginate=10, maxtextlength=500)
    else:
        redirect(URL('default','index'))
    return dict(form=form)

#-------------
#Seguridad TI
#-------------
'''
@auth.requires_login()
def GrupoMetrica():
    #db.GrupoMetrica.id.readable = False
    db.GrupoMetrica.LogJefeRiesgo.writable = False
    db.GrupoMetrica.LogAnalistaRiesgo.writable = False
    db.GrupoMetrica.AprobacionJefeRiesgo.writable = False
    db.GrupoMetrica.AprobacionAnalistaRiesgo.writable = False
    db.GrupoMetrica.Nombre.writable = False
    Tabla = 'GrupoMetrica'
    fields = (db.GrupoMetrica.id, db.GrupoMetrica.Nombre, db.GrupoMetrica.Descripcion, db.GrupoMetrica.AprobacionJefeRiesgo)
    #links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"])), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]
    if request.vars.get('keywords'):
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1", base64.b64encode(request.vars.get('keywords'))] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0", base64.b64encode(request.vars.get('keywords'))]))]
    else:
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]
        
    if auth.has_membership(role='riskAnalyst') or auth.has_membership(role='riskManager') or auth.has_membership(role='admin'):
        ActualizaAprobacion(Tabla)
        form = SQLFORM.grid(db.GrupoMetrica, links=links, fields=fields, searchable=True, create=False, editable=True, deletable=False, user_signature=True, paginate=10, maxtextlength=500)
    elif auth.has_membership(role='auditAnalyst') or auth.has_membership(role='auditManager') or auth.has_membership(role='guest'):
        form = SQLFORM.grid(db.GrupoMetrica, fields=fields, searchable=True, create=False, editable=False, deletable=False, user_signature=True, paginate=10, maxtextlength=500)
    else:
        redirect(URL('default','index'))
    return dict(form=form)

@auth.requires_login()
def Metrica():
    #db.Metrica.id.readable = False
    db.Metrica.LogJefeRiesgo.writable = False
    db.Metrica.LogAnalistaRiesgo.writable = False
    db.Metrica.AprobacionJefeRiesgo.writable = False
    db.Metrica.AprobacionAnalistaRiesgo.writable = False
    db.Metrica.Nombre.writable = False
    db.Metrica.Codigo.writable = False
    db.Metrica.GrupoMetricaId.writable = False

    Tabla = 'Metrica'
    fields = (db.Metrica.id, db.Metrica.GrupoMetricaId, db.Metrica.Nombre, db.Metrica.Descripcion, db.Metrica.Codigo, db.Metrica.AprobacionJefeRiesgo)
    #fields = (db.TipoVulnerabilidad.Nombre, db.TipoVulnerabilidad.Descripcion, db.TipoVulnerabilidad.AprobacionAnalistaAuditoria, db.TipoVulnerabilidad.AprobacionJefeAuditoria)
    #links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"])), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]
    if request.vars.get('keywords'):
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1", base64.b64encode(request.vars.get('keywords'))] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0", base64.b64encode(request.vars.get('keywords'))]))]
    else:
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]
        
    if auth.has_membership(role='riksAnalyst') or auth.has_membership(role='riskManager') or auth.has_membership(role='admin'):
        ActualizaAprobacion(Tabla)
        form = SQLFORM.grid(db.Metrica, links=links, fields=fields, searchable=True, create=False, editable=True, deletable=False, user_signature=True, paginate=10, maxtextlength=500)
    elif auth.has_membership(role='auditAnalyst') or auth.has_membership(role='auditManager') or auth.has_membership(role='guest'):
        form = SQLFORM.grid(db.Metrica, fields=fields, searchable=True, create=False, editable=False, deletable=False, user_signature=True, paginate=10, maxtextlength=500)
    else:
        redirect(URL('default','index'))
    return dict(form=form)

@auth.requires_login()
def ValorMetrica():
    #db.ValorMetrica.id.readable = False
    db.ValorMetrica.LogJefeRiesgo.writable = False
    db.ValorMetrica.LogAnalistaRiesgo.writable = False
    db.ValorMetrica.AprobacionJefeRiesgo.writable = False
    db.ValorMetrica.AprobacionAnalistaRiesgo.writable = False
    db.ValorMetrica.MetricaId.writable = False
    db.ValorMetrica.Nombre.writable = False
    db.ValorMetrica.ValorMetrica.writable = False
    db.ValorMetrica.ValorNumerico.writable = False
    Tabla = 'ValorMetrica'
    fields = (db.ValorMetrica.id, db.ValorMetrica.MetricaId, db.ValorMetrica.Nombre, db.ValorMetrica.Descripcion, db.ValorMetrica.ValorMetrica, db.ValorMetrica.ValorNumerico, db.ValorMetrica.AprobacionJefeRiesgo)
    #links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"])), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]
    if request.vars.get('keywords'):
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1", base64.b64encode(request.vars.get('keywords'))] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0", base64.b64encode(request.vars.get('keywords'))]))]
    else:
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]
        
    if auth.has_membership(role='riskAnalyst') or auth.has_membership(role='riskManager') or auth.has_membership(role='admin'):
        ActualizaAprobacion(Tabla)
        form = SQLFORM.grid(db.ValorMetrica, links=links, fields=fields, searchable=True, create=False, editable=True, deletable=False, user_signature=True, paginate=10, maxtextlength=500)
    elif auth.has_membership(role='auditAnalyst') or auth.has_membership(role='auditManager') or auth.has_membership(role='guest'):
        form = SQLFORM.grid(db.ValorMetrica, searchable=True, fields=fields, create=False, editable=False, deletable=False, user_signature=True, paginate=10, maxtextlength=500)
    else:
        redirect(URL('default','index'))
    return dict(form=form)
'''
@auth.requires_login()
def AlcanceRevision():
    db.AlcanceRevision.id.readable = False
    db.AlcanceRevision.LogJefeAuditoria.writable = False
    db.AlcanceRevision.LogAnalistaAuditoria.writable = False
    db.AlcanceRevision.AprobacionJefeAuditoria.writable = False
    db.AlcanceRevision.AprobacionAnalistaAuditoria.writable = False
    Tabla = 'AlcanceRevision'
    fields = (db.AlcanceRevision.Nombre, db.AlcanceRevision.Descripcion, db.AlcanceRevision.Fecha, db.AlcanceRevision.AprobacionJefeAuditoria)
    #links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"])), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]
    if request.vars.get('keywords'):
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1", base64.b64encode(request.vars.get('keywords'))] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0", base64.b64encode(request.vars.get('keywords'))]))]
    else:
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]
        
    #if auth.has_membership(role='auditAnalyst') or auth.has_membership(role='auditManager') or auth.has_membership(role='admin'):
    if auth.has_membership(role='riskManager') or auth.has_membership(role='auditManager') or auth.has_membership(role='admin'):
        ActualizaAprobacion(Tabla)
        form = SQLFORM.grid(db.AlcanceRevision, fields=fields, links=links, searchable=True, create=True, editable=True, deletable=True, user_signature=True, paginate=15, maxtextlength=250)
    elif auth.has_membership(role='riskAnalyst') or auth.has_membership(role='auditAnalyst'):
        ActualizaAprobacion(Tabla)
        form = SQLFORM.grid(db.AlcanceRevision, fields=fields, links=links, searchable=True, create=True, editable=True, deletable=False, user_signature=True, paginate=15, maxtextlength=250)
    elif auth.has_membership(role='guest'):
        form = SQLFORM.grid(db.AlcanceRevision, fields=fields, searchable=True, create=False, editable=False, deletable=False, user_signature=True, paginate=15, maxtextlength=250)
    else:
        redirect(URL('default','index'))
    return dict(form=form)

@auth.requires_login()
def TipoCapaSistema():
    db.TipoCapaSistema.id.readable = False
    db.TipoCapaSistema.LogJefeRiesgo.writable = False
    db.TipoCapaSistema.LogAnalistaRiesgo.writable = False
    db.TipoCapaSistema.AprobacionJefeRiesgo.writable = False
    db.TipoCapaSistema.AprobacionAnalistaRiesgo.writable = False
    Tabla = 'TipoCapaSistema'
    fields = (db.TipoCapaSistema.Nombre, db.TipoCapaSistema.Descripcion, db.TipoCapaSistema.AprobacionJefeRiesgo)
    #links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"])), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]
    if request.vars.get('keywords'):
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1", base64.b64encode(request.vars.get('keywords'))] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0", base64.b64encode(request.vars.get('keywords'))]))]
    else:
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]
        
    if auth.has_membership(role='riskManager') or auth.has_membership(role='admin'):
        ActualizaAprobacion(Tabla)
        form = SQLFORM.grid(db.TipoCapaSistema, fields=fields, links=links, searchable=True, create=True, editable=True, deletable=True, user_signature=True, paginate=15, maxtextlength=250)
    elif auth.has_membership(role='riskAnalyst'):
        ActualizaAprobacion(Tabla)
        form = SQLFORM.grid(db.TipoCapaSistema, fields=fields, links=links, searchable=True, create=True, editable=True, deletable=False, user_signature=True, paginate=15, maxtextlength=250)
    elif auth.has_membership(role='auditAnalyst') or auth.has_membership(role='auditManager') or auth.has_membership(role='guest'):
        form = SQLFORM.grid(db.TipoCapaSistema, fields=fields, searchable=True, create=False, editable=False, deletable=False, user_signature=True, paginate=15, maxtextlength=250)
    else:
        redirect(URL('default','index'))
    return dict(form=form)

@auth.requires_login()
def Plataforma():
    db.Plataforma.id.readable=False
    db.Plataforma.LogJefeAuditoria.writable = False
    db.Plataforma.LogAnalistaAuditoria.writable = False
    db.Plataforma.AprobacionJefeAuditoria.writable = False
    db.Plataforma.AprobacionAnalistaAuditoria.writable = False
    Tabla = 'Plataforma'
    fields = (db.Plataforma.Nombre, db.Plataforma.Descripcion, db.Plataforma.Archivo, db.Plataforma.Administrador, db.Plataforma.AprobacionAnalistaAuditoria, db.Plataforma.AprobacionJefeAuditoria)
    #links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"])), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]
    if request.vars.get('keywords'):
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1", base64.b64encode(request.vars.get('keywords'))] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0", base64.b64encode(request.vars.get('keywords'))]))]
    else:
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]
        
    if auth.has_membership(role='auditAnalyst') or auth.has_membership(role='auditManager') or auth.has_membership(role='admin'):
        ActualizaAprobacion(Tabla)
        form = SQLFORM.grid(db.Plataforma, fields=fields, links=links, searchable=True, create=True, editable=True, deletable=True, user_signature=True, paginate=15, maxtextlength=250)
    elif auth.has_membership(role='riskAnalyst') or auth.has_membership(role='riskManager') or auth.has_membership(role='guest'):
        form = SQLFORM.grid(db.Plataforma, fields=fields, searchable=True, create=False, editable=False, deletable=False, user_signature=True, paginate=15, maxtextlength=250)
    else:
        redirect(URL('default', 'index'))
    return dict(form=form)

'''
@auth.requires_login()
def CapaSistema():
    db.CapaSistema.id.readable=False
    if auth.has_membership(role='auditAnalyst') or auth.has_membership(role='auditManager') or auth.has_membership(role='admin'):
        form = SQLFORM.grid(db.CapaSistema, searchable=True, create=True, editable=True, deletable=True, user_signature=True, paginate=15, maxtextlength=250)
    elif auth.has_membership(role='riskAnalyst') or auth.has_membership(role='riskManager') or auth.has_membership(role='guest'):
        form = SQLFORM.grid(db.CapaSistema, searchable=True, create=False, editable=False, deletable=False, user_signature=True, paginate=15, maxtextlength=250)
    else:
        redirect(URL('default', 'index'))
    return dict(form=form)
'''

@auth.requires_login()
def ActivoTi():
    #db.ActivoTi.id.readable = False
    db.ActivoTi.LogAnalistaRiesgo.writable = False
    db.ActivoTi.LogJefeRiesgo.writable = False
    db.ActivoTi.AprobacionAnalistaRiesgo.writable = False
    db.ActivoTi.AprobacionJefeRiesgo.writable = False
    Tabla = 'ActivoTi'
    #fields = (db.ActivoTi.id, db.ActivoTi.Nombre, db.ActivoTi.TipoCapaSistemaId, db.ActivoTi.IpInterna, db.ActivoTi.IpPublica, db.ActivoTi.Fecha, db.ActivoTi.CvssConfidentiality, db.ActivoTi.CvssIntegrity, db.ActivoTi.CvssAvailability, db.ActivoTi.CvssJustificacion, db.ActivoTi.AprobacionJefeRiesgo)
    #fields = (db.ActivoTi.id, db.ActivoTi.Nombre, db.ActivoTi.TipoCapaSistemaId, db.ActivoTi.Fecha, db.ActivoTi.CvssConfidentiality, db.ActivoTi.CvssIntegrity, db.ActivoTi.CvssAvailability, db.ActivoTi.CvssJustificacion, db.ActivoTi.AprobacionJefeRiesgo)
    #fields = (db.ActivoTi.id, db.ActivoTi.Nombre, db.ActivoTi.TipoCapaSistemaId, db.ActivoTi.Fecha, db.ActivoTi.CvssConfidentiality, db.ActivoTi.CvssIntegrity, db.ActivoTi.CvssAvailability, db.ActivoTi.AprobacionJefeRiesgo)
    fields = (db.ActivoTi.id, db.ActivoTi.Nombre, db.ActivoTi.TipoCapaSistemaId, db.ActivoTi.Fecha, db.ActivoTi.AprobacionJefeRiesgo)
    #links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"])), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]
    if request.vars.get('keywords'):
        #links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1", base64.b64encode(request.vars.get('keywords'))] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0", base64.b64encode(request.vars.get('keywords'))])), lambda row: A(T('CVSS'),_class='button btn btn-info',_href=URL("default","CvssImpacto", args=[row.id, row.CvssConfidentiality, row.CvssIntegrity, row.CvssAvailability,  base64.b64encode(str(row.CvssJustificacion))]))]
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1", base64.b64encode(request.vars.get('keywords'))] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0", base64.b64encode(request.vars.get('keywords'))])) ]
    else:
        #links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"])), lambda row: A(T('CVSS'),_class='button btn btn-info',_href=URL("default","CvssEvaluation", args=[row.id ]))]
        #links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"])), lambda row: A(T('CVSS'),_class='button btn btn-info',_href=URL("default","CvssImpacto", args=[row.id, row.CvssConfidentiality, row.CvssIntegrity, row.CvssAvailability,  base64.b64encode(str(row.CvssJustificacion) )] ))]
        #links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"])), lambda row: A(T('CVSS'),_class='button btn btn-info',_href=URL("default","CvssImpacto", args=[row.id, row.CvssConfidentiality, row.CvssIntegrity, row.CvssAvailability ] ))]
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]
        
    if auth.has_membership(role='riskManager') or auth.has_membership(role='admin'):
        ActualizaAprobacion(Tabla)
        form = SQLFORM.grid(db.ActivoTi, fields=fields, links=links, searchable=True, create=True, editable=True, deletable=True, user_signature=True, paginate=10, maxtextlength=200)
    elif auth.has_membership(role='riskAnalyst'):
        ActualizaAprobacion(Tabla)
        form = SQLFORM.grid(db.ActivoTi, fields=fields, links=links, searchable=True, create=True, editable=True, deletable=False, user_signature=True, paginate=10, maxtextlength=200)
    elif auth.has_membership(role='auditAnalyst') or auth.has_membership(role='auditManager') or auth.has_membership(role='guest'):
        form = SQLFORM.grid(db.ActivoTi, fields=fields, searchable=True, create=False, editable=False, deletable=False, user_signature=True, paginate=10, maxtextlength=200)
    elif auth.has_membership(role='ItAdministrator'):
        ActivoTi=[]
        for a in db(db.ActivoTi.AprobacionJefeRiesgo=='T').select(db.ActivoTi.id, db.ActivoTi.AdministradorInterno):
            try:
                for b in str(str(a.AdministradorInterno).replace(' ','')).split(','):
                    if b==auth.user.username:
                        ActivoTi.append(int(a.id))
            except:
                pass
        query = db.ActivoTi.id.belongs(ActivoTi)

        #query = (db.ActivoTi.AdministradoInterno.contains(auth.user.username, all=True))
        form = SQLFORM.grid(query=query, fields=fields, searchable=True, create=False, editable=True, deletable=False, user_signature=True, paginate=15, maxtextlength=200)
    else:
        redirect(URL('default','index'))
    return dict(form=form)

@auth.requires_login()
def TipoCumplimiento():
    #Max 5 regitros
    TotalTipoCumplimiento=db().select(db.TipoCumplimiento.id, limitby=(0,5), orderby=db.TipoCumplimiento.id).last().id
    db(db.TipoCumplimiento.id>TotalTipoCumplimiento).delete()
    #--------------------------------------------------------------------------------
    db.TipoCumplimiento.id.readable=False
    db.TipoCumplimiento.LogAnalistaAuditoria.writable = False
    db.TipoCumplimiento.LogJefeAuditoria.writable = False
    db.TipoCumplimiento.AprobacionAnalistaAuditoria.writable = False
    db.TipoCumplimiento.AprobacionJefeAuditoria.writable = False
    Tabla = 'TipoCumplimiento'
    #fields = (db.TipoCumplimiento.Nombre, db.TipoCumplimiento.Descripcion, db.TipoCumplimiento.Color, db.TipoCumplimiento.AprobacionAnalistaAuditoria, db.TipoCumplimiento.AprobacionJefeAuditoria)
    fields = (db.TipoCumplimiento.Nombre, db.TipoCumplimiento.Descripcion, db.TipoCumplimiento.AprobacionJefeAuditoria)
    #links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"])), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]
    if request.vars.get('keywords'):
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1", base64.b64encode(request.vars.get('keywords'))] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0", base64.b64encode(request.vars.get('keywords'))]))]
    else:
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]
        
    if auth.has_membership(role='auditAnalyst') or auth.has_membership(role='auditManager') or auth.has_membership(role='admin'):
        ActualizaAprobacion(Tabla)
        form = SQLFORM.grid(db.TipoCumplimiento, fields=fields, links=links, searchable=True, create=True, editable=True, deletable=True, user_signature=True, paginate=15, maxtextlength=250)
    elif auth.has_membership(role='riskAnalyst') or auth.has_membership(role='riskManager') or auth.has_membership(role='guest'):
        form = SQLFORM.grid(db.TipoCumplimiento, fields=fields, searchable=True, create=False, editable=False, deletable=False, user_signature=True, paginate=15, maxtextlength=250)
    else:
        redirect(URL('default', 'index'))
    return dict(form=form)

@auth.requires_login()
def SeguridadTi():
    #db.SeguridadTi.id.readable = False
    db.SeguridadTi.LogAnalistaAuditoria.writable = False
    db.SeguridadTi.LogJefeAuditoria.writable = False
    db.SeguridadTi.LogResponsableControl.writable = False
    db.SeguridadTi.AprobacionAnalistaAuditoria.writable = False
    db.SeguridadTi.AprobacionJefeAuditoria.writable = False
    db.SeguridadTi.AprobacionResponsableControl.writable = False
    Tabla = 'SeguridadTi'
    #fields = (db.SeguridadTi.id, db.SeguridadTi.ActivoTiId, db.SeguridadTi.DetallePoliticaId, db.SeguridadTi.EscenarioRiesgo, db.SeguridadTi.Recomendacion, db.SeguridadTi.EfectividadControl, db.SeguridadTi.AprobacionResponsableControl, db.SeguridadTi.AprobacionAnalistaAuditoria, db.SeguridadTi.AprobacionJefeAuditoria)
    #fields = (db.SeguridadTi.id, db.SeguridadTi.ActivoTiId, db.SeguridadTi.DetallePoliticaId, db.SeguridadTi.EscenarioRiesgo, db.SeguridadTi.Recomendacion, db.SeguridadTi.AprobacionAnalistaAuditoria, db.SeguridadTi.AprobacionJefeAuditoria)
    fields = (db.SeguridadTi.id, db.SeguridadTi.ActivoTiId, db.SeguridadTi.DetallePoliticaId, db.SeguridadTi.EscenarioRiesgo, db.SeguridadTi.EvidenciaCumplimiento, db.SeguridadTi.Recomendacion, db.SeguridadTi.Cumplimiento, db.SeguridadTi.EfectividadControl, db.SeguridadTi.AprobacionJefeAuditoria)
    #links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"])), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"])), lambda row: A(T('CVSS'),_class='button btn btn-info',_href=URL("default","CvssEvaluation", args=[row.id, Tabla, "2"]))]
    if request.vars.get('keywords'):
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1", base64.b64encode(request.vars.get('keywords'))] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0", base64.b64encode(request.vars.get('keywords'))])), lambda row: A(T('CVSS'),_class='button btn btn-info',_href=URL("default","CvssEvaluation", args=[row.id, Tabla, "2"]))]
    else:
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"])), lambda row: A(T('CVSS'),_class='button btn btn-info',_href=URL("default","CvssEvaluation", args=[row.id, Tabla, "2"]))]
        
    if auth.has_membership(role='auditAnalyst') or auth.has_membership(role='auditManager') or auth.has_membership(role='admin'):
        ActualizaAprobacion(Tabla)
        form = SQLFORM.grid(db.SeguridadTi, fields=fields, links=links, searchable=True, create=True, editable=True, deletable=True, user_signature=True, paginate=5, maxtextlength=250)
    elif auth.has_membership(role='controlResp'):
        ActualizaAprobacion(Tabla)
        controlId=[]
        for a in db(db.SeguridadTi.AprobacionJefeAuditoria=='T').select(db.SeguridadTi.id, db.SeguridadTi.ResponsableControl):
            try:
                for b in str(str(a.ResponsableControl).replace(' ','')).split(','):
                    if b==auth.user.username:
                        controlId.append(int(a.id))
            except:
                pass
        #query = (db.SeguridadTi.id==0)
        #for i in controlId:
        #    query = (db.SeguridadTi.id==i) | query
        query = db.SeguridadTi.id.belongs(controlId)
        #query = (query) & ( (db.AnalisisRiesgo.AprobacionResponsableControl=='F') & (db.AnalisisRiesgo.AprobacionJefeRiesgo=='F') )
        db.SeguridadTi.ActivoTiId.writable=False
        db.SeguridadTi.DetallePoliticaId.writable=False
        db.SeguridadTi.ServicioActivoTi.writable=False
        db.SeguridadTi.EscenarioRiesgo.writable=False
        db.SeguridadTi.TipoVulnerabilidadId.writable=False
        db.SeguridadTi.AnalisisRiesgoId.writable=False
        db.SeguridadTi.TipoCumplimientoId.writable=False
        db.SeguridadTi.EvidenciaCumplimiento.writable=False
        db.SeguridadTi.Recomendacion.writable=False
        db.SeguridadTi.FechaRevision.writable=False
        db.SeguridadTi.ResponsableControl.writable=False
    #db.SeguridadTi.TipoTratamientoRiesgoId.writable=False
        db.SeguridadTi.EfectividadControl.writable=False
        db.SeguridadTi.NivelMadurezId.writable=False
        #db.SeguridadTi.Visible.writable=False
        form=SQLFORM.grid(query=query, fields=fields, links=links, searchable=True, create=False, editable=True, deletable=False, user_signature=True, paginate=5, maxtextlength=250)
    elif auth.has_membership(role='riskAnalyst') or auth.has_membership(role='riskManager') or auth.has_membership(role='guest'):
        form = SQLFORM.grid(db.SeguridadTi, fields=fields, searchable=True, create=False, editable=False, deletable=False, user_signature=True, paginate=5, maxtextlength=250)
    else:
        redirect(URL('default','index'))
    return dict(form=form)

@auth.requires_login()
def ActivoTiPlataforma():
    db.ActivoTiPlataforma.id.readable = False
    db.ActivoTiPlataforma.AprobacionJefeRiesgo.writable=False
    db.ActivoTiPlataforma.AprobacionAnalistaRiesgo.writable=False
    db.ActivoTiPlataforma.LogJefeRiesgo.writable=False
    db.ActivoTiPlataforma.LogAnalistaRiesgo.writable=False
    Tabla = 'ActivoTiPlataforma'
    fields = (db.ActivoTiPlataforma.ActivoTiId, db.ActivoTiPlataforma.PlataformaId, db.ActivoTiPlataforma.Descripcion, db.ActivoTiPlataforma.AprobacionAnalistaRiesgo, db.ActivoTiPlataforma.AprobacionJefeRiesgo)
    #links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"])), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]
    if request.vars.get('keywords'):
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1", base64.b64encode(request.vars.get('keywords'))] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0", base64.b64encode(request.vars.get('keywords'))]))]
    else:
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]
        
    if auth.has_membership(role='riskAnalyst') or auth.has_membership(role='riskManager') or auth.has_membership(role='admin'):
        ActualizaAprobacion(Tabla)
        form = SQLFORM.grid(db.ActivoTiPlataforma, fields=fields, links=links, searchable=True, create=True, editable=True, deletable=True, user_signature=True, paginate=15, maxtextlength=250)
    elif auth.has_membership(role='auditAnalyst') or auth.has_membership(role='auditManager') or auth.has_membership(role='guest'):
        form = SQLFORM.grid(db.ActivoTiPlataforma, fields=fields, searchable=True, create=False, editable=False, deletable=False, user_signature=True, paginate=15, maxtextlength=250)
    else:
        redirect(URL('default','index'))
    return dict(form=form)

@auth.requires_login()
def ActivoTiProceso():
    #db.ActivoTiProceso.id.readable = False
    db.ActivoTiProceso.AprobacionJefeRiesgo.writable=False
    db.ActivoTiProceso.AprobacionAnalistaRiesgo.writable=False
    db.ActivoTiProceso.LogJefeRiesgo.writable=False
    db.ActivoTiProceso.LogAnalistaRiesgo.writable=False
    Tabla = 'ActivoTiProceso'
    fields = (db.ActivoTiProceso.id, db.ActivoTiProceso.ActivoTiId, db.ActivoTiProceso.ProcesoId, db.ActivoTiProceso.Descripcion, db.ActivoTiProceso.AprobacionJefeRiesgo)
    #links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"])), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]
    if request.vars.get('keywords'):
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1", base64.b64encode(request.vars.get('keywords'))] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0", base64.b64encode(request.vars.get('keywords'))]))]
    else:
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]
        
    if auth.has_membership(role='riskManager') or auth.has_membership(role='admin'):
        ActualizaAprobacion(Tabla)
        form = SQLFORM.grid(db.ActivoTiProceso, fields=fields, links=links, searchable=True, create=True, editable=True, deletable=True, user_signature=True, paginate=15, maxtextlength=250)
    elif auth.has_membership(role='riskAnalyst'):
        ActualizaAprobacion(Tabla)
        form = SQLFORM.grid(db.ActivoTiProceso, fields=fields, links=links, searchable=True, create=True, editable=True, deletable=False, user_signature=True, paginate=15, maxtextlength=250)
    elif auth.has_membership(role='auditAnalyst') or auth.has_membership(role='auditManager') or auth.has_membership(role='guest'):
        form = SQLFORM.grid(db.ActivoTiProceso, fields=fields, searchable=True, create=False, editable=False, deletable=False, user_signature=True, paginate=15, maxtextlength=250)
    else:
        redirect(URL('default','index'))
    return dict(form=form)

@auth.requires_login()
def ActivoTiActivoInformacion():
    #db.ActivoTiActivoInformacion.id.readable = False
    db.ActivoTiActivoInformacion.AprobacionJefeRiesgo.writable=False
    db.ActivoTiActivoInformacion.AprobacionAnalistaRiesgo.writable=False
    db.ActivoTiActivoInformacion.LogJefeRiesgo.writable=False
    db.ActivoTiActivoInformacion.LogAnalistaRiesgo.writable=False
    Tabla = 'ActivoTiActivoInformacion'
    fields = (db.ActivoTiActivoInformacion.id, db.ActivoTiActivoInformacion.ActivoTiId, db.ActivoTiActivoInformacion.ActivoInformacionId, db.ActivoTiActivoInformacion.Descripcion, db.ActivoTiActivoInformacion.AprobacionJefeRiesgo)
    if request.vars.get('keywords'):
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1", base64.b64encode(request.vars.get('keywords'))] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0", base64.b64encode(request.vars.get('keywords'))]))]
    else:
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]
        
    if auth.has_membership(role='riskManager') or auth.has_membership(role='admin'):
        ActualizaAprobacion(Tabla)
        form = SQLFORM.grid(db.ActivoTiActivoInformacion, fields=fields, links=links, searchable=True, create=True, editable=True, deletable=True, user_signature=True, paginate=10, maxtextlength=500)
    elif auth.has_membership(role='riskAnalyst'):
        ActualizaAprobacion(Tabla)
        form = SQLFORM.grid(db.ActivoTiActivoInformacion, fields=fields, links=links, searchable=True, create=True, editable=True, deletable=False, user_signature=True, paginate=10, maxtextlength=500)
    elif auth.has_membership(role='auditAnalyst') or auth.has_membership(role='auditManager') or auth.has_membership(role='guest'):
        form = SQLFORM.grid(db.ActivoTiActivoInformacion, fields=fields, searchable=True, create=False, editable=False, deletable=False, user_signature=True, paginate=10, maxtextlength=500)
    else:
        redirect(URL('default','index'))
    return dict(form=form)

#---------------------------------------------------------------------------
#Se definen las metricas base, temporal y ambiental
#Las metricas ese cargan automaticamente cuando se crea una nueva instancia
#---------------------------------------------------------------------------
@auth.requires_login()
def GrupoMetrica():
    #db.GrupoMetrica.id.readable = False
    db.GrupoMetrica.LogJefeRiesgo.writable = False
    db.GrupoMetrica.LogAnalistaRiesgo.writable = False
    db.GrupoMetrica.AprobacionJefeRiesgo.writable = False
    db.GrupoMetrica.AprobacionAnalistaRiesgo.writable = False
    db.GrupoMetrica.Nombre.writable = False
    Tabla = 'GrupoMetrica'
    fields = (db.GrupoMetrica.id, db.GrupoMetrica.Nombre, db.GrupoMetrica.Descripcion, db.GrupoMetrica.AprobacionJefeRiesgo)
    #----------------------------------------------------------
    #Se usa if para obtener los queries/parametros de busqueda
    #y despues de ejecutar el proceso el usuario visualice los
    #mismos registros
    #----------------------------------------------------------
    if request.vars.get('keywords'):
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1", base64.b64encode(request.vars.get('keywords'))] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0", base64.b64encode(request.vars.get('keywords'))]))]
    else:
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]

    if auth.has_membership(role='riskAnalyst') or auth.has_membership(role='riskManager') or auth.has_membership(role='admin'):
        #-------------------------------------------------------
        #Se llama a la funcion ActualizaAprobacion para que 
        #se solicite nuevamente autorizacion en caso de edicion
        #-------------------------------------------------------
        ActualizaAprobacion(Tabla)
        form = SQLFORM.grid(db.GrupoMetrica, links=links, fields=fields, searchable=True, create=False, editable=True, deletable=False, user_signature=True, paginate=10, maxtextlength=500)
    elif auth.has_membership(role='auditAnalyst') or auth.has_membership(role='auditManager') or auth.has_membership(role='guest'):
        form = SQLFORM.grid(db.GrupoMetrica, fields=fields, searchable=True, create=False, editable=False, deletable=False, user_signature=True, paginate=10, maxtextlength=500)
    else:
        redirect(URL('default','index'))
    return dict(form=form)

#------------------------------------------------------
#Catalogo para definir el detalle de las metricas CVSS
#------------------------------------------------------
@auth.requires_login()
def Metrica():
    #db.Metrica.id.readable = False
    db.Metrica.LogJefeRiesgo.writable = False
    db.Metrica.LogAnalistaRiesgo.writable = False
    db.Metrica.AprobacionJefeRiesgo.writable = False
    db.Metrica.AprobacionAnalistaRiesgo.writable = False
    db.Metrica.Nombre.writable = False
    db.Metrica.Codigo.writable = False
    db.Metrica.GrupoMetricaId.writable = False
    Tabla = 'Metrica'
    fields = (db.Metrica.id, db.Metrica.GrupoMetricaId, db.Metrica.Nombre, db.Metrica.Descripcion, db.Metrica.Codigo, db.Metrica.AprobacionJefeRiesgo)
    #----------------------------------------------------------
    #Se usa if para obtener los queries/parametros de busqueda
    #y despues de ejecutar el proceso el usuario visualice los
    #mismos registros
    #----------------------------------------------------------
    if request.vars.get('keywords'):
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1", base64.b64encode(request.vars.get('keywords'))] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0", base64.b64encode(request.vars.get('keywords'))]))]
    else:
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]

    if auth.has_membership(role='riksAnalyst') or auth.has_membership(role='riskManager') or auth.has_membership(role='admin'):
        #-------------------------------------------------------
        #Se llama a la funcion ActualizaAprobacion para que 
        #se solicite nuevamente autorizacion en caso de edicion
        #-------------------------------------------------------
        ActualizaAprobacion(Tabla)
        form = SQLFORM.grid(db.Metrica, links=links, fields=fields, searchable=True, create=False, editable=True, deletable=False, user_signature=True, paginate=10, maxtextlength=500)
    elif auth.has_membership(role='auditAnalyst') or auth.has_membership(role='auditManager') or auth.has_membership(role='guest'):
        form = SQLFORM.grid(db.Metrica, fields=fields, searchable=True, create=False, editable=False, deletable=False, user_signature=True, paginate=10, maxtextlength=500)
    else:
        redirect(URL('default','index'))
    return dict(form=form)

#------------------------------------------------------------------
#Catalogo para asignar valores numericos de las metricas definidas
#------------------------------------------------------------------
@auth.requires_login()
def ValorMetrica():
    #db.ValorMetrica.id.readable = False
    db.ValorMetrica.LogJefeRiesgo.writable = False
    db.ValorMetrica.LogAnalistaRiesgo.writable = False
    db.ValorMetrica.AprobacionJefeRiesgo.writable = False
    db.ValorMetrica.AprobacionAnalistaRiesgo.writable = False
    db.ValorMetrica.MetricaId.writable = False
    db.ValorMetrica.Nombre.writable = False
    db.ValorMetrica.ValorMetrica.writable = False
    db.ValorMetrica.ValorNumerico.writable = False
    Tabla = 'ValorMetrica'
    fields = (db.ValorMetrica.id, db.ValorMetrica.MetricaId, db.ValorMetrica.Nombre, db.ValorMetrica.Descripcion, db.ValorMetrica.ValorMetrica, db.ValorMetrica.ValorNumerico, db.ValorMetrica.AprobacionJefeRiesgo)
    #----------------------------------------------------------
    #Se usa if para obtener los queries/parametros de busqueda
    #y despues de ejecutar el proceso el usuario visualice los
    #mismos registros
    #----------------------------------------------------------
    if request.vars.get('keywords'):
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1", base64.b64encode(request.vars.get('keywords'))] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0", base64.b64encode(request.vars.get('keywords'))]))]
    else:
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]

    if auth.has_membership(role='riskAnalyst') or auth.has_membership(role='riskManager') or auth.has_membership(role='admin'):
        #-------------------------------------------------------
        #Se llama a la funcion ActualizaAprobacion para que 
        #se solicite nuevamente autorizacion en caso de edicion
        #-------------------------------------------------------
        ActualizaAprobacion(Tabla)
        form = SQLFORM.grid(db.ValorMetrica, links=links, fields=fields, searchable=True, create=False, editable=True, deletable=False, user_signature=True, paginate=10, maxtextlength=500)
    elif auth.has_membership(role='auditAnalyst') or auth.has_membership(role='auditManager') or auth.has_membership(role='guest'):
        form = SQLFORM.grid(db.ValorMetrica, searchable=True, fields=fields, create=False, editable=False, deletable=False, user_signature=True, paginate=10, maxtextlength=500)
    else:
        redirect(URL('default','index'))
    return dict(form=form)

#-----------------------------------------------------------------
#Se evaluan los factores de riesgo de acuerdo a las metricas CVSS
#-----------------------------------------------------------------
@auth.requires_login()
def ValorMetricaSeguridadTi():
    db.ValorMetricaSeguridadTi.LogAnalistaRiesgo.writable = False
    db.ValorMetricaSeguridadTi.LogJefeRiesgo.writable = False
    db.ValorMetricaSeguridadTi.LogResponsableControl.writable = False
    db.ValorMetricaSeguridadTi.AprobacionAnalistaRiesgo.writable = False
    db.ValorMetricaSeguridadTi.AprobacionJefeRiesgo.writable = False
    db.ValorMetricaSeguridadTi.AprobacionResponsableControl.writable = False
    Tabla = 'ValorMetricaSeguridadTi'
    fields = (db.ValorMetricaSeguridadTi.id, db.ValorMetricaSeguridadTi.TratamientoRiesgoId, db.ValorMetricaSeguridadTi.ValorMetricaId, db.ValorMetricaSeguridadTi.Descripcion, db.ValorMetricaSeguridadTi.AprobacionJefeRiesgo)
    #----------------------------------------------------------
    #Se usa if para obtener los queries/parametros de busqueda
    #y despues de ejecutar el proceso el usuario visualice los
    #mismos registros
    #----------------------------------------------------------
    if request.vars.get('keywords'):
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1", base64.b64encode(request.vars.get('keywords'))] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0", base64.b64encode(request.vars.get('keywords'))]))]
    else:
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]

    if auth.has_membership(role='riskAnalyst') or auth.has_membership(role='riskManager') or auth.has_membership(role='admin'):
        #-------------------------------------------------------
        #Se llama a la funcion ActualizaAprobacion para que 
        #se solicite nuevamente autorizacion en caso de edicion
        #-------------------------------------------------------
        ActualizaAprobacion(Tabla)
        form = SQLFORM.grid(db.ValorMetricaSeguridadTi, fields=fields, links=links, searchable=True, create=True, editable=True, deletable=True, user_signature=True, paginate=10, maxtextlength=500)
    elif auth.has_membership(role='auditAnalyst') or auth.has_membership(role='auditManager') or auth.has_membership(role='guest'):
        form = SQLFORM.grid(db.ValorMetrizaSeguridadTi, fields=fields, searchable=True, create=False, editable=False, deletable=False, user_signature=True, paginate=10, maxtextlength=500)
    else:
        redirect(URL('default','index'))
    return dict(form=form)

@auth.requires_login()
def ControlCvss():
    db.ControlCvss.LogAnalistaRiesgo.writable = False
    db.ControlCvss.LogJefeRiesgo.writable = False
    db.ControlCvss.AprobacionAnalistaRiesgo.writable = False
    db.ControlCvss.AprobacionJefeRiesgo.writable = False
    Tabla = 'ControlCvss'
    fields = (db.ControlCvss.id, db.ControlCvss.EvaluacionControlId, db.ControlCvss.ValorMetricaId, db.ControlCvss.Descripcion, db.ControlCvss.AprobacionJefeRiesgo)
    #----------------------------------------------------------
    #Se usa if para obtener los queries/parametros de busqueda
    #y despues de ejecutar el proceso el usuario visualice los
    #mismos registros
    #----------------------------------------------------------
    if request.vars.get('keywords'):
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1", base64.b64encode(request.vars.get('keywords'))] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0", base64.b64encode(request.vars.get('keywords'))]))]
    else:
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]

    if auth.has_membership(role='riskAnalyst') or auth.has_membership(role='riskManager') or auth.has_membership(role='admin'):
        #-------------------------------------------------------
        #Se llama a la funcion ActualizaAprobacion para que 
        #se solicite nuevamente autorizacion en caso de edicion
        #-------------------------------------------------------
        ActualizaAprobacion(Tabla)
        form = SQLFORM.grid(db.ControlCvss, fields=fields, links=links, searchable=True, create=True, editable=True, deletable=True, user_signature=True, paginate=10, maxtextlength=500)
    elif auth.has_membership(role='auditAnalyst') or auth.has_membership(role='auditManager') or auth.has_membership(role='guest'):
        form = SQLFORM.grid(db.ControlCvss, fields=fields, searchable=True, create=False, editable=False, deletable=False, user_signature=True, paginate=10, maxtextlength=500)
    else:
        redirect(URL('default','index'))
    return dict(form=form)

#------------------------------------------------------------------------------------
#Esta funcion se utiliza para medir el impacto en base al sistema o activo de TI 
#Actualiza todos los registros de ValorMetricaSeguridadTi en base al sistema evaluado
#------------------------------------------------------------------------------------
@auth.requires_login()
#@auth.requires(auth.has_membership(role='riskAnalyst') or auth.has_membership(role='riskManager') or auth.has_membership(role='admin'))
def CvssImpacto():
    TratamientoRiesgoId = db(db.TratamientoRiesgo.ActivoTiId==request.args(0)).select(db.TratamientoRiesgo.id)
    for i in TratamientoRiesgoId:
        db.ValorMetricaSeguridadTi.update_or_insert(( (db.ValorMetricaSeguridadTi.TratamientoRiesgoId==i) & ((db.ValorMetricaSeguridadTi.ValorMetricaId==14 ) | (db.ValorMetricaSeguridadTi.ValorMetricaId==15 ) | (db.ValorMetricaSeguridadTi.ValorMetricaId==16 ))), TratamientoRiesgoId=i, ValorMetricaId=request.args(1), Descripcion=base64.b64decode(request.args(4)) )
    for i in TratamientoRiesgoId:
        db.ValorMetricaSeguridadTi.update_or_insert(( (db.ValorMetricaSeguridadTi.TratamientoRiesgoId==i) & ((db.ValorMetricaSeguridadTi.ValorMetricaId==17 ) | (db.ValorMetricaSeguridadTi.ValorMetricaId==18 ) | (db.ValorMetricaSeguridadTi.ValorMetricaId==19 ))), TratamientoRiesgoId=i, ValorMetricaId=request.args(2), Descripcion=base64.b64decode(request.args(4)) )
    for i in TratamientoRiesgoId:
        db.ValorMetricaSeguridadTi.update_or_insert(( (db.ValorMetricaSeguridadTi.TratamientoRiesgoId==i) & ((db.ValorMetricaSeguridadTi.ValorMetricaId==20 ) | (db.ValorMetricaSeguridadTi.ValorMetricaId==21 ) | (db.ValorMetricaSeguridadTi.ValorMetricaId==22 ))), TratamientoRiesgoId=i, ValorMetricaId=request.args(3), Descripcion=base64.b64decode(request.args(4)) )
    redirect(URL('default','ActivoTi'))

#--------------------------------------------------------
#Son las formulas CVSS 3.1 de acuerdo a la documentacion
#--------------------------------------------------------
'''
@auth.requires_login()
@auth.requires( auth.has_membership(role='riskAnalyst') or auth.has_membership(role='riskManager') or auth.has_membership(role='admin') )
def CvssEvaluation():
    if request.args(3):
        parametros = base64.b64decode(request.args(3))
    else:
        pass
    #----------------------------------------------------------------------------------------------
    #Se definen los valores minimos, en caso que no se evalue en el modulo ValorMetricaSeguridadTi
    #Por lo que si se evalua con estos valores, el resultado es 0, solo se evaluan metricas Base
    #----------------------------------------------------------------------------------------------

    #------------------------
    #Variables Iniciales Base
    #------------------------
    cvssBaseAV=0.2 #Physical
    cvssBaseAVString="P"
    cvssBaseAC=0.44 #High
    cvssBaseACString="H"
    cvssBasePR=0.27 #High
    cvssBasePRString="H"
    cvssBaseUI=0.62 #Required
    cvssBaseUIString="R"
    cvssBaseS =6.42 #Unhanged
    cvssBaseSString="U"
    cvssBaseC =0 #None
    cvssBaseCString="N"
    cvssBaseI =0 #None
    cvssBaseIString="N"
    cvssBaseA =0 #None
    cvssBaseAString="N"
    changed=0
    #------------------------------
    #Variables Iniciales Temporales
    #------------------------------
    cvssTempE  = 1 #Not Defined
    cvssTempEString  = "X"
    cvssTempRL = 1 #Not Defined
    cvssTempRLString = "X"
    cvssTempRC = 1 #Not Defined
    cvssTempRCString = "X"
    #--------------------------------
    #Variables Iniciales Ambientales
    #--------------------------------
    cvssEnvCR  = 1 #Not Defined
    cvssEnvCRString  = "X"
    cvssEnvIR  = 1 #Not Defined
    cvssEnvIRString  = "X"
    cvssEnvAR  = 1 #Not Defined
    cvssEnvARString  = "X"
    cvssEnvMAV = 1 #Physical
    cvssEnvMAVString = "P"
    cvssEnvMAC = 1 #High
    cvssEnvMACString = "H"
    cvssEnvMPR = 1 #High
    cvssEnvMPRString = "H"
    cvssEnvMUI = 1 #Required
    cvssEnvMUIString = "R"
    cvssEnvMS  = 1 #Unchanged
    cvssEnvMSString = "U"
    cvssEnvMC  = 0 #None
    cvssEnvMCString  = "N"
    cvssEnvMI  = 0 #None
    cvssEnvMIString  = "N"
    cvssEnvMA  = 0 #None
    cvssEnvMAString  = "N"
    changedE=0
    #---------------------------------------------
    #request.args(0) es el ID del factor de riesgo
    #---------------------------------------------
    cvss = db(db.ValorMetricaSeguridadTi.TratamientoRiesgoId==request.args(0)).select(db.ValorMetricaSeguridadTi.ALL)
    for s in cvss:
        #-----------------------------------------------------------------------
        #El grupo metrica 5 corresponde a "Base Metric Group | S | Scope (S)"
        #Los valores que se pueden tomar son 12 Changed(C), 13 Unchanged(U)
        #-----------------------------------------------------------------------
        if s.ValorMetricaId.MetricaId == 5:
            #--------------
            #12 Changed (C)
            #--------------
            if s.ValorMetricaId == 12:
                changed = 1
            #----------------
            #13 Unchanged (U)
            #----------------
            elif s.ValorMetricaId == 13:
                changed = 0
        #------------------------------------------------------------------------------------------
        #El grupo metrica 19 corresponde a "Environmental Metric Group | MS | Modified Scope (MS)"
        #Los valores son 64 Not Defined (X), 65 Modified Changed (C), 66 Modified Unchanged (U)	
        #------------------------------------------------------------------------------------------
        if s.ValorMetricaId.MetricaId == 19:
            #--------------
            #65 Changed (C)
            #--------------
            if s.ValorMetricaId == 65:
                changedE = 1
            #----------------
            #66 Unchanged (U)
            #----------------
            elif s.ValorMetricaId == 66:
                changedE = 0
        #for i in cvss:
        #------------------------------------------------
        #1 | Base Metric Group | AV | Attack Vector (AV)
        #------------------------------------------------
        if s.ValorMetricaId.MetricaId == 1:
            cvssBaseAV = s.ValorMetricaId.ValorNumerico
            cvssBaseAVString = s.ValorMetricaId.ValorMetrica
        #---------------------------------------------------
        #2 | Base Metric Group | AC | Attack Complexity (AC)
        #---------------------------------------------------
        if s.ValorMetricaId.MetricaId == 2:
            cvssBaseAC = s.ValorMetricaId.ValorNumerico
            cvssBaseACString = s.ValorMetricaId.ValorMetrica
        #-----------------------------------------------------
        #3 | Base Metric Group | PR | Privileges Required (PR)
        #-----------------------------------------------------
        if s.ValorMetricaId.MetricaId == 3 and changed == 0:
            cvssBasePR = s.ValorMetricaId.ValorNumerico
            cvssBasePRString = s.ValorMetricaId.ValorMetrica
        elif s.ValorMetricaId.MetricaId==3 and changed==1 and s.ValorMetricaId==7: #Changed (C) & PR High (H)
            cvssBasePR=0.5
            cvssBasePRString = s.ValorMetricaId.ValorMetrica
        elif s.ValorMetricaId.MetricaId==3 and changed==1 and s.ValorMetricaId==8: #Changed (C) & PR Low (L)
            cvssBasePR=0.68
            cvssBasePRString = s.ValorMetricaId.ValorMetrica
        #--------------------------------------------------
        #4 | Base Metric Group | UI | User Interaction (UI)
        #--------------------------------------------------
        if s.ValorMetricaId.MetricaId == 4:
            cvssBaseUI = s.ValorMetricaId.ValorNumerico
            cvssBaseUIString = s.ValorMetricaId.ValorMetrica
        #--------------------------------------
        #5 | Base Metric Group | S | Scope (S)
        #--------------------------------------
        if s.ValorMetricaId.MetricaId == 5:
            cvssBaseS = s.ValorMetricaId.ValorNumerico
            cvssBaseSString = s.ValorMetricaId.ValorMetrica
        #-------------------------------------------
        #6 | Base Metric Group | C | Confidentiality
        #-------------------------------------------
        if s.ValorMetricaId.MetricaId == 6:
            cvssBaseC = s.ValorMetricaId.ValorNumerico
            cvssBaseCString = s.ValorMetricaId.ValorMetrica
        #-----------------------------------------
        #7 | Base Metric Group | I | Integrity (I)
        #-----------------------------------------
        if s.ValorMetricaId.MetricaId == 7:
            cvssBaseI = s.ValorMetricaId.ValorNumerico
            cvssBaseIString = s.ValorMetricaId.ValorMetrica
        #--------------------------------------------
        #8 | Base Metric Group | A | Availability (A)
        #--------------------------------------------
        if s.ValorMetricaId.MetricaId == 8:
            cvssBaseA = s.ValorMetricaId.ValorNumerico
            cvssBaseAString = s.ValorMetricaId.ValorMetrica
        #--------------------
        #Metricas temporales
        #--------------------
        if s.ValorMetricaId.MetricaId == 9:
            cvssTempE = s.ValorMetricaId.ValorNumerico
            cvssTempEString = s.ValorMetricaId.ValorMetrica
        if s.ValorMetricaId.MetricaId == 10:
            cvssTempRL = s.ValorMetricaId.ValorNumerico
            cvssTempRLString = s.ValorMetricaId.ValorMetrica
        if s.ValorMetricaId.MetricaId == 11:
            cvssTempRC = s.ValorMetricaId.ValorNumerico
            cvssTempRCString = s.ValorMetricaId.ValorMetrica
        #---------------------
        #Metricas ambientales
        #---------------------
        if s.ValorMetricaId.MetricaId == 12:
            cvssEnvCR = s.ValorMetricaId.ValorNumerico
            cvssEnvCRString = s.ValorMetricaId.ValorMetrica
        if s.ValorMetricaId.MetricaId == 13:
            cvssEnvIR = s.ValorMetricaId.ValorNumerico
            cvssEnvIRString = s.ValorMetricaId.ValorMetrica
        if s.ValorMetricaId.MetricaId == 14:
            cvssEnvAR = s.ValorMetricaId.ValorNumerico
            cvssEnvARString = s.ValorMetricaId.ValorMetrica
        if s.ValorMetricaId.MetricaId == 15:
            cvssEnvMAV = s.ValorMetricaId.ValorNumerico
            cvssEnvMAVString = s.ValorMetricaId.ValorMetrica
        if s.ValorMetricaId.MetricaId == 16:
            cvssEnvMAC = s.ValorMetricaId.ValorNumerico
            cvssEnvMACString = s.ValorMetricaId.ValorMetrica
        #---------------------
        #Si no cambio el scope
        #---------------------
        if s.ValorMetricaId.MetricaId == 17 and changedE == 0:
            cvssEnvMPR = s.ValorMetricaId.ValorNumerico
            cvssEnvMPRString = s.ValorMetricaId.ValorMetrica
        #----------------------------------------------
        #Si cambio se asigna de acuerdo a su criticidad
        #----------------------------------------------
        elif s.ValorMetricaId.MetricaId == 17 and changedE == 1 and s.ValorMetricaId == 58: #Changed (C) & PR High (H)
            cvssEnvMPR=0.5
            cvssEnvMPRString = s.ValorMetricaId.ValorMetrica
        elif s.ValorMetricaId.MetricaId == 17 and changedE == 1 and s.ValorMetricaId == 59: #Changed (C) & PR Low (L)
            cvssEnvMPR=0.68
            cvssEnvMPRString = s.ValorMetricaId.ValorMetrica
        #-------------------------------
        #Modified User Interaction (MUI)
        #-------------------------------
        if s.ValorMetricaId.MetricaId == 18:
            cvssEnvMUI = s.ValorMetricaId.ValorNumerico
            cvssEnvMUIString = s.ValorMetricaId.ValorMetrica
        #-------------------
        #Modified Scope (MS)
        #-------------------
        if s.ValorMetricaId.MetricaId == 19:
            cvssEnvMS = s.ValorMetricaId.ValorNumerico
            cvssEnvMSString = s.ValorMetricaId.ValorMetrica
        #-------------------------------
        #Modified Confidentiality (MC)
        #-------------------------------
        if s.ValorMetricaId.MetricaId == 20:
            cvssEnvMC = s.ValorMetricaId.ValorNumerico
            cvssEnvMCString = s.ValorMetricaId.ValorMetrica
        #-----------------------
        #Modified Integrity (MI)
        #-----------------------
        if s.ValorMetricaId.MetricaId == 21:
            cvssEnvMI = s.ValorMetricaId.ValorNumerico
            cvssEnvMIString = s.ValorMetricaId.ValorMetrica
        #---------------------------
        #Modified Availability (MA)
        #---------------------------
        if s.ValorMetricaId.MetricaId == 22:
            cvssEnvMA = s.ValorMetricaId.ValorNumerico
            cvssEnvMAString = s.ValorMetricaId.ValorMetrica

    #---------------------
    #Calculo metrica BASE
    #---------------------
    ISS = 1-( (1-cvssBaseC) * (1-cvssBaseI) * (1-cvssBaseA) )
    Impact = ( ((7.52) * (ISS - 0.029)) - ( (3.25) * (math.pow((ISS - 0.02), 15))) )
    for i in cvss:
        if i.ValorMetricaId==13: #Unchanged (U)
            Impact = (6.42) * (ISS)
        elif i.ValorMetricaId==12:
            Impact = ( ((7.52) * (ISS - 0.029)) - ( (3.25) * (math.pow((ISS - 0.02), 15))) )
    Exploitability = (8.22) * (cvssBaseAV) * (cvssBaseAC) * (cvssBasePR) * (cvssBaseUI)
    BaseScore = roundup( min( 1.08*(Impact + Exploitability)  , 10) )
    if Impact <=0:
        BaseScore=0
    for i in cvss:
        if i.ValorMetricaId==13: #Unchanged (U)
            BaseScore = roundup( min( Impact + Exploitability  , 10) )
        elif i.ValorMetricaId==12:
            BaseScore = roundup( min( (1.08) * (Impact + Exploitability)  , 10) )
    #-----------------------------------------------------
    #Calculo metrica TEMPORAL (En proceso de desarrollo)
    #-----------------------------------------------------
    if BaseScore<=0:
        TempScore = 0
    else:
        TempScore = roundup(BaseScore * D(cvssTempE) * D(cvssTempRL) * D(cvssTempRC) )
    #----------------------------------------------------
    #Calculo metrica AMBIENTAL (En proceso de desarrollo)
    #----------------------------------------------------
    ISCM = min(1-((1-cvssEnvCR * cvssEnvMC) * (1-cvssEnvIR * cvssEnvMI) * (1-cvssEnvAR * cvssEnvMA)), 0.915 ) 
    ImpactM = 0
    if changedE==1:
        ImpactM = ( (7.52) * (ISCM - 0.029) -  3.25 * (math.pow( ISCM * 0.9731 - 0.02, 13)) )
    elif changedE==0:
        ImpactM = (6.42) * (ISCM)

    ExploitabilityM = (8.22) * (cvssEnvMAV) * (cvssEnvMAC) * (cvssEnvMPR) * (cvssEnvMUI)
    BaseScoreM = roundup(roundup( min( 1.08*(ImpactM + ExploitabilityM)  , 10) ) * D(cvssTempE) * D(cvssTempRL) * D(cvssTempRC))
    if ImpactM <= 0:
        BaseScoreM = 0
    for i in cvss:
        if i.ValorMetricaId==66: #Unchanged (U)
            BaseScoreM = roundup(roundup( min( ImpactM + ExploitabilityM  , 10) ) * D(cvssTempE) * D(cvssTempRL) * D(cvssTempRC))
        elif i.ValorMetricaId==65:
            BaseScoreM = roundup(roundup( min( 1.08*(ImpactM + ExploitabilityM)  , 10) ) * D(cvssTempE) * D(cvssTempRL) * D(cvssTempRC))
    #-----------------------
    #Definicion de vectores
    #-----------------------
    VectorString = "CVSS:3.1/AV:"+str(cvssBaseAVString)+"/AC:"+str(cvssBaseACString)+"/PR:"+str(cvssBasePRString)+"/UI:"+str(cvssBaseUIString)+"/S:"+str(cvssBaseSString)+"/C:"+str(cvssBaseCString)+"/I:"+str(cvssBaseIString)+"/A:"+str(cvssBaseAString)
    VectorStringE = "CVSS:3.1/AV:"+str(cvssBaseAVString)+"/AC:"+str(cvssBaseACString)+"/PR:"+str(cvssBasePRString)+"/UI:"+str(cvssBaseUIString)+"/S:"+str(cvssBaseSString)+"/C:"+str(cvssBaseCString)+"/I:"+str(cvssBaseIString)+"/A:"+str(cvssBaseAString)+"/E:"+str(cvssTempEString)+"/RL:"+str(cvssTempRLString)+"/RC:"+str(cvssTempRCString)+"/CR:"+str(cvssEnvCRString)+"/IR:"+str(cvssEnvIRString)+"/AR:"+str(cvssEnvARString)+"/MAV:"+str(cvssEnvMAVString)+"/MAC:"+str(cvssEnvMACString)+"/MPR:"+str(cvssEnvMPRString)+"/MUI:"+str(cvssEnvMUIString)+"/MS:"+str(cvssEnvMSString)+"/MC:"+str(cvssEnvMCString)+"/MI:"+str(cvssEnvMIString)+"/MA:"+str(cvssEnvMAString)

    #--------------------------------------------
    #Condicion para solo considerar metricas base
    #--------------------------------------------
    if request.vars.metrica =='base':
        db.TratamientoRiesgo.update_or_insert(db.TratamientoRiesgo.id == request.args(0), CuantificacionCVSS = BaseScore, VectorCVSS = VectorString)
        if request.args(3):
            redirect(URL('default', 'TratamientoRiesgo', vars=dict(keywords = parametros)))
        else:
            redirect(URL('default', 'TratamientoRiesgo'))
    #--------------------------------------------------
    #Condicion para solo considerar metricas temporales
    #--------------------------------------------------
    elif request.vars.metrica == 'temp':
        db.TratamientoRiesgo.update_or_insert(db.TratamientoRiesgo.id == request.args(0) , CuantificacionCVSS = BaseScore, VectorCVSS = VectorString, CuantificacionCVSSE = BaseScoreM, VectorCVSSE = VectorStringE)
        if request.args(3):
            redirect(URL('default', 'EvaluacionControl', vars=dict(keywords = parametros)))
        else:
            redirect(URL('default', 'EvaluacionControl'))
    else:
        pass

def roundup(num):
    return D(math.ceil(num * 10) / 10).quantize(D("0.1"))
'''

#--------------------------------
@auth.requires_login()
@auth.requires(auth.has_membership(role='riskManager') or auth.has_membership(role='auditManager') or auth.has_membership(role='riskAnalyst') or auth.has_membership(role='auditAnalyst') or auth.has_membership(role='processOwner') or auth.has_membership(role='controlResp') or auth.has_membership(role='admin') or auth.has_membership(role='guest'))
def BenchVersion():
    #db.BenchVersion.id.readable=False
    db.BenchVersion.AprobacionJefeRiesgo.writable=False
    db.BenchVersion.AprobacionAnalistaRiesgo.writable=False
    db.BenchVersion.LogJefeRiesgo.writable=False
    db.BenchVersion.LogAnalistaRiesgo.writable=False
    Tabla = 'BenchVersion'
    
    fields = (db.BenchVersion.id, db.BenchVersion.Version, db.BenchVersion.Descripcion, db.BenchVersion.AprobacionJefeRiesgo)

    if request.vars.get('keywords'):
        links = [ lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1",  base64.b64encode(request.vars.get('keywords'))])), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0",  base64.b64encode(request.vars.get('keywords'))])), lambda row: A(T('View Details'),_class='button btn btn-warning',_href=URL("default","Benchmark", args=[row.id]))]
    else:
        links = [ lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"])), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"])), lambda row: A(T('View Details'),_class='button btn btn-warning',_href=URL("default","Benchmark", args=[row.id]))]

    if auth.has_membership(role='admin') or auth.has_membership(role='riskManager'):
        ActualizaAprobacion(Tabla)
        #links = [lambda row: A(T('View Details'),_class='button btn btn-success',_href=URL("default","Benchmark", args=[row.id]))]
        form=SQLFORM.grid(db.BenchVersion, fields=fields, links=links, searchable=True, deletable=True, create=True, editable=True, user_signature=True, paginate=10, maxtextlength=500)
    else:
        ActualizaAprobacion(Tabla)
        form=SQLFORM.grid(db.BenchVersion, fields=fields, searchable=True, deletable=False, create=False, editable=False, user_signature=True, paginate=10, maxtextlength=500)
    return dict(form=form)

@auth.requires_login()
@auth.requires(auth.has_membership(role='riskManager') or auth.has_membership(role='auditManager') or auth.has_membership(role='riskAnalyst') or auth.has_membership(role='auditAnalyst') or auth.has_membership(role='processOwner') or auth.has_membership(role='controlResp') or auth.has_membership(role='admin') or auth.has_membership(role='guest'))
def BenchObjetivoControl():
    db.BenchObjetivoControl.AprobacionJefeRiesgo.writable=False
    db.BenchObjetivoControl.AprobacionAnalistaRiesgo.writable=False
    db.BenchObjetivoControl.LogJefeRiesgo.writable=False
    db.BenchObjetivoControl.LogAnalistaRiesgo.writable=False
    db.BenchObjetivoControl.id.readable=False
    Tabla = 'BenchObjetivoControl'
    
    fields = (db.BenchObjetivoControl.id, db.BenchObjetivoControl.BenchVersionId, db.BenchObjetivoControl.Numero, db.BenchObjetivoControl.Nombre, db.BenchObjetivoControl.Descripcion, db.BenchObjetivoControl.AprobacionJefeRiesgo)

    if request.vars.get('keywords'):
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1", base64.b64encode(request.vars.get('keywords'))])), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0", base64.b64encode(request.vars.get('keywords'))] ))]
    else:
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"])), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]

    if auth.has_membership(role='admin') or auth.has_membership(role='riskManager'):
        ActualizaAprobacion(Tabla)
        form=SQLFORM.grid(db.BenchObjetivoControl, fields=fields, links=links, searchable=True, deletable=True, create=True, editable=True, user_signature=True, paginate=10, maxtextlength=500)
    else:
        ActualizaAprobacion(Tabla)
        form=SQLFORM.grid(db.BenchObjetivoControl, fields=fields, searchable=True, deletable=False, create=False, editable=False, user_signature=True, paginate=10, maxtextlength=500)
    return dict(form=form)

@auth.requires_login()
@auth.requires(auth.has_membership(role='riskManager') or auth.has_membership(role='auditManager') or auth.has_membership(role='riskAnalyst') or auth.has_membership(role='auditAnalyst') or auth.has_membership(role='processOwner') or auth.has_membership(role='controlResp') or auth.has_membership(role='admin') or auth.has_membership(role='guest'))
def BenchControl():
    db.BenchControl.AprobacionJefeRiesgo.writable=False
    db.BenchControl.AprobacionAnalistaRiesgo.writable=False
    db.BenchControl.LogJefeRiesgo.writable=False
    db.BenchControl.LogAnalistaRiesgo.writable=False
    db.BenchControl.id.readable = False
    Tabla = 'BenchControl'
    
    fields = (db.BenchControl.id, db.BenchControl.BenchObjetivoControlId, db.BenchControl.Numero, db.BenchControl.Nombre, db.BenchControl.Descripcion, db.BenchControl.AprobacionJefeRiesgo)

    if request.vars.get('keywords'):
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1", base64.b64encode(request.vars.get('keywords'))] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0", base64.b64encode(request.vars.get('keywords'))]))]
    else:
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]

    if auth.has_membership(role='admin') or auth.has_membership(role='riskManager'):
        ActualizaAprobacion(Tabla)
        form=SQLFORM.grid(db.BenchControl, fields=fields, links=links, searchable=True, deletable=True, create=True, editable=True, user_signature=True, paginate=10, maxtextlength=500)
    else:
        ActualizaAprobacion(Tabla)
        form=SQLFORM.grid(db.BenchControl, fields=fields, searchable=True, deletable=False, create=False, editable=False, user_signature=True, paginate=10, maxtextlength=500)
    return dict(form=form)

@auth.requires_login()
@auth.requires(auth.has_membership(role='riskManager') or auth.has_membership(role='auditManager') or auth.has_membership(role='riskAnalyst') or auth.has_membership(role='auditAnalyst') or auth.has_membership(role='processOwner') or auth.has_membership(role='controlResp') or auth.has_membership(role='admin') or auth.has_membership(role='guest'))
def PruebaSeguridad():
    db.TestSeguridad.AprobacionJefeRiesgo.writable=False
    db.TestSeguridad.AprobacionAnalistaRiesgo.writable=False
    db.TestSeguridad.LogJefeRiesgo.writable=False
    db.TestSeguridad.LogAnalistaRiesgo.writable=False
    Tabla = 'TestSeguridad'
    fields = (db.TestSeguridad.id, db.TestSeguridad.ActivoTiId, db.TestSeguridad.ProcesoId, db.TestSeguridad.BenchControlId, db.TestSeguridad.NivelMadurezId, db.TestSeguridad.Comentarios, db.TestSeguridad.AprobacionJefeRiesgo)

    if request.vars.get('keywords'):
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1", base64.b64encode(request.vars.get('keywords'))] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0", base64.b64encode(request.vars.get('keywords'))])),  lambda row: A(T('File'),_class='button btn btn-info',_href=URL("default","EvidenciaTestSeguridad", vars=dict(TestSeguridadId=row.id)))  ]
    else:
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"])), lambda row: A(T('File'),_class='button btn btn-info',_href=URL("default","EvidenciaTestSeguridad", vars=dict(TestSeguridadId=row.id)))  ]

    if auth.has_membership(role='admin') or auth.has_membership(role='riskManager'):
        ActualizaAprobacion(Tabla)
        form=SQLFORM.grid(db.TestSeguridad, fields=fields, links=links, searchable=True, deletable=True, create=True, editable=True, user_signature=True, paginate=10, maxtextlength=500)
    elif auth.has_membership(role='controlResp'):
        ActualizaAprobacion(Tabla)
        db.TestSeguridad.BenchControlId.writable = False
        db.TestSeguridad.ActivoTiId.writable = False
        db.TestSeguridad.ProcesoId.writable = False
        db.TestSeguridad.Comentarios.writable = False
        db.TestSeguridad.Evidencia.writable = False
        db.TestSeguridad.Fecha.writable = False
        db.TestSeguridad.Cumplimiento.writable = False
        form=SQLFORM.grid(db.TestSeguridad, fields=fields, links=links, searchable=True, deletable=False, create=False, editable=True, user_signature=True, paginate=10, maxtextlength=500)
    else:
        #ActualizaAprobacion(Tabla)
        form=SQLFORM.grid(db.TestSeguridad, fields=fields, searchable=True, deletable=False, create=False, editable=False, user_signature=True, paginate=10, maxtextlength=500)
    return dict(form=form)

@auth.requires_login()
@auth.requires(auth.has_membership(role='riskManager') or auth.has_membership(role='auditManager') or auth.has_membership(role='riskAnalyst') or auth.has_membership(role='auditAnalyst') or auth.has_membership(role='processOwner') or auth.has_membership(role='controlResp') or auth.has_membership(role='admin') or auth.has_membership(role='guest'))
def EvidenciaTestSeguridad():
    if auth.has_membership(role='admin') or auth.has_membership(role='riskManager'):
        query = db.EvidenciaTestSeguridad.TestSeguridadId==request.vars.TestSeguridadId
        form = SQLFORM.grid(query=query, searchable=True, deletable=True, create=True, editable=True, paginate=10, maxtextlength=500, user_signature=True)
    elif auth.has_membership(role='controlResp'):
        query = db.EvidenciaTestSeguridad.TestSeguridadId==request.vars.TestSeguridadId
        form = SQLFORM.grid(query=query, searchable=True, deletable=False, create=False, editable=False, paginate=10, maxtextlength=500, user_signature=True)
    else:
        redirect(URL('default','PruebaSeguridad'))
    return dict(form=form)

@auth.requires_login()
@auth.requires(auth.has_membership(role='riskManager') or auth.has_membership(role='auditManager') or auth.has_membership(role='riskAnalyst') or auth.has_membership(role='auditAnalyst') or auth.has_membership(role='processOwner') or auth.has_membership(role='controlResp') or auth.has_membership(role='admin') or auth.has_membership(role='guest'))
def PruebaWeb():
    db.PruebaWeb.id.readable=False
    db.PruebaWeb.AprobacionJefeRiesgo.writable=False
    db.PruebaWeb.AprobacionAnalistaRiesgo.writable=False
    db.PruebaWeb.LogJefeRiesgo.writable=False
    db.PruebaWeb.LogAnalistaRiesgo.writable=False
    Tabla = 'PruebaWeb'
    fields = (db.PruebaWeb.ActivoTiId, db.PruebaWeb.Hallazgo, db.PruebaWeb.PlanAccion, db.PruebaWeb.AprobacionJefeRiesgo)

    if request.vars.get('keywords'):
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1", base64.b64encode(request.vars.get('keywords'))] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0", base64.b64encode(request.vars.get('keywords'))])), lambda row: A(T('File'),_class='button btn btn-info',_href=URL("default","EvidenciaPruebaWeb", vars=dict(PruebaWebId=row.id))) ]
    else:
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"])), lambda row: A(T('File'),_class='button btn btn-info',_href=URL("default","EvidenciaPruebaWeb", vars=dict(PruebaWebId=row.id))) ] 

    if auth.has_membership(role='admin') or auth.has_membership(role='riskManager'):
        ActualizaAprobacion(Tabla)
        form=SQLFORM.grid(db.PruebaWeb, fields=fields, links=links, searchable=True, deletable=True, create=True, editable=True, user_signature=True, paginate=10, maxtextlength=500)
    elif auth.has_membership(role='controlResp'):
        ActualizaAprobacion(Tabla)
        db.PruebaWeb.ActivoTiId.writable = False
        db.PruebaWeb.Hallazgo.writable = False
        db.PruebaWeb.Evidencia.writable = False
        db.PruebaWeb.Fecha.writable = False
        form=SQLFORM.grid(db.PruebaWeb, fields=fields, links=links, searchable=True, deletable=False, create=False, editable=True, user_signature=True, paginate=10, maxtextlength=500)
    else:
        form=SQLFORM.grid(db.PruebaWeb, fields=fields, searchable=True, deletable=False, create=False, editable=False, user_signature=True, paginate=10, maxtextlength=500)
    return dict(form=form)

@auth.requires_login()
@auth.requires(auth.has_membership(role='riskManager') or auth.has_membership(role='auditManager') or auth.has_membership(role='riskAnalyst') or auth.has_membership(role='auditAnalyst') or auth.has_membership(role='processOwner') or auth.has_membership(role='controlResp') or auth.has_membership(role='admin') or auth.has_membership(role='guest'))
def EvaluacionEvidencia():
    if request.vars.EvaluacionControlId:
        query = db.EvaluacionEvidencia.EvaluacionControlId==request.vars.EvaluacionControlId
    else:
        query = db.EvaluacionEvidencia.id>0

    if auth.has_membership(role='admin') or auth.has_membership(role='riskManager'):
        #query = db.EvaluacionEvidencia.EvaluacionControlId==request.vars.EvaluacionControlId
        form = SQLFORM.grid(query=query, searchable=True, deletable=True, create=True, editable=True, paginate=10, maxtextlength=500, user_signature=True)
    elif auth.has_membership(role='controlResp'):
        #query = db.EvidenciaPruebaWeb.PruebaWebId==request.vars.PruebaWebId
        #query = db.EvaluacionEvidencia.EvaluacionControlId==request.vars.EvaluacionControlId
        form = SQLFORM.grid(query=query, searchable=True, deletable=False, create=False, editable=False, paginate=10, maxtextlength=500, user_signature=True)
    else:
        redirect(URL('default','EvaluacionControl'))
    return dict(form=form)

@auth.requires_login()
@auth.requires(auth.has_membership(role='riskManager') or auth.has_membership(role='auditManager') or auth.has_membership(role='riskAnalyst') or auth.has_membership(role='auditAnalyst') or auth.has_membership(role='processOwner') or auth.has_membership(role='controlResp') or auth.has_membership(role='admin') or auth.has_membership(role='guest'))
def ContenedorDocs():
    if request.vars.ActivoTiId:
        query = db.ContenedorDocs.ActivoTiId==request.vars.ActivoTiId
    else:
        query = db.ContenedorDocs.id>0

    if auth.has_membership(role='admin') or auth.has_membership(role='riskManager'):
        form = SQLFORM.grid(query=query, searchable=True, deletable=True, create=True, editable=True, paginate=10, maxtextlength=500, user_signature=True)
    elif auth.has_membership(role='controlResp'):
        form = SQLFORM.grid(query=query, searchable=True, deletable=False, create=False, editable=False, paginate=10, maxtextlength=500, user_signature=True)
    else:
        redirect(URL('default','ActivoTi'))
    return dict(form=form)

@auth.requires_login()
@auth.requires(auth.has_membership(role='riskManager') or auth.has_membership(role='auditManager') or auth.has_membership(role='riskAnalyst') or auth.has_membership(role='auditAnalyst') or auth.has_membership(role='processOwner') or auth.has_membership(role='controlResp') or auth.has_membership(role='admin') or auth.has_membership(role='guest'))
def FactorEvidencia():
    if auth.has_membership(role='admin') or auth.has_membership(role='riskManager'):
        query = db.FactorEvidencia.TratamientoRiesgoId==request.vars.TratamientoRiesgoId
        form = SQLFORM.grid(query=query, searchable=True, deletable=True, create=True, editable=True, paginate=10, maxtextlength=500, user_signature=True)
    elif auth.has_membership(role='controlResp'):
        query = db.FactorEvidencia.TratamientoRiesgoId==request.vars.TratamientoRiesgoId
        form = SQLFORM.grid(query=query, searchable=True, deletable=False, create=False, editable=False, paginate=10, maxtextlength=500, user_signature=True)
    else:
        redirect(URL('default','TratamientoRiesgo'))
    return dict(form=form)

@auth.requires_login()
@auth.requires(auth.has_membership(role='riskManager') or auth.has_membership(role='auditManager') or auth.has_membership(role='riskAnalyst') or auth.has_membership(role='auditAnalyst') or auth.has_membership(role='processOwner') or auth.has_membership(role='controlResp') or auth.has_membership(role='admin') or auth.has_membership(role='guest'))
def Benchmark():
    BenchObjetivoControl = db( (db.BenchObjetivoControl.BenchVersionId==request.args(0)) & (db.BenchObjetivoControl.AprobacionJefeRiesgo=='T') ).select(db.BenchObjetivoControl.ALL)
    BenchEvaluacion = db( (db.BenchEvaluacion.BenchControlId==db.BenchControl.id) & (db.BenchEvaluacion.AprobacionJefeRiesgo=='T') & (db.BenchEvaluacion.StatusControl=='T') & (db.BenchEvaluacion.NivelMadurezId==db.NivelMadurez.id) & (db.BenchControl.BenchObjetivoControlId==db.BenchObjetivoControl.id) & (db.BenchControl.AprobacionJefeRiesgo=='T') & (db.BenchObjetivoControl.BenchVersionId==db.BenchVersion.id) & (db.BenchObjetivoControl.AprobacionJefeRiesgo=='T') & (db.BenchVersion.id==request.args(0)) & (db.BenchVersion.AprobacionJefeRiesgo=='T') ).select(db.BenchEvaluacion.ALL)
    
    NivelMadurez = db().select(db.NivelMadurez.ALL, orderby=db.NivelMadurez.Valor)
    BenchVersion = db(db.BenchVersion.id==request.args(0)).select(db.BenchVersion.Version).first().Version

    BenchNivelMadurez = []
    #lista = []
    #for i in BenchEvaluacion:
    for i in BenchObjetivoControl:
        lista = []
        lista.append(i.id)
        lista.append(0)
        lista.append(0)
        lista.append(0)
        lista.append(i.Nombre)
        #lista.append('')
        BenchNivelMadurez.append(lista)
    for i in BenchNivelMadurez:
        for a in BenchEvaluacion:
            if i[0]==a.BenchControlId.BenchObjetivoControlId:
                i[1]=i[1]+int(a.NivelMadurezId.Valor)
                i[2]=i[2]+1
    for i in BenchNivelMadurez:
        try:
            i[3]=int(i[1]) / int(i[2])
        except:
            i[3]=0

    return dict(BenchObjetivoControl=BenchObjetivoControl, BenchEvaluacion=BenchEvaluacion, NivelMadurez=NivelMadurez, BenchVersion=BenchVersion, BenchNivelMadurez=BenchNivelMadurez)
# links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "

'''
#----------------
#Otras funciones
#----------------
@auth.requires_login()
@auth.requires(auth.has_membership(role='riskManager') or auth.has_membership(role='riskAnalyst') or auth.has_membership(role='admin') )
def AsignarCriterio():
    ValorImpacto = db( (db.TratamientoRiesgoAreaImpacto.TratamientoRiesgoId==request.args(0)) & (db.TratamientoRiesgoAreaImpacto.AreaImpactoCriterioImpactoId==db.AreaImpactoCriterioImpacto.id) & (db.TratamientoRiesgoAreaImpacto.AprobacionJefeRiesgo=='T') ).select(db.AreaImpactoCriterioImpacto.CriterioImpactoId)
    ValorProbabilidad = db( (db.TratamientoRiesgoAreaProbabilidad.TratamientoRiesgoId==request.args(0)) & (db.TratamientoRiesgoAreaProbabilidad.AreaProbabilidadCriterioProbabilidadId==db.AreaProbabilidadCriterioProbabilidad.id) &  (db.TratamientoRiesgoAreaProbabilidad.AprobacionJefeRiesgo=='T') ).select(db.AreaProbabilidadCriterioProbabilidad.CriterioProbabilidadId)

    suma = 0
    contador = 0
    for i in ValorImpacto:
        suma = suma + i.CriterioImpactoId
        contador = contador + 1
    try:
        Valor = float(suma) / float(contador)
    except:
        Valor = 0
    db(db.TratamientoRiesgo.id==request.args(0)).update(CalculoImpacto=Valor)

    suma = 0
    contador = 0
    for i in ValorProbabilidad:
        suma = suma + i.CriterioProbabilidadId
        contador = contador + 1
    try:
        Valor = float(suma) / float(contador)
    except:
        Valor = 0
    db(db.TratamientoRiesgo.id==request.args(0)).update(CalculoProbabilidad=Valor)

    redirect(URL('default', 'TratamientoRiesgo'))
    #redirect(URL('default', 'TratamientoRiesgo', vars=dict(Valor=Valor, idTratamientoRiesgo=request.args(0))))
    #return dict(ValorImpacto=float(Valor))
'''
'''
@auth.requires_login()
@auth.requires(auth.has_membership(role='riskManager') or auth.has_membership(role='auditManager') or auth.has_membership(role='riskAnalyst') or auth.has_membership(role='auditAnalyst') or auth.has_membership(role='iformationOwner') or auth.has_membership(role='admin') or auth.has_membership(role='guest') or auth.has_membership(role='controlResp'))
def CopiarRegistro():
    if request.args(1) == "TratamientoRiesgo":
        registro = db(db.TratamientoRiesgo.id==request.args(0)).select(db.TratamientoRiesgo.ALL)
        for i in registro:
            #db.TratamientoRiesgo.insert(AnalisisRiesgoId=i.AnalisisRiesgoId, FechaRevision=i.FechaRevision, ProcesoRegionId=i.ProcesoRegionId, ActivoTiId=i.ActivoTiId, ActivoTiRegionId=i.ActivoTiRegionId, ActivoInformacionId=i.ActivoInformacionId, FactorRiesgo=i.FactorRiesgo, RiesgoFraude=i.RiesgoFraude, EscenarioAmenaza=i.EscenarioAmenaza, TipoVulnerabilidadId=i.TipoVulnerabilidadId, CriterioImpactoId=i.CriterioImpactoId, CriterioProbabilidadId=i.CriterioProbabilidadId, TipoTratamientoRiesgoId=i.TipoTratamientoRiesgoId, EvidenciaRiesgo=i.EvidenciaRiesgo, RiesgoMaterializadoCheck=i.RiesgoMaterializadoCheck, CatalogoControlId=i.CatalogoControlId, TipoControlId=i.TipoControlId, ClasificacionControlId=i.ClasificacionControlId, NivelMadurezId=i.NivelMadurezId, KeyControl=i.KeyControl, ObjetivoControl=i.ObjetivoControl, ActividadControl=i.ActividadControl, DetallePoliticaId=i.DetallePoliticaId, ResponsableControl=i.ResponsableControl, ComentariosResponsableControl=i.ComentariosResponsableControl, EvidenciaControl=i.EvidenciaControl, FechaImplementacionControl=i.FechaImplementacionControl, AnalistaRiesgo=i.AnalistaRiesgo)
            db.TratamientoRiesgo.insert(FechaRevision=i.FechaRevision, ProcesoRegionId=i.ProcesoRegionId, ActivoTiRegionId=i.ActivoTiRegionId, ActivoInformacionId=i.ActivoInformacionId, FactorRiesgo=i.FactorRiesgo, RiesgoFraude=i.RiesgoFraude, EscenarioAmenaza=i.EscenarioAmenaza, TipoVulnerabilidadId=i.TipoVulnerabilidadId, CriterioImpactoId=i.CriterioImpactoId, CriterioProbabilidadId=i.CriterioProbabilidadId, TipoTratamientoRiesgoId=i.TipoTratamientoRiesgoId, EvidenciaRiesgo=i.EvidenciaRiesgo, RiesgoMaterializadoCheck=i.RiesgoMaterializadoCheck, CatalogoControlId=i.CatalogoControlId, TipoControlId=i.TipoControlId, ClasificacionControlId=i.ClasificacionControlId, NivelMadurezId=i.NivelMadurezId, KeyControl=i.KeyControl, ObjetivoControl=i.ObjetivoControl, ActividadControl=i.ActividadControl, DetallePoliticaId=i.DetallePoliticaId, ResponsableControl=i.ResponsableControl, ComentariosResponsableControl=i.ComentariosResponsableControl, EvidenciaControl=i.EvidenciaControl, FechaImplementacionControl=i.FechaImplementacionControl, AnalistaRiesgo=i.AnalistaRiesgo)
        redirect(URL('TratamientoRiesgo'))
    if request.args(1) == "AnalisisRiesgo":
        registro = db(db.AnalisisRiesgo.id==request.args(0)).select(db.AnalisisRiesgo.ALL)
        for i in registro:
            db.AnalisisRiesgo.insert(Riesgo=i.Riesgo, TipoTratamientoRiesgoId=i.TipoTratamientoRiesgoId, ClasificacionRiesgoId=i.ClasificacionRiesgoId, ObjetivoOrganizacionId=i.ObjetivoOrganizacionId, FechaRevision=i.FechaRevision, EvidenciaRiesgo=i.EvidenciaRiesgo, RiesgoMaterializado=i.RiesgoMaterializado, CriterioImpactoId=i.CriterioImpactoId, CriterioProbabilidadId=i.CriterioProbabilidadId, DuenoRiesgo=i.DuenoRiesgo, AnalistaRiesgo=i.AnalistaRiesgo)
        redirect(URL('AnalisisRiesgo'))
    if request.args(1) == "CatalogoPolitica":
        registro = db(db.CatalogoPolitica.id==request.args(0)).select(db.CatalogoPolitica.ALL)
        for i in registro:
            db.CatalogoPolitica.insert(Nombre=i.Nombre, Descripcion=i.Descripcion, Version=i.Version, Fecha=i.Fecha, Archivo=i.Archivo)
        redirect(URL('CatalogoPolitica'))
    if request.args(1) == "DetallePolitica":
        registro = db(db.DetallePolitica.id==request.args(0)).select(db.DetallePolitica.ALL)
        for i in registro:
            #db.DetallePolitica.insert(RegionPoliticaId=i.RegionPoliticaId, Codigo=i.Codigo, Nombre=i.Nombre, Comentarios=i.Comentarios, Archivo=i.Archivo)
            db.DetallePolitica.insert(RegionPoliticaId=i.RegionPoliticaId, Nombre=i.Nombre, Comentarios=i.Comentarios, Archivo=i.Archivo)
        redirect(URL('DetallePolitica'))
    if request.args(1) == "Proceso":
        registro = db(db.Proceso.id==request.args(0)).select(db.Proceso.ALL)
        for i in registro:
            db.Proceso.insert(Nombre=i.Nombre, Descripcion=i.Descripcion, Objetivo=i.Objetivo, Diagrama=i.Diagrama, Dueno=i.Dueno, TipoProcesoId=i.TipoProcesoId, CicloNegocioId=i.CicloNegocioId)
        redirect(URL('Proceso'))
    if request.args(1) == "EvaluacionControl":
        registro = db(db.EvaluacionControl.id==request.args(0)).select(db.EvaluacionControl.ALL)
        for i in registro:
            db.EvaluacionControl.insert(TratamientoRiesgoId=i.TratamientoRiesgoId, CumplimientoControl=i.CumplimientoControl, EfectividadControl=i.EfectividadControl, NivelMadurezId=i.NivelMadurezId, FechaRevision=i.FechaRevision, TipoRevisionId=i.TipoRevisionId, AlcanceRevisionId=i.AlcanceRevisionId, EscenarioRiesgo=i.EscenarioRiesgo, Recomendacion=i.Recomendacion, EvidenciaCumplimiento=i.EvidenciaCumplimiento, ResponsableControl=i.ResponsableControl, ComentariosResponsableControl=i.ComentariosResponsableControl, EvidenciaControl=i.EvidenciaControl, FechaImplementacionControl=i.FechaImplementacionControl)
        redirect(URL('EvaluacionControl'))
'''

@auth.requires_login()
def RegistroLog():
    signature = auth.user.username + ',' + request.client + ',' + str(request.now) + ',' + str(response.session_id)
    #try:
    if request.args(3):
        parametros = base64.b64decode(request.args(3))
    #except:
    else:
        #parametros = request.vars
        pass

    if request.args(1) == 'TipoObjetivo':
        if (auth.has_membership(role='riskManager') or auth.has_membership(role='admin')):
            if request.args(2)=='1':
                db(db.TipoObjetivo.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.TipoObjetivo.id==request.args(0)).update(AprobacionJefeRiesgo='T')
            elif request.args(2)=='0':
                db(db.TipoObjetivo.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.TipoObjetivo.id==request.args(0)).update(AprobacionJefeRiesgo='F')
        elif (auth.has_membership(role='riskAnalyst')):
            if request.args(2)=='1':
                db(db.TipoObjetivo.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.TipoObjetivo.id==request.args(0)).update(AprobacionAnalistaRiesgo='T')
            elif request.args(2)=='0':
                db(db.TipoObjetivo.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.TipoObjetivo.id==request.args(0)).update(AprobacionAnalistaRiesgo='F')
        #redirect(URL('TipoObjetivo', vars=dict(keywords=parametros)))
        if request.args(3):
            redirect(URL('TipoObjetivo', vars=dict(keywords=parametros)))
        else:
            redirect(URL('TipoObjetivo'))
    '''
    if request.args(1) == 'AreaImpacto':
        if (auth.has_membership(role='riskManager') or auth.has_membership(role='admin')):
            if request.args(2)=='1':
                db(db.AreaImpacto.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.AreaImpacto.id==request.args(0)).update(AprobacionJefeRiesgo='T')
            elif request.args(2)=='0':
                db(db.AreaImpacto.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.AreaImpacto.id==request.args(0)).update(AprobacionJefeRiesgo='F')
        elif (auth.has_membership(role='riskAnalyst')):
            if request.args(2)=='1':
                db(db.AreaImpacto.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.AreaImpacto.id==request.args(0)).update(AprobacionAnalistaRiesgo='T')
            elif request.args(2)=='0':
                db(db.AreaImpacto.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.AreaImpacto.id==request.args(0)).update(AprobacionAnalistaRiesgo='F')
        #redirect(URL('AreaImpacto', vars=dict(keywords=parametros)))
        if request.args(3):
            redirect(URL('AreaImpacto', vars=dict(keywords=parametros)))
        else:
            redirect(URL('AreaImpacto'))

    if request.args(1) == 'AreaProbabilidad':
        if (auth.has_membership(role='riskManager') or auth.has_membership(role='admin')):
            if request.args(2)=='1':
                db(db.AreaProbabilidad.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.AreaProbabilidad.id==request.args(0)).update(AprobacionJefeRiesgo='T')
            elif request.args(2)=='0':
                db(db.AreaProbabilidad.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.AreaProbabilidad.id==request.args(0)).update(AprobacionJefeRiesgo='F')
        elif (auth.has_membership(role='riskAnalyst')):
            if request.args(2)=='1':
                db(db.AreaProbabilidad.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.AreaProbabilidad.id==request.args(0)).update(AprobacionAnalistaRiesgo='T')
            elif request.args(2)=='0':
                db(db.AreaProbabilidad.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.AreaProbabilidad.id==request.args(0)).update(AprobacionAnalistaRiesgo='F')
        #redirect(URL('AreaProbabilidad', vars=dict(keywords=parametros)))
        if request.args(3):
            redirect(URL('AreaProbabilidad', vars=dict(keywords=parametros)))
        else:
            redirect(URL('AreaProbabilidad'))

    if request.args(1) == 'AreaImpactoCriterioImpacto':
        if (auth.has_membership(role='riskManager') or auth.has_membership(role='admin')):
            if request.args(2)=='1':
                db(db.AreaImpactoCriterioImpacto.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.AreaImpactoCriterioImpacto.id==request.args(0)).update(AprobacionJefeRiesgo='T')
            elif request.args(2)=='0':
                db(db.AreaImpactoCriterioImpacto.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.AreaImpactoCriterioImpacto.id==request.args(0)).update(AprobacionJefeRiesgo='F')
        elif (auth.has_membership(role='riskAnalyst')):
            if request.args(2)=='1':
                db(db.AreaImpactoCriterioImpacto.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.AreaImpactoCriterioImpacto.id==request.args(0)).update(AprobacionAnalistaRiesgo='T')
            elif request.args(2)=='0':
                db(db.AreaImpactoCriterioImpacto.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.AreaImpactoCriterioImpacto.id==request.args(0)).update(AprobacionAnalistaRiesgo='F')
        #redirect(URL('AreaImpactoCriterioImpacto', vars=dict(keywords=parametros)))
        if request.args(3):
            redirect(URL('AreaImpactoCriterioImpacto', vars=dict(keywords=parametros)))
        else:
            redirect(URL('AreaImpactoCriterioImpacto'))

    if request.args(1) == 'AreaProbabilidadCriterioProbabilidad':
        if (auth.has_membership(role='riskManager') or auth.has_membership(role='admin')):
            if request.args(2)=='1':
                db(db.AreaProbabilidadCriterioProbabilidad.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.AreaProbabilidadCriterioProbabilidad.id==request.args(0)).update(AprobacionJefeRiesgo='T')
            elif request.args(2)=='0':
                db(db.AreaProbabilidadCriterioProbabilidad.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.AreaProbabilidadCriterioProbabilidad.id==request.args(0)).update(AprobacionJefeRiesgo='F')
        elif (auth.has_membership(role='riskAnalyst')):
            if request.args(2)=='1':
                db(db.AreaProbabilidadCriterioProbabilidad.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.AreaProbabilidadCriterioProbabilidad.id==request.args(0)).update(AprobacionAnalistaRiesgo='T')
            elif request.args(2)=='0':
                db(db.AreaProbabilidadCriterioProbabilidad.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.AreaProbabilidadCriterioProbabilidad.id==request.args(0)).update(AprobacionAnalistaRiesgo='F')
        #redirect(URL('AreaProbabilidadCriterioProbabilidad', vars=dict(keywords=parametros)))
        if request.args(3):
            redirect(URL('AreaProbabilidadCriterioProbabilidad', vars=dict(keywords=parametros)))
        else:
            redirect(URL('AreaProbabilidadCriterioProbabilidad'))
    '''
    if request.args(1) == 'TratamientoRiesgoAreaImpacto':
        if (auth.has_membership(role='riskManager') or auth.has_membership(role='admin')):
            if request.args(2)=='1':
                db(db.TratamientoRiesgoAreaImpacto.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.TratamientoRiesgoAreaImpacto.id==request.args(0)).update(AprobacionJefeRiesgo='T')
            elif request.args(2)=='0':
                db(db.TratamientoRiesgoAreaImpacto.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.TratamientoRiesgoAreaImpacto.id==request.args(0)).update(AprobacionJefeRiesgo='F')
        elif (auth.has_membership(role='riskAnalyst')):
            if request.args(2)=='1':
                db(db.TratamientoRiesgoAreaImpacto.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.TratamientoRiesgoAreaImpacto.id==request.args(0)).update(AprobacionAnalistaRiesgo='T')
            elif request.args(2)=='0':
                db(db.TratamientoRiesgoAreaImpacto.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.TratamientoRiesgoAreaImpacto.id==request.args(0)).update(AprobacionAnalistaRiesgo='F')
        #redirect(URL('TratamientoRiesgoAreaImpacto', vars=dict(keywords=parametros)))
        if request.args(3):
            redirect(URL('TratamientoRiesgoAreaImpacto', vars=dict(keywords=parametros)))
        else:
            redirect(URL('TratamientoRiesgoAreaImpacto'))

    if request.args(1) == 'TipoVulnerabilidadAnalisisRiesgo':
        if (auth.has_membership(role='riskManager') or auth.has_membership(role='admin')):
            if request.args(2)=='1':
                db(db.TipoVulnerabilidadAnalisisRiesgo.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.TipoVulnerabilidadAnalisisRiesgo.id==request.args(0)).update(AprobacionJefeRiesgo='T')
            elif request.args(2)=='0':
                db(db.TipoVulnerabilidadAnalisisRiesgo.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.TipoVulnerabilidadAnalisisRiesgo.id==request.args(0)).update(AprobacionJefeRiesgo='F')
        elif (auth.has_membership(role='riskAnalyst')):
            if request.args(2)=='1':
                db(db.TipoVulnerabilidadAnalisisRiesgo.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.TipoVulnerabilidadAnalisisRiesgo.id==request.args(0)).update(AprobacionAnalistaRiesgo='T')
            elif request.args(2)=='0':
                db(db.TipoVulnerabilidadAnalisisRiesgo.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.TipoVulnerabilidadAnalisisRiesgo.id==request.args(0)).update(AprobacionAnalistaRiesgo='F')
        #redirect(URL('TratamientoRiesgoAnalisisRiesgo', vars=dict(keywords=parametros)))
        if request.args(3):
            redirect(URL('TipoVulnerabilidadAnalisisRiesgo', vars=dict(keywords=parametros)))
        else:
            redirect(URL('TipoVulnerabilidadAnalisisRiesgo'))

    if request.args(1) == 'TratamientoRiesgoAreaProbabilidad':
        if (auth.has_membership(role='riskManager') or auth.has_membership(role='admin')):
            if request.args(2)=='1':
                db(db.TratamientoRiesgoAreaProbabilidad.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.TratamientoRiesgoAreaProbabilidad.id==request.args(0)).update(AprobacionJefeRiesgo='T')
            elif request.args(2)=='0':
                db(db.TratamientoRiesgoAreaProbabilidad.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.TratamientoRiesgoAreaProbabilidad.id==request.args(0)).update(AprobacionJefeRiesgo='F')
        elif (auth.has_membership(role='riskAnalyst')):
            if request.args(2)=='1':
                db(db.TratamientoRiesgoAreaProbabilidad.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.TratamientoRiesgoAreaProbabilidad.id==request.args(0)).update(AprobacionAnalistaRiesgo='T')
            elif request.args(2)=='0':
                db(db.TratamientoRiesgoAreaProbabilidad.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.TratamientoRiesgoAreaProbabilidad.id==request.args(0)).update(AprobacionAnalistaRiesgo='F')
        #redirect(URL('TratamientoRiesgoAreaProbabilidad', vars=dict(keywords=parametros)))
        if request.args(3):
            redirect(URL('TratamientoRiesgoAreaProbabilidad', vars=dict(keywords=parametros)))
        else:
            redirect(URL('TratamientoRiesgoAreaProbabilidad'))

    if request.args(1) == 'ClasificacionInformacion':
        if (auth.has_membership(role='riskManager') or auth.has_membership(role='admin')):
            if request.args(2)=='1':
                db(db.ClasificacionInformacion.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.ClasificacionInformacion.id==request.args(0)).update(AprobacionJefeRiesgo='T')
            elif request.args(2)=='0':
                db(db.ClasificacionInformacion.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.ClasificacionInformacion.id==request.args(0)).update(AprobacionJefeRiesgo='F')
        elif (auth.has_membership(role='riskAnalyst')):
            if request.args(2)=='1':
                db(db.ClasificacionInformacion.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.ClasificacionInformacion.id==request.args(0)).update(AprobacionAnalistaRiesgo='T')
            elif request.args(2)=='0':
                db(db.ClasificacionInformacion.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.ClasificacionInformacion.id==request.args(0)).update(AprobacionAnalistaRiesgo='F')
        #redirect(URL('ClasificacionInformacion', vars=dict(keywords=parametros)))
        if request.args(3):
            redirect(URL('ClasificacionInformacion', vars=dict(keywords=parametros)))
        else:
            redirect(URL('ClasificacionInformacion'))

    if request.args(1) == 'TipoDato':
        if (auth.has_membership(role='riskManager') or auth.has_membership(role='admin')):
            if request.args(2)=='1':
                db(db.TipoDato.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.TipoDato.id==request.args(0)).update(AprobacionJefeRiesgo='T')
            elif request.args(2)=='0':
                db(db.TipoDato.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.TipoDato.id==request.args(0)).update(AprobacionJefeRiesgo='F')
        elif (auth.has_membership(role='riskAnalyst')):
            if request.args(2)=='1':
                db(db.TipoDato.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.TipoDato.id==request.args(0)).update(AprobacionAnalistaRiesgo='T')
            elif request.args(2)=='0':
                db(db.TipoDato.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.TipoDato.id==request.args(0)).update(AprobacionAnalistaRiesgo='F')
        #redirect(URL('TipoDato', vars=dict(keywords=parametros)))
        if request.args(3):
            redirect(URL('TipoDato', vars=dict(keywords=parametros)))
        else:
            redirect(URL('TipoDato'))

    if request.args(1) == 'ClasificacionRiesgo':
        if (auth.has_membership(role='riskManager') or auth.has_membership(role='admin')):
            if request.args(2)=='1':
                db(db.ClasificacionRiesgo.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.ClasificacionRiesgo.id==request.args(0)).update(AprobacionJefeRiesgo='T')
            elif request.args(2)=='0':
                db(db.ClasificacionRiesgo.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.ClasificacionRiesgo.id==request.args(0)).update(AprobacionJefeRiesgo='F')
        elif (auth.has_membership(role='riskAnalyst')):
            if request.args(2)=='1':
                db(db.ClasificacionRiesgo.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.ClasificacionRiesgo.id==request.args(0)).update(AprobacionAnalistaRiesgo='T')
            elif request.args(2)=='0':
                db(db.ClasificacionRiesgo.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.ClasificacionRiesgo.id==request.args(0)).update(AprobacionAnalistaRiesgo='F')
        #redirect(URL('ClasificacionRiesgo', vars=dict(keywords=parametros)))
        if request.args(3):
            redirect(URL('ClasificacionRiesgo', vars=dict(keywords=parametros)))
        else:
            redirect(URL('ClasificacionRiesgo'))

    if request.args(1) == 'AnalisisRiesgoClasificacionRiesgo':
        if (auth.has_membership(role='riskManager') or auth.has_membership(role='admin')):
            if request.args(2)=='1':
                db(db.AnalisisRiesgoClasificacionRiesgo.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.AnalisisRiesgoClasificacionRiesgo.id==request.args(0)).update(AprobacionJefeRiesgo='T')
            elif request.args(2)=='0':
                db(db.AnalisisRiesgoClasificacionRiesgo.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.AnalisisRiesgoClasificacionRiesgo.id==request.args(0)).update(AprobacionJefeRiesgo='F')
        elif (auth.has_membership(role='riskAnalyst')):
            if request.args(2)=='1':
                db(db.AnalisisRiesgoClasificacionRiesgo.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.AnalisisRiesgoClasificacionRiesgo.id==request.args(0)).update(AprobacionAnalistaRiesgo='T')
            elif request.args(2)=='0':
                db(db.AnalisisRiesgoClasificacionRiesgo.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.AnalisisRiesgoClasificacionRiesgo.id==request.args(0)).update(AprobacionAnalistaRiesgo='F')
        #redirect(URL('AnalisisRiesgoClasificacionRiesgo', vars=dict(keywords=parametros)))
        if request.args(3):
            redirect(URL('AnalisisRiesgoClasificacionRiesgo', vars=dict(keywords=parametros)))
        else:
            redirect(URL('AnalisisRiesgoClasificacionRiesgo'))

    if request.args(1) == 'TratamientoRiesgoAnalisisRiesgo':
        if (auth.has_membership(role='riskManager') or auth.has_membership(role='admin')):
            if request.args(2)=='1':
                db(db.TratamientoRiesgoAnalisisRiesgo.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.TratamientoRiesgoAnalisisRiesgo.id==request.args(0)).update(AprobacionJefeRiesgo='T')
            elif request.args(2)=='0':
                db(db.TratamientoRiesgoAnalisisRiesgo.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.TratamientoRiesgoAnalisisRiesgo.id==request.args(0)).update(AprobacionJefeRiesgo='F')
        elif (auth.has_membership(role='riskAnalyst')):
            if request.args(2)=='1':
                db(db.TratamientoRiesgoAnalisisRiesgo.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.TratamientoRiesgoAnalisisRiesgo.id==request.args(0)).update(AprobacionAnalistaRiesgo='T')
            elif request.args(2)=='0':
                db(db.TratamientoRiesgoAnalisisRiesgo.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.TratamientoRiesgoAnalisisRiesgo.id==request.args(0)).update(AprobacionAnalistaRiesgo='F')
        if request.args(3):
            redirect(URL('TratamientoRiesgoAnalisisRiesgo', vars=dict(keywords=parametros)))
        else:
            redirect(URL('TratamientoRiesgoAnalisisRiesgo'))

    if request.args(1) == 'AnalisisRiesgoObjetivoOrganizacion':
        if (auth.has_membership(role='riskManager') or auth.has_membership(role='admin')):
            if request.args(2)=='1':
                db(db.AnalisisRiesgoObjetivoOrganizacion.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.AnalisisRiesgoObjetivoOrganizacion.id==request.args(0)).update(AprobacionJefeRiesgo='T')
            elif request.args(2)=='0':
                db(db.AnalisisRiesgoObjetivoOrganizacion.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.AnalisisRiesgoObjetivoOrganizacion.id==request.args(0)).update(AprobacionJefeRiesgo='F')
        elif (auth.has_membership(role='riskAnalyst')):
            if request.args(2)=='1':
                db(db.AnalisisRiesgoObjetivoOrganizacion.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.AnalisisRiesgoObjetivoOrganizacion.id==request.args(0)).update(AprobacionAnalistaRiesgo='T')
            elif request.args(2)=='0':
                db(db.AnalisisRiesgoObjetivoOrganizacion.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.AnalisisRiesgoObjetivoOrganizacion.id==request.args(0)).update(AprobacionAnalistaRiesgo='F')
        #redirect(URL('AnalisisRiesgoObjetivoOrganizacion', vars=dict(keywords=parametros)))
        if request.args(3):
            redirect(URL('AnalisisRiesgoObjetivoOrganizacion', vars=dict(keywords=parametros)))
        else:
            redirect(URL('AnalisisRiesgoObjetivoOrganizacion'))

    if request.args(1) == 'TipoControl':
        if (auth.has_membership(role='riskManager') or auth.has_membership(role='admin')):
            if request.args(2)=='1':
                db(db.TipoControl.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.TipoControl.id==request.args(0)).update(AprobacionJefeRiesgo='T')
            elif request.args(2)=='0':
                db(db.TipoControl.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.TipoControl.id==request.args(0)).update(AprobacionJefeRiesgo='F')
        elif (auth.has_membership(role='riskAnalyst')):
            if request.args(2)=='1':
                db(db.TipoControl.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.TipoControl.id==request.args(0)).update(AprobacionAnalistaRiesgo='T')
            elif request.args(2)=='0':
                db(db.TipoControl.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.TipoControl.id==request.args(0)).update(AprobacionAnalistaRiesgo='F')
        #redirect(URL('TipoControl', vars=dict(keywords=parametros)))
        if request.args(3):
            redirect(URL('TipoControl', vars=dict(keywords=parametros)))
        else:
            redirect(URL('TipoControl'))

    if request.args(1) == 'GrupoControl':
        if (auth.has_membership(role='riskManager') or auth.has_membership(role='admin')):
            if request.args(2)=='1':
                db(db.GrupoControl.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.GrupoControl.id==request.args(0)).update(AprobacionJefeRiesgo='T')
            elif request.args(2)=='0':
                db(db.GrupoControl.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.GrupoControl.id==request.args(0)).update(AprobacionJefeRiesgo='F')
        elif (auth.has_membership(role='riskAnalyst')):
            if request.args(2)=='1':
                db(db.GrupoControl.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.GrupoControl.id==request.args(0)).update(AprobacionAnalistaRiesgo='T')
            elif request.args(2)=='0':
                db(db.GrupoControl.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.GrupoControl.id==request.args(0)).update(AprobacionAnalistaRiesgo='F')
        #redirect(URL('TipoControl', vars=dict(keywords=parametros)))
        if request.args(3):
            redirect(URL('GrupoControl', vars=dict(keywords=parametros)))
        else:
            redirect(URL('GrupoControl'))

    if request.args(1) == 'ClasificacionControl':
        if (auth.has_membership(role='riskManager') or auth.has_membership(role='admin')):
            if request.args(2)=='1':
                db(db.ClasificacionControl.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.ClasificacionControl.id==request.args(0)).update(AprobacionJefeRiesgo='T')
            elif request.args(2)=='0':
                db(db.ClasificacionControl.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.ClasificacionControl.id==request.args(0)).update(AprobacionJefeRiesgo='F')
        elif (auth.has_membership(role='riskAnalyst')):
            if request.args(2)=='1':
                db(db.ClasificacionControl.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.ClasificacionControl.id==request.args(0)).update(AprobacionAnalistaRiesgo='T')
            elif request.args(2)=='0':
                db(db.ClasificacionControl.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.ClasificacionControl.id==request.args(0)).update(AprobacionAnalistaRiesgo='F')
        if request.args(3):
            redirect(URL('ClasificacionControl', vars=dict(keywords=parametros)))
        else:
            redirect(URL('ClasificacionControl'))
    #if request.args(3):
    #    redirect(URL(request.args(1), vars=dict(keywords=parametros)))
    #else:
    #    redirect(URL(request.arsg(1)))

    if request.args(1) == 'CatalogoControl':
        if (auth.has_membership(role='riskManager') or auth.has_membership(role='admin')):
            if request.args(2)=='1':
                db(db.CatalogoControl.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.CatalogoControl.id==request.args(0)).update(AprobacionJefeRiesgo='T')
            elif request.args(2)=='0':
                db(db.CatalogoControl.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.CatalogoControl.id==request.args(0)).update(AprobacionJefeRiesgo='F')
        elif (auth.has_membership(role='riskAnalyst')):
            if request.args(2)=='1':
                db(db.CatalogoControl.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.CatalogoControl.id==request.args(0)).update(AprobacionAnalistaRiesgo='T')
            elif request.args(2)=='0':
                db(db.CatalogoControl.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.CatalogoControl.id==request.args(0)).update(AprobacionAnalistaRiesgo='F')
        #redirect(URL('CatalogoControl', vars=dict(keywords=parametros)))
        if request.args(3):
            redirect(URL('GrupoControl', vars=dict(keywords=parametros)))
        else:
            redirect(URL('GrupoControl'))
    
    if request.args(1) == 'ObjetivoControl':
        if (auth.has_membership(role='riskManager') or auth.has_membership(role='admin')):
            if request.args(2)=='1':
                db(db.ObjetivoControl.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.ObjetivoControl.id==request.args(0)).update(AprobacionJefeRiesgo='T')
            elif request.args(2)=='0':
                db(db.ObjetivoControl.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.ObjetivoControl.id==request.args(0)).update(AprobacionJefeRiesgo='F')
        elif (auth.has_membership(role='riskAnalyst')):
            if request.args(2)=='1':
                db(db.ObjetivoControl.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.ObjetivoControl.id==request.args(0)).update(AprobacionAnalistaRiesgo='T')
            elif request.args(2)=='0':
                db(db.ObjetivoControl.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.ObjetivoControl.id==request.args(0)).update(AprobacionAnalistaRiesgo='F')
        #redirect(URL('ObjetivoControl', vars=dict(keywords=parametros)))
        if request.args(3):
            redirect(URL('ObjetivoControl', vars=dict(keywords=parametros)))
        else:
            redirect(URL('ObjetivoControl'))

    if request.args(1) == 'CatalogoControlBenchControl':
        if (auth.has_membership(role='riskManager') or auth.has_membership(role='admin')):
            if request.args(2)=='1':
                db(db.CatalogoControlBenchControl.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.CatalogoControlBenchControl.id==request.args(0)).update(AprobacionJefeRiesgo='T')
            elif request.args(2)=='0':
                db(db.CatalogoControlBenchControl.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.CatalogoControlBenchControl.id==request.args(0)).update(AprobacionJefeRiesgo='F')
        elif (auth.has_membership(role='riskAnalyst')):
            if request.args(2)=='1':
                db(db.CatalogoControlBenchControl.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.CatalogoControlBenchControl.id==request.args(0)).update(AprobacionAnalistaRiesgo='T')
            elif request.args(2)=='0':
                db(db.CatalogoControlBenchControl.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.CatalogoControlBenchControl.id==request.args(0)).update(AprobacionAnalistaRiesgo='F')
        #redirect(URL('CatalogoControlObjetivoControl', vars=dict(keywords=parametros)))
        if request.args(3):
            redirect(URL('CatalogoControlBenchControl', vars=dict(keywords=parametros)))
        else:
            redirect(URL('CatalogoControlBenchControl'))

    if request.args(1) == 'DetallePoliticaBenchControl':
        if (auth.has_membership(role='riskManager') or auth.has_membership(role='admin')):
            if request.args(2)=='1':
                db(db.DetallePoliticaBenchControl.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.DetallePoliticaBenchControl.id==request.args(0)).update(AprobacionJefeRiesgo='T')
            elif request.args(2)=='0':
                db(db.DetallePoliticaBenchControl.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.DetallePoliticaBenchControl.id==request.args(0)).update(AprobacionJefeRiesgo='F')
        elif (auth.has_membership(role='riskAnalyst')):
            if request.args(2)=='1':
                db(db.DetallePoliticaBenchControl.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.DetallePoliticaBenchControl.id==request.args(0)).update(AprobacionAnalistaRiesgo='T')
            elif request.args(2)=='0':
                db(db.DetallePoliticaBenchControl.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.DetallePoliticaBenchControl.id==request.args(0)).update(AprobacionAnalistaRiesgo='F')
        #redirect(URL('CatalogoControlObjetivoControl', vars=dict(keywords=parametros)))
        if request.args(3):
            redirect(URL('DetallePoliticaBenchControl', vars=dict(keywords=parametros)))
        else:
            redirect(URL('DetallePoliticaBenchControl'))

    if request.args(1) == 'Region':
        if (auth.has_membership(role='riskManager') or auth.has_membership(role='admin')):
            if request.args(2)=='1':
                db(db.Region.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.Region.id==request.args(0)).update(AprobacionJefeRiesgo='T')
            elif request.args(2)=='0':
                db(db.Region.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.Region.id==request.args(0)).update(AprobacionJefeRiesgo='F')
        elif (auth.has_membership(role='riskAnalyst')):
            if request.args(2)=='1':
                db(db.Region.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.Region.id==request.args(0)).update(AprobacionAnalistaRiesgo='T')
            elif request.args(2)=='0':
                db(db.Region.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.Region.id==request.args(0)).update(AprobacionAnalistaRiesgo='F')
        #redirect(URL('Region', vars=dict(keywords=parametros)))
        if request.args(3):
            redirect(URL('Region', vars=dict(keywords=parametros)))
        else:
            redirect(URL('Region'))
   
    if request.args(1) == 'ProcesoRegion':
        if (auth.has_membership(role='riskManager') or auth.has_membership(role='admin')):
            if request.args(2)=='1':
                db(db.ProcesoRegion.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.ProcesoRegion.id==request.args(0)).update(AprobacionJefeRiesgo='T')
            elif request.args(2)=='0':
                db(db.ProcesoRegion.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.ProcesoRegion.id==request.args(0)).update(AprobacionJefeRiesgo='F')
        elif (auth.has_membership(role='riskAnalyst')):
            if request.args(2)=='1':
                db(db.ProcesoRegion.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.ProcesoRegion.id==request.args(0)).update(AprobacionAnalistaRiesgo='T')
            elif request.args(2)=='0':
                db(db.ProcesoRegion.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.ProcesoRegion.id==request.args(0)).update(AprobacionAnalistaRiesgo='F')
        #redirect(URL('ProcesoRegion', vars=dict(keywords=parametros)))
        if request.args(3):
            redirect(URL('ProcesoRegion', vars=dict(keywords=parametros)))
        else:
            redirect(URL('ProcesoRegion'))
   
    if request.args(1) == 'RegionPolitica':
        if (auth.has_membership(role='riskManager') or auth.has_membership(role='admin')):
            if request.args(2)=='1':
                db(db.RegionPolitica.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.RegionPolitica.id==request.args(0)).update(AprobacionJefeRiesgo='T')
            elif request.args(2)=='0':
                db(db.RegionPolitica.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.RegionPolitica.id==request.args(0)).update(AprobacionJefeRiesgo='F')
        elif (auth.has_membership(role='riskAnalyst')):
            if request.args(2)=='1':
                db(db.RegionPolitica.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.RegionPolitica.id==request.args(0)).update(AprobacionAnalistaRiesgo='T')
            elif request.args(2)=='0':
                db(db.RegionPolitica.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.RegionPolitica.id==request.args(0)).update(AprobacionAnalistaRiesgo='F')
        #redirect(URL('RegionPolitica', vars=dict(keywords=parametros)))
        if request.args(3):
            redirect(URL('RegionPolitica', vars=dict(keywords=parametros)))
        else:
            redirect(URL('RegionPolitica'))

    if request.args(1) == 'CicloNegocio':
        if (auth.has_membership(role='riskManager') or auth.has_membership(role='admin')):
            if request.args(2)=='1':
                db(db.CicloNegocio.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.CicloNegocio.id==request.args(0)).update(AprobacionJefeRiesgo='T')
            elif request.args(2)=='0':
                db(db.CicloNegocio.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.CicloNegocio.id==request.args(0)).update(AprobacionJefeRiesgo='F')
        elif (auth.has_membership(role='riskAnalyst')):
            if request.args(2)=='1':
                db(db.CicloNegocio.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.CicloNegocio.id==request.args(0)).update(AprobacionAnalistaRiesgo='T')
            elif request.args(2)=='0':
                db(db.CicloNegocio.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.CicloNegocio.id==request.args(0)).update(AprobacionAnalistaRiesgo='F')
        #redirect(URL('CicloNegocio', vars=dict(keywords=parametros)))
        if request.args(3):
            redirect(URL('CicloNegocio', vars=dict(keywords=parametros)))
        else:
            redirect(URL('CicloNegocio'))

    if request.args(1) == 'TipoProceso':
        if (auth.has_membership(role='riskManager') or auth.has_membership(role='admin')):
            if request.args(2)=='1':
                db(db.TipoProceso.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.TipoProceso.id==request.args(0)).update(AprobacionJefeRiesgo='T')
            elif request.args(2)=='0':
                db(db.TipoProceso.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.TipoProceso.id==request.args(0)).update(AprobacionJefeRiesgo='F')
        elif (auth.has_membership(role='riskAnalyst')):
            if request.args(2)=='1':
                db(db.TipoProceso.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.TipoProceso.id==request.args(0)).update(AprobacionAnalistaRiesgo='T')
            elif request.args(2)=='0':
                db(db.TipoProceso.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.TipoProceso.id==request.args(0)).update(AprobacionAnalistaRiesgo='F')
        #redirect(URL('TipoProceso', vars=dict(keywords=parametros)))
        if request.args(3):
            redirect(URL('TipoProceso', vars=dict(keywords=parametros)))
        else:
            redirect(URL('TipoProceso'))

    if request.args(1) == 'MacroProceso':
        if (auth.has_membership(role='riskManager') or auth.has_membership(role='admin')):
            if request.args(2)=='1':
                db(db.MacroProceso.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.MacroProceso.id==request.args(0)).update(AprobacionJefeRiesgo='T')
            elif request.args(2)=='0':
                db(db.MacroProceso.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.MacroProceso.id==request.args(0)).update(AprobacionJefeRiesgo='F')
        elif (auth.has_membership(role='riskAnalyst')):
            if request.args(2)=='1':
                db(db.MacroProceso.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.MacroProceso.id==request.args(0)).update(AprobacionAnalistaRiesgo='T')
            elif request.args(2)=='0':
                db(db.MacroProceso.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.MacroProceso.id==request.args(0)).update(AprobacionAnalistaRiesgo='F')
        #redirect(URL('MacroProceso', vars=dict(keywords=parametros)))
        if request.args(3):
            redirect(URL('MacroProceso', vars=dict(keywords=parametros)))
        else:
            redirect(URL('MacroProceso'))

    if request.args(1) == 'ProcesoTipoProceso':
        if (auth.has_membership(role='riskManager') or auth.has_membership(role='admin')):
            if request.args(2)=='1':
                db(db.ProcesoTipoProceso.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.ProcesoTipoProceso.id==request.args(0)).update(AprobacionJefeRiesgo='T')
            elif request.args(2)=='0':
                db(db.ProcesoTipoProceso.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.ProcesoTipoProceso.id==request.args(0)).update(AprobacionJefeRiesgo='F')
        elif (auth.has_membership(role='riskAnalyst')):
            if request.args(2)=='1':
                db(db.ProcesoTipoProceso.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.ProcesoTipoProceso.id==request.args(0)).update(AprobacionAnalistaRiesgo='T')
            elif request.args(2)=='0':
                db(db.ProcesoTipoProceso.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.ProcesoTipoProceso.id==request.args(0)).update(AprobacionAnalistaRiesgo='F')
        #redirect(URL('ProcesoTipoProceso', vars=dict(keywords=parametros)))
        if request.args(3):
            redirect(URL('ProcesoTipoProceso', vars=dict(keywords=parametros)))
        else:
            redirect(URL('ProcesoTipoProceso'))

    if request.args(1) == 'ProcesoMacroProceso':
        if (auth.has_membership(role='riskManager') or auth.has_membership(role='admin')):
            if request.args(2)=='1':
                db(db.ProcesoMacroProceso.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.ProcesoMacroProceso.id==request.args(0)).update(AprobacionJefeRiesgo='T')
            elif request.args(2)=='0':
                db(db.ProcesoMacroProceso.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.ProcesoMacroProceso.id==request.args(0)).update(AprobacionJefeRiesgo='F')
        elif (auth.has_membership(role='riskAnalyst')):
            if request.args(2)=='1':
                db(db.ProcesoMacroProceso.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.ProcesoMacroProceso.id==request.args(0)).update(AprobacionAnalistaRiesgo='T')
            elif request.args(2)=='0':
                db(db.ProcesoMacroProceso.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.ProcesoMacroProceso.id==request.args(0)).update(AprobacionAnalistaRiesgo='F')
        #redirect(URL('ProcesoMacroProceso', vars=dict(keywords=parametros)))
        if request.args(3):
            redirect(URL('ProcesoMacroProceso', vars=dict(keywords=parametros)))
        else:
            redirect(URL('ProcesoMacroProceso'))

    if request.args(1) == 'ProcesoCicloNegocio':
        if (auth.has_membership(role='riskManager') or auth.has_membership(role='admin')):
            if request.args(2)=='1':
                db(db.ProcesoCicloNegocio.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.ProcesoCicloNegocio.id==request.args(0)).update(AprobacionJefeRiesgo='T')
            elif request.args(2)=='0':
                db(db.ProcesoCicloNegocio.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.ProcesoCicloNegocio.id==request.args(0)).update(AprobacionJefeRiesgo='F')
        elif (auth.has_membership(role='riskAnalyst')):
            if request.args(2)=='1':
                db(db.ProcesoCicloNegocio.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.ProcesoCicloNegocio.id==request.args(0)).update(AprobacionAnalistaRiesgo='T')
            elif request.args(2)=='0':
                db(db.ProcesoCicloNegocio.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.ProcesoCicloNegocio.id==request.args(0)).update(AprobacionAnalistaRiesgo='F')
        #redirect(URL('ProcesoCicloNegocio', vars=dict(keywords=parametros)))
        if request.args(3):
            redirect(URL('ProcesoCicloNegocio', vars=dict(keywords=parametros)))
        else:
            redirect(URL('ProcesoCicloNegocio'))

    if request.args(1) == 'Direccion':
        if (auth.has_membership(role='riskManager') or auth.has_membership(role='admin')):
            if request.args(2)=='1':
                db(db.Direccion.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.Direccion.id==request.args(0)).update(AprobacionJefeRiesgo='T')
            elif request.args(2)=='0':
                db(db.Direccion.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.Direccion.id==request.args(0)).update(AprobacionJefeRiesgo='F')
        elif (auth.has_membership(role='riskAnalyst')):
            if request.args(2)=='1':
                db(db.Direccion.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.Direccion.id==request.args(0)).update(AprobacionAnalistaRiesgo='T')
            elif request.args(2)=='0':
                db(db.Direccion.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.Direccion.id==request.args(0)).update(AprobacionAnalistaRiesgo='F')
        #redirect(URL('Direccion', vars=dict(keywords=parametros)))
        if request.args(3):
            redirect(URL('Direccion', vars=dict(keywords=parametros)))
        else:
            redirect(URL('Direccion'))

    if request.args(1) == 'Documentacion':
        if (auth.has_membership(role='riskManager') or auth.has_membership(role='admin')):
            if request.args(2)=='1':
                db(db.Documentacion.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.Documentacion.id==request.args(0)).update(AprobacionJefeRiesgo='T')
            elif request.args(2)=='0':
                db(db.Documentacion.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.Documentacion.id==request.args(0)).update(AprobacionJefeRiesgo='F')
        elif (auth.has_membership(role='riskAnalyst')):
            if request.args(2)=='1':
                db(db.Documentacion.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.Documentacion.id==request.args(0)).update(AprobacionAnalistaRiesgo='T')
            elif request.args(2)=='0':
                db(db.Documentacion.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.Documentacion.id==request.args(0)).update(AprobacionAnalistaRiesgo='F')
        #redirect(URL('Documentacion', vars=dict(keywords=parametros)))
        if request.args(3):
            redirect(URL('Documentacion', vars=dict(keywords=parametros)))
        else:
            redirect(URL('Documentacion'))

    if request.args(1) == 'Proceso':
        if (auth.has_membership(role='riskManager') or auth.has_membership(role='admin')):
            if request.args(2)=='1':
                db(db.Proceso.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.Proceso.id==request.args(0)).update(AprobacionJefeRiesgo='T')
            elif request.args(2)=='0':
                db(db.Proceso.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.Proceso.id==request.args(0)).update(AprobacionJefeRiesgo='F')
        elif (auth.has_membership(role='riskAnalyst')):
            if request.args(2)=='1':
                db(db.Proceso.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.Proceso.id==request.args(0)).update(AprobacionAnalistaRiesgo='T')
            elif request.args(2)=='0':
                db(db.Proceso.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.Proceso.id==request.args(0)).update(AprobacionAnalistaRiesgo='F')
        #redirect(URL('Proceso', vars=dict(keywords=parametros)))
        if request.args(3):
            redirect(URL('Proceso', vars=dict(keywords=parametros)))
        else:
            redirect(URL('Proceso'))

    if request.args(1) == 'ProcesoPolitica':
        if (auth.has_membership(role='riskManager') or auth.has_membership(role='admin')):
            if request.args(2)=='1':
                db(db.ProcesoPolitica.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.ProcesoPolitica.id==request.args(0)).update(AprobacionJefeRiesgo='T')
            elif request.args(2)=='0':
                db(db.ProcesoPolitica.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.ProcesoPolitica.id==request.args(0)).update(AprobacionJefeRiesgo='F')
        elif (auth.has_membership(role='riskAnalyst')):
            if request.args(2)=='1':
                db(db.ProcesoPolitica.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.ProcesoPolitica.id==request.args(0)).update(AprobacionAnalistaRiesgo='T')
            elif request.args(2)=='0':
                db(db.ProcesoPolitica.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.ProcesoPolitica.id==request.args(0)).update(AprobacionAnalistaRiesgo='F')
        #redirect(URL('ProcesoPolitica', vars=dict(keywords=parametros)))
        if request.args(3):
            redirect(URL('ProcesoPolitica', vars=dict(keywords=parametros)))
        else:
            redirect(URL('ProcesoPolitica'))

    if request.args(1) == 'NivelMadurez':
        if (auth.has_membership(role='riskManager') or auth.has_membership(role='admin')):
            if request.args(2)=='1':
                db(db.NivelMadurez.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.NivelMadurez.id==request.args(0)).update(AprobacionJefeRiesgo='T')
            elif request.args(2)=='0':
                db(db.NivelMadurez.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.NivelMadurez.id==request.args(0)).update(AprobacionJefeRiesgo='F')
        elif (auth.has_membership(role='riskAnalyst')):
            if request.args(2)=='1':
                db(db.NivelMadurez.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.NivelMadurez.id==request.args(0)).update(AprobacionAnalistaRiesgo='T')
            elif request.args(2)=='0':
                db(db.NivelMadurez.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.NivelMadurez.id==request.args(0)).update(AprobacionAnalistaRiesgo='F')
        #redirect(URL('NivelMadurez', vars=dict(keywords=parametros)))
        if request.args(3):
            redirect(URL('NivelMadurez', vars=dict(keywords=parametros)))
        else:
            redirect(URL('NivelMadurez'))

    if request.args(1) == 'CriterioImpacto':
        if (auth.has_membership(role='riskManager') or auth.has_membership(role='admin')):
            if request.args(2)=='1':
                db(db.CriterioImpacto.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.CriterioImpacto.id==request.args(0)).update(AprobacionJefeRiesgo='T')
            if request.args(2)=='0':
                db(db.CriterioImpacto.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.CriterioImpacto.id==request.args(0)).update(AprobacionJefeRiesgo='F')
        #redirect(URL('CriterioImpacto', vars=dict(keywords=parametros)))
        if request.args(3):
            redirect(URL('CriterioImpacto', vars=dict(keywords=parametros)))
        else:
            redirect(URL('CriterioImpacto'))

    if request.args(1) == 'CriterioProbabilidad':
        if (auth.has_membership(role='riskManager') or auth.has_membership(role='admin')):
            if request.args(2)=='1':
                db(db.CriterioProbabilidad.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.CriterioProbabilidad.id==request.args(0)).update(AprobacionJefeRiesgo='T')
            if request.args(2)=='0':
                db(db.CriterioProbabilidad.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.CriterioProbabilidad.id==request.args(0)).update(AprobacionJefeRiesgo='F')
        #redirect(URL('CriterioProbabilidad', vars=dict(keywords=parametros)))
        if request.args(3):
            redirect(URL('CriterioProbabilidad', vars=dict(keywords=parametros)))
        else:
            redirect(URL('CriterioProbabilidad'))

    if request.args(1) == 'CriterioRiesgo':
        if (auth.has_membership(role='riskManager') or auth.has_membership(role='admin')):
            if request.args(2)=='1':
                db(db.CriterioRiesgo.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.CriterioRiesgo.id==request.args(0)).update(AprobacionJefeRiesgo='T')
            if request.args(2)=='0':
                db(db.CriterioRiesgo.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.CriterioRiesgo.id==request.args(0)).update(AprobacionJefeRiesgo='F')
        if request.args(3):
            redirect(URL('CriterioRiesgo', vars=dict(keywords=parametros)))
        else:
            redirect(URL('CriterioRiesgo'))

    if request.args(1) == 'ObjetivoOrganizacion':
        if (auth.has_membership(role='riskManager') or auth.has_membership(role='admin')):
            if request.args(2)=='1':
                db(db.ObjetivoOrganizacion.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.ObjetivoOrganizacion.id==request.args(0)).update(AprobacionJefeRiesgo='T')
            if request.args(2)=='0':
                db(db.ObjetivoOrganizacion.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.ObjetivoOrganizacion.id==request.args(0)).update(AprobacionJefeRiesgo='F')
        #redirect(URL('ObjetivoOrganizacion', vars=dict(keywords=parametros)))
        if request.args(3):
            redirect(URL('ObjetivoOrganizacion', vars=dict(keywords=parametros)))
        else:
            redirect(URL('ObjetivoOrganizacion'))

    if request.args(1) == 'Organizacion':
        if (auth.has_membership(role='riskManager') or auth.has_membership(role='admin')):
            if request.args(2)=='1':
                db(db.Organizacion.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.Organizacion.id==request.args(0)).update(AprobacionJefeRiesgo='T')
            if request.args(2)=='0':
                db(db.Organizacion.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.Organizacion.id==request.args(0)).update(AprobacionJefeRiesgo='F')
        if request.args(3):
            redirect(URL('Organizacion', vars=dict(keywords=parametros)))
        else:
            redirect(URL('Organizacion'))
    '''
    if request.args(1) == 'AmbienteControl':
        if (auth.has_membership(role='riskManager') or auth.has_membership(role='admin')):
            if request.args(2)=='1':
                db(db.AmbienteControl.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.AmbienteControl.id==request.args(0)).update(AprobacionJefeRiesgo='T')
            if request.args(2)=='0':
                db(db.AmbienteControl.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.AmbienteControl.id==request.args(0)).update(AprobacionJefeRiesgo='F')
        if (auth.has_membership(role='riskAnalyst')):
            if request.args(2)=='1':
                db(db.AmbienteControl.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.AmbienteControl.id==request.args(0)).update(AprobacionAnalistaRiesgo='T')
            if request.args(2)=='0':
                db(db.AmbienteControl.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.AmbienteControl.id==request.args(0)).update(AprobacionAnalistaRiesgo='F')
        #redirect(URL('AmbienteControl', vars=dict(keywords=parametros)))
        if request.args(3):
            redirect(URL('AmbienteControl', vars=dict(keywords=parametros)))
        else:
            redirect(URL('AmbienteControl'))
    '''
    if request.args(1) == 'ActivoInformacion':
        if (auth.has_membership(role='riskManager') or auth.has_membership(role='admin')):
            if request.args(2)=='1':
                db(db.ActivoInformacion.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.ActivoInformacion.id==request.args(0)).update(AprobacionJefeRiesgo='T')
            if request.args(2)=='0':
                db(db.ActivoInformacion.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.ActivoInformacion.id==request.args(0)).update(AprobacionJefeRiesgo='F')
        if (auth.has_membership(role='riskAnalyst')):
            if request.args(2)=='1':
                db(db.ActivoInformacion.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.ActivoInformacion.id==request.args(0)).update(AprobacionAnalistaRiesgo='T')
            if request.args(2)=='0':
                db(db.ActivoInformacion.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.ActivoInformacion.id==request.args(0)).update(AprobacionAnalistaRiesgo='F')
        if (auth.has_membership(role='informationOwner')):
            if request.args(2)=='1':
                db(db.ActivoInformacion.id==request.args(0)).update(LogDuenoInformacion=signature)
                db(db.ActivoInformacion.id==request.args(0)).update(AprobacionDuenoInformacion='T')
            if request.args(2)=='0':
                db(db.ActivoInformacion.id==request.args(0)).update(LogDuenoInformacion=signature)
                db(db.ActivoInformacion.id==request.args(0)).update(AprobacionDuenoInformacion='F')
        #redirect(URL('ActivoInformacion', vars=dict(keywords=parametros)))
        if request.args(3):
            redirect(URL('ActivoInformacion', vars=dict(keywords=parametros)))
        else:
            redirect(URL('ActivoInformacion'))

    if request.args(1) == 'RolResponsabilidad':
        if (auth.has_membership(role='riskManager') or auth.has_membership(role='admin')):
            if request.args(2)=='1':
                db(db.RolResponsabilidad.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.RolResponsabilidad.id==request.args(0)).update(AprobacionJefeRiesgo='T')
            if request.args(2)=='0':
                db(db.RolResponsabilidad.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.RolResponsabilidad.id==request.args(0)).update(AprobacionJefeRiesgo='F')
        if (auth.has_membership(role='riskAnalyst')):
            if request.args(2)=='1':
                db(db.RolResponsabilidad.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.RolResponsabilidad.id==request.args(0)).update(AprobacionAnalistaRiesgo='T')
            if request.args(2)=='0':
                db(db.RolResponsabilidad.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.RolResponsabilidad.id==request.args(0)).update(AprobacionAnalistaRiesgo='F')
        '''
        if (auth.has_membership(role='informationOwner')):
            if request.args(2)=='1':
                db(db.RolResponsabilidad.id==request.args(0)).update(LogDuenoInformacion=signature)
                db(db.RolResponsabilidad.id==request.args(0)).update(AprobacionDuenoInformacion='T')
            if request.args(2)=='0':
                db(db.RolResponsabilidad.id==request.args(0)).update(LogDuenoInformacion=signature)
                db(db.RolResponsabilidad.id==request.args(0)).update(AprobacionDuenoInformacion='F')
        #redirect(URL('ActivoInformacion', vars=dict(keywords=parametros)))
        '''
        if request.args(3):
            redirect(URL('RolResponsabilidad', vars=dict(keywords=parametros)))
        else:
            redirect(URL('RolResponsabilidad'))

    if request.args(1) == 'AnalisisRiesgo':
        if (auth.has_membership(role='riskManager') or auth.has_membership(role='admin')):
            if request.args(2)=='1':
                db(db.AnalisisRiesgo.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.AnalisisRiesgo.id==request.args(0)).update(AprobacionJefeRiesgo='T')
            if request.args(2)=='0':
                db(db.AnalisisRiesgo.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.AnalisisRiesgo.id==request.args(0)).update(AprobacionJefeRiesgo='F')
                #db(db.AnalisisRiesgo.id==request.args(0)).update(AprobacionAnalistaRiesgo='F')
                #db(db.AnalisisRiesgo.id==request.args(0)).update(AprobacionDuenoProceso='F')
        if (auth.has_membership(role='riskAnalyst')):
            if request.args(2)=='1':
                db(db.AnalisisRiesgo.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.AnalisisRiesgo.id==request.args(0)).update(AprobacionAnalistaRiesgo='T')
            if request.args(2)=='0':
                db(db.AnalisisRiesgo.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.AnalisisRiesgo.id==request.args(0)).update(AprobacionAnalistaRiesgo='F')
        if (auth.has_membership(role='processOwner')):
            if request.args(2)=='1':
                db(db.AnalisisRiesgo.id==request.args(0)).update(LogDuenoProceso=signature)
                db(db.AnalisisRiesgo.id==request.args(0)).update(AprobacionDuenoProceso='T')
            if request.args(2)=='0':
                db(db.AnalisisRiesgo.id==request.args(0)).update(LogDuenoProceso=signature)
                db(db.AnalisisRiesgo.id==request.args(0)).update(AprobacionDuenoProceso='F')
        #redirect(URL('AnalisisRiesgo', vars=dict(keywords=parametros)))
        if request.args(3):
            redirect(URL('AnalisisRiesgo', vars=dict(keywords=parametros)))
        else:
            redirect(URL('AnalisisRiesgo'))

    if request.args(1) == 'TratamientoRiesgo':
        if (auth.has_membership(role='riskManager') or auth.has_membership(role='admin')):
            if request.args(2)=='1':
                db(db.TratamientoRiesgo.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.TratamientoRiesgo.id==request.args(0)).update(AprobacionJefeRiesgo='T')
            if request.args(2)=='0':
                db(db.TratamientoRiesgo.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.TratamientoRiesgo.id==request.args(0)).update(AprobacionJefeRiesgo='F')
        if (auth.has_membership(role='riskAnalyst')):
            if request.args(2)=='1':
                db(db.TratamientoRiesgo.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.TratamientoRiesgo.id==request.args(0)).update(AprobacionAnalistaRiesgo='T')
            if request.args(2)=='0':
                db(db.TratamientoRiesgo.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.TratamientoRiesgo.id==request.args(0)).update(AprobacionAnalistaRiesgo='F')
        if (auth.has_membership(role='controlResp')):
            if request.args(2)=='1':
                db(db.TratamientoRiesgo.id==request.args(0)).update(LogResponsableControl=signature)
                db(db.TratamientoRiesgo.id==request.args(0)).update(AprobacionResponsableControl='T')
            if request.args(2)=='0':
                db(db.TratamientoRiesgo.id==request.args(0)).update(LogResponsableControl=signature)
                db(db.TratamientoRiesgo.id==request.args(0)).update(AprobacionResponsableControl='F')
        #redirect(URL('TratamientoRiesgo'))
        #redirect(URL('TratamientoRiesgo', vars=dict(keywords=parametros)))
        if request.args(3):
            redirect(URL('TratamientoRiesgo', vars=dict(keywords=parametros)))
        else:
            redirect(URL('TratamientoRiesgo'))

    if request.args(1) == 'TipoTratamientoRiesgo':
        if (auth.has_membership(role='riskManager') or auth.has_membership(role='admin')):
            if request.args(2)=='1':
                db(db.TipoTratamientoRiesgo.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.TipoTratamientoRiesgo.id==request.args(0)).update(AprobacionJefeRiesgo='T')
            if request.args(2)=='0':
                db(db.TipoTratamientoRiesgo.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.TipoTratamientoRiesgo.id==request.args(0)).update(AprobacionJefeRiesgo='F')
        if (auth.has_membership(role='riskAnalyst')):
            if request.args(2)=='1':
                db(db.TipoTratamientoRiesgo.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.TipoTratamientoRiesgo.id==request.args(0)).update(AprobacionAnalistaRiesgo='T')
            if request.args(2)=='0':
                db(db.TipoTratamientoRiesgo.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.TipoTratamientoRiesgo.id==request.args(0)).update(AprobacionAnalistaRiesgo='F')
        if (auth.has_membership(role='controlResp')):
            if request.args(2)=='1':
                db(db.TipoTratamientoRiesgo.id==request.args(0)).update(LogResponsableControl=signature)
                db(db.TipoTratamientoRiesgo.id==request.args(0)).update(AprobacionResponsableControl='T')
            if request.args(2)=='0':
                db(db.TipoTratamientoRiesgo.id==request.args(0)).update(LogResponsableControl=signature)
                db(db.TipoTratamientoRiesgo.id==request.args(0)).update(AprobacionResponsableControl='F')
        #redirect(URL('TipoTratamientoRiesgo', vars=dict(keywords=parametros)))
        if request.args(3):
            redirect(URL('TipoTratamientoRiesgo', vars=dict(keywords=parametros)))
        else:
            redirect(URL('TipoTratamientoRiesgo'))

    if request.args(1) == 'CatalogoPolitica':
        if (auth.has_membership(role='riskManager') or auth.has_membership(role='admin')):
            if request.args(2)=='1':
                db(db.CatalogoPolitica.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.CatalogoPolitica.id==request.args(0)).update(AprobacionJefeRiesgo='T')
            if request.args(2)=='0':
                db(db.CatalogoPolitica.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.CatalogoPolitica.id==request.args(0)).update(AprobacionJefeRiesgo='F')
                #db(db.CatalogoPolitica.id==request.args(0)).update(AprobacionAnalistaRiesgo='F')
                #db(db.CatalogoPolitica.id==request.args(0)).update(AprobacionResponsableControl='F')
        if (auth.has_membership(role='riskAnalyst')):
            if request.args(2)=='1':
                db(db.CatalogoPolitica.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.CatalogoPolitica.id==request.args(0)).update(AprobacionAnalistaRiesgo='T')
            if request.args(2)=='0':
                db(db.CatalogoPolitica.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.CatalogoPolitica.id==request.args(0)).update(AprobacionAnalistaRiesgo='F')
        #redirect(URL('CatalogoPolitica', vars=dict(keywords=parametros)))
        if request.args(3):
            redirect(URL('CatalogoPolitica', vars=dict(keywords=parametros)))
        else:
            redirect(URL('CatalogoPolitica'))

    if request.args(1) == 'DetallePolitica':
        if (auth.has_membership(role='riskManager') or auth.has_membership(role='admin')):
            if request.args(2)=='1':
                db(db.DetallePolitica.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.DetallePolitica.id==request.args(0)).update(AprobacionJefeRiesgo='T')
            if request.args(2)=='0':
                db(db.DetallePolitica.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.DetallePolitica.id==request.args(0)).update(AprobacionJefeRiesgo='F')
        if (auth.has_membership(role='riskAnalyst')):
            if request.args(2)=='1':
                db(db.DetallePolitica.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.DetallePolitica.id==request.args(0)).update(AprobacionAnalistaRiesgo='T')
            if request.args(2)=='0':
                db(db.DetallePolitica.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.DetallePolitica.id==request.args(0)).update(AprobacionAnalistaRiesgo='F')
        #redirect(URL('DetallePolitica', vars=dict(keywords=parametros)))
        if request.args(3):
            redirect(URL('DetallePolitica', vars=dict(keywords=parametros)))
        else:
            redirect(URL('DetallePolitica'))

    if request.args(1) == 'RegulacionDato':
        if (auth.has_membership(role='riskManager') or auth.has_membership(role='admin')):
            if request.args(2)=='1':
                db(db.RegulacionDato.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.RegulacionDato.id==request.args(0)).update(AprobacionJefeRiesgo='T')
            if request.args(2)=='0':
                db(db.RegulacionDato.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.RegulacionDato.id==request.args(0)).update(AprobacionJefeRiesgo='F')
        if (auth.has_membership(role='riskAnalyst')):
            if request.args(2)=='1':
                db(db.RegulacionDato.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.RegulacionDato.id==request.args(0)).update(AprobacionAnalistaRiesgo='T')
            if request.args(2)=='0':
                db(db.RegulacionDato.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.RegulacionDato.id==request.args(0)).update(AprobacionAnalistaRiesgo='F')
        #redirect(URL('RegulacionDato', vars=dict(keywords=parametros)))
        if request.args(3):
            redirect(URL('RegulacionDato', vars=dict(keywords=parametros)))
        else:
            redirect(URL('RegulacionDato'))

    if request.args(1) == 'RegulacionPolitica':
        if (auth.has_membership(role='riskManager') or auth.has_membership(role='admin')):
            if request.args(2)=='1':
                db(db.RegulacionPolitica.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.RegulacionPolitica.id==request.args(0)).update(AprobacionJefeRiesgo='T')
            if request.args(2)=='0':
                db(db.RegulacionPolitica.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.RegulacionPolitica.id==request.args(0)).update(AprobacionJefeRiesgo='F')
        if (auth.has_membership(role='riskAnalyst')):
            if request.args(2)=='1':
                db(db.RegulacionPolitica.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.RegulacionPolitica.id==request.args(0)).update(AprobacionAnalistaRiesgo='T')
            if request.args(2)=='0':
                db(db.RegulacionPolitica.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.RegulacionPolitica.id==request.args(0)).update(AprobacionAnalistaRiesgo='F')
        #redirect(URL('RegulacionPolitica', vars=dict(keywords=parametros)))
        if request.args(3):
            redirect(URL('RegulacionPolitica', vars=dict(keywords=parametros)))
        else:
            redirect(URL('RegulacionPolitica'))

    if request.args(1) == 'GrupoMetrica':
        if (auth.has_membership(role='riskManager') or auth.has_membership(role='admin')):
            if request.args(2)=='1':
                db(db.GrupoMetrica.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.GrupoMetrica.id==request.args(0)).update(AprobacionJefeRiesgo='T')
            elif request.args(2)=='0':
                db(db.GrupoMetrica.id==request.args(0)).update(LogJefeRiesgi=signature)
                db(db.GrupoMetrica.id==request.args(0)).update(AprobacionJefeRiesgo='F')
        elif (auth.has_membership(role='riskAnalyst')):
            if request.args(2)=='1':
                db(db.GrupoMetrica.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.GrupoMetrica.id==request.args(0)).update(AprobacionAnalistaRiesgo='T')
            elif request.args(2)=='0':
                db(db.GrupoMetrica.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.GrupoMetrica.id==request.args(0)).update(AprobacionAnalistaRiesgo='F')
        #redirect(URL('GrupoMetrica', vars=dict(keywords=parametros)))
        if request.args(3):
            redirect(URL('GrupoMetrica', vars=dict(keywords=parametros)))
        else:
            redirect(URL('GrupoMetrica'))

    if request.args(1) == 'Metrica':
        if (auth.has_membership(role='riskManager') or auth.has_membership(role='admin')):
            if request.args(2)=='1':
                db(db.Metrica.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.Metrica.id==request.args(0)).update(AprobacionJefeRiesgo='T')
            elif request.args(2)=='0':
                db(db.Metrica.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.Metrica.id==request.args(0)).update(AprobacionJefeRiesgo='F')
        elif (auth.has_membership(role='riskAnalyst')):
            if request.args(2)=='1':
                db(db.Metrica.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.Metrica.id==request.args(0)).update(AprobacionAnalistaRiesgo='T')
            elif request.args(2)=='0':
                db(db.Metrica.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.Metrica.id==request.args(0)).update(AprobacionAnalistaRiesgo='F')
        #redirect(URL('Metrica', vars=dict(keywords=parametros)))
        if request.args(3):
            redirect(URL('Metrica', vars=dict(keywords=parametros)))
        else:
            redirect(URL('Metrica'))

    if request.args(1) == 'AutoControlConfiguracion':
        if (auth.has_membership(role='auditManager') or auth.has_membership(role='admin')):
            if request.args(2)=='1':
                db2(db2.AutoControlConfiguracion.id==request.args(0)).update(LogJefeAuditoria=signature)
                db2(db2.AutoControlConfiguracion.id==request.args(0)).update(AprobacionJefeAuditoria='T')
            elif request.args(2)=='0':
                db2(db2.AutoControlConfiguracion.id==request.args(0)).update(LogJefeAuditoria=signature)
                db2(db2.AutoControlConfiguracion.id==request.args(0)).update(AprobacionJefeAuditoria='F')
        elif (auth.has_membership(role='auditAnalyst')):
            if request.args(2)=='1':
                db2(db2.AutoControlConfiguracion.id==request.args(0)).update(LogAnalistaAuditoria=signature)
                db2(db2.AutoControlConfiguracion.id==request.args(0)).update(AprobacionAnalistaAuditoria='T')
            elif request.args(2)=='0':
                db2(db2.AutoControlConfiguracion.id==request.args(0)).update(LogAnalistaAuditoria=signature)
                db2(db2.AutoControlConfiguracion.id==request.args(0)).update(AprobacionAnalistaAuditoria='F')
        #redirect(URL('AutoControlConfiguracion', vars=dict(keywords=parametros)))
        if request.args(3):
            redirect(URL('AutoControlConfiguracion', vars=dict(keywords=parametros)))
        else:
            redirect(URL('AutoControlConfiguracion'))

    if request.args(1) == 'AutoControlCuestionario':
        if (auth.has_membership(role='auditManager') or auth.has_membership(role='admin')):
            if request.args(2)=='1':
                db2(db2.AutoControlCuestionario.id==request.args(0)).update(LogJefeAuditoria=signature)
                db2(db2.AutoControlCuestionario.id==request.args(0)).update(AprobacionJefeAuditoria='T')
            elif request.args(2)=='0':
                db2(db2.AutoControlCuestionario.id==request.args(0)).update(LogJefeAuditoria=signature)
                db2(db2.AutoControlCuestionario.id==request.args(0)).update(AprobacionJefeAuditoria='F')
        elif (auth.has_membership(role='auditAnalyst')):
            if request.args(2)=='1':
                db2(db2.AutoControlCuestionario.id==request.args(0)).update(LogAnalistaAuditoria=signature)
                db2(db2.AutoControlCuestionario.id==request.args(0)).update(AprobacionAnalistaAuditoria='T')
            elif request.args(2)=='0':
                db2(db2.AutoControlCuestionario.id==request.args(0)).update(LogAnalistaAuditoria=signature)
                db2(db2.AutoControlCuestionario.id==request.args(0)).update(AprobacionAnalistaAuditoria='F')
        #redirect(URL('AutoControlCuestionario', vars=dict(keywords=parametros)))
        if request.args(3):
            redirect(URL('AutoControlCuestionario', vars=dict(keywords=parametros)))
        else:
            redirect(URL('AutoControlCuestionario'))

    if request.args(1) == 'ValorMetrica':
        if (auth.has_membership(role='riskManager') or auth.has_membership(role='admin')):
            if request.args(2)=='1':
                db(db.ValorMetrica.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.ValorMetrica.id==request.args(0)).update(AprobacionJefeRiesgo='T')
            elif request.args(2)=='0':
                db(db.ValorMetrica.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.ValorMetrica.id==request.args(0)).update(AprobacionJefeRiesgo='F')
        elif (auth.has_membership(role='riskAnalyst')):
            if request.args(2)=='1':
                db(db.ValorMetrica.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.ValorMetrica.id==request.args(0)).update(AprobacionAnalistaRiesgo='T')
            elif request.args(2)=='0':
                db(db.ValorMetrica.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.ValorMetrica.id==request.args(0)).update(AprobacionAnalistaRiesgo='F')
        #redirect(URL('ValorMetrica', vars=dict(keywords=parametros)))
        if request.args(3):
            redirect(URL('ValorMetrica', vars=dict(keywords=parametros)))
        else:
            redirect(URL('ValorMetrica'))

    if request.args(1) == 'TipoVulnerabilidad':
        if (auth.has_membership(role='riskManager') or auth.has_membership(role='admin')):
            if request.args(2)=='1':
                db(db.TipoVulnerabilidad.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.TipoVulnerabilidad.id==request.args(0)).update(AprobacionJefeRiesgo='T')
            elif request.args(2)=='0':
                db(db.TipoVulnerabilidad.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.TipoVulnerabilidad.id==request.args(0)).update(AprobacionJefeRiesgo='F')
        elif (auth.has_membership(role='riskAnalyst')):
            if request.args(2)=='1':
                db(db.TipoVulnerabilidad.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.TipoVulnerabilidad.id==request.args(0)).update(AprobacionAnalistaRiesgo='T')
            elif request.args(2)=='0':
                db(db.TipoVulnerabilidad.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.TipoVulnerabilidad.id==request.args(0)).update(AprobacionAnalistaRiesgo='F')
        if request.args(3):
            redirect(URL('GrupoFactorRiesgo', vars=dict(keywords=parametros)))
        else:
            redirect(URL('GrupoFactorRiesgo'))

    if request.args(1) == 'TipoCapaSistema':
        if (auth.has_membership(role='auditManager') or auth.has_membership(role='admin')):
            if request.args(2)=='1':
                db(db.TipoCapaSistema.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.TipoCapaSistema.id==request.args(0)).update(AprobacionJefeRiesgo='T')
            elif request.args(2)=='0':
                db(db.TipoCapaSistema.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.TipoCapaSistema.id==request.args(0)).update(AprobacionJefeRiesgo='F')
        elif (auth.has_membership(role='auditAnalyst')):
            if request.args(2)=='1':
                db(db.TipoCapaSistema.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.TipoCapaSistema.id==request.args(0)).update(AprobacionAnalistaRiesgo='T')
            elif request.args(2)=='0':
                db(db.TipoCapaSistema.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.TipoCapaSistema.id==request.args(0)).update(AprobacionAnalistaRiesgo='F')
        #redirect(URL('TipoCapaSistema', vars=dict(keywords=parametros)))
        if request.args(3):
            redirect(URL('TipoCapaSistema', vars=dict(keywords=parametros)))
        else:
            redirect(URL('TipoCapaSistema'))

    if request.args(1) == 'Plataforma':
        if (auth.has_membership(role='auditManager') or auth.has_membership(role='admin')):
            if request.args(2)=='1':
                db(db.Plataforma.id==request.args(0)).update(LogJefeAuditoria=signature)
                db(db.Plataforma.id==request.args(0)).update(AprobacionJefeAuditoria='T')
            elif request.args(2)=='0':
                db(db.Plataforma.id==request.args(0)).update(LogJefeAuditoria=signature)
                db(db.Plataforma.id==request.args(0)).update(AprobacionJefeAuditoria='F')
        elif (auth.has_membership(role='auditAnalyst')):
            if request.args(2)=='1':
                db(db.Plataforma.id==request.args(0)).update(LogAnalistaAuditoria=signature)
                db(db.Plataforma.id==request.args(0)).update(AprobacionAnalistaAuditoria='T')
            elif request.args(2)=='0':
                db(db.Plataforma.id==request.args(0)).update(LogAnalistaAuditoria=signature)
                db(db.Plataforma.id==request.args(0)).update(AprobacionAnalistaAuditoria='F')
        #redirect(URL('Plataforma', vars=dict(keywords=parametros)))
        if request.args(3):
            redirect(URL('Plataforma', vars=dict(keywords=parametros)))
        else:
            redirect(URL('Plataforma'))

    if request.args(1) == 'ActivoTi':
        if (auth.has_membership(role='riskManager') or auth.has_membership(role='admin')):
            if request.args(2)=='1':
                db(db.ActivoTi.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.ActivoTi.id==request.args(0)).update(AprobacionJefeRiesgo='T')
            elif request.args(2)=='0':
                db(db.ActivoTi.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.ActivoTi.id==request.args(0)).update(AprobacionJefeRiesgo='F')
        elif (auth.has_membership(role='riskAnalyst')):
            if request.args(2)=='1':
                db(db.ActivoTi.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.ActivoTi.id==request.args(0)).update(AprobacionAnalistaRiesgo='T')
            elif request.args(2)=='0':
                db(db.ActivoTi.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.ActivoTi.id==request.args(0)).update(AprobacionAnalistaRiesgo='F')
        #redirect(URL('ActivoTi', vars=dict(keywords=parametros)))
        if request.args(3):
            redirect(URL('ActivoTi', vars=dict(keywords=parametros)))
        else:
            redirect(URL('ActivoTi'))

    if request.args(1) == 'TipoCumplimiento':
        if (auth.has_membership(role='auditManager') or auth.has_membership(role='admin')):
            if request.args(2)=='1':
                db(db.TipoCumplimiento.id==request.args(0)).update(LogJefeAuditoria=signature)
                db(db.TipoCumplimiento.id==request.args(0)).update(AprobacionJefeAuditoria='T')
            elif request.args(2)=='0':
                db(db.TipoCumplimiento.id==request.args(0)).update(LogJefeAuditoria=signature)
                db(db.TipoCumplimiento.id==request.args(0)).update(AprobacionJefeAuditoria='F')
        elif (auth.has_membership(role='auditAnalyst')):
            if request.args(2)=='1':
                db(db.TipoCumplimiento.id==request.args(0)).update(LogAnalistaAuditoria=signature)
                db(db.TipoCumplimiento.id==request.args(0)).update(AprobacionAnalistaAuditoria='T')
            elif request.args(2)=='0':
                db(db.TipoCumplimiento.id==request.args(0)).update(LogAnalistaAuditoria=signature)
                db(db.TipoCumplimiento.id==request.args(0)).update(AprobacionAnalistaAuditoria='F')
        #redirect(URL('TipoCumplimiento', vars=dict(keywords=parametros)))
        if request.args(3):
            redirect(URL('TipoCumplimiento', vars=dict(keywords=parametros)))
        else:
            redirect(URL('TipoCumplimiento'))
    '''
    if request.args(1) == 'CatalogoPolitica':
        if (auth.has_membership(role='riskManager') or auth.has_membership(role='admin')):
            if request.args(2)=='1':
                db(db.CatalogoPolitica.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.CatalogoPolitica.id==request.args(0)).update(AprobacionJefeRiesgo='T')
            if request.args(2)=='0':
                db(db.CatalogoPolitica.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.CatalogoPolitica.id==request.args(0)).update(AprobacionJefeRiesgo='F')
                #db(db.CatalogoPolitica.id==request.args(0)).update(AprobacionAnalistaRiesgo='F')
                #db(db.CatalogoPolitica.id==request.args(0)).update(AprobacionResponsableControl='F')
        if (auth.has_membership(role='riskAnalyst')):
            if request.args(2)=='1':
                db(db.CatalogoPolitica.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.CatalogoPolitica.id==request.args(0)).update(AprobacionAnalistaRiesgo='T')
            if request.args(2)=='0':
                db(db.CatalogoPolitica.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.CatalogoPolitica.id==request.args(0)).update(AprobacionAnalistaRiesgo='F')
        redirect(URL('CatalogoPolitica'))

    if request.args(1) == 'DetallePolitica':
        if (auth.has_membership(role='riskManager') or auth.has_membership(role='admin')):
            if request.args(2)=='1':
                db(db.DetallePolitica.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.DetallePolitica.id==request.args(0)).update(AprobacionJefeRiesgo='T')
            if request.args(2)=='0':
                db(db.DetallePolitica.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.DetallePolitica.id==request.args(0)).update(AprobacionJefeRiesgo='F')
        if (auth.has_membership(role='riskAnalyst')):
            if request.args(2)=='1':
                db(db.DetallePolitica.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.DetallePolitica.id==request.args(0)).update(AprobacionAnalistaRiesgo='T')
            if request.args(2)=='0':
                db(db.DetallePolitica.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.DetallePolitica.id==request.args(0)).update(AprobacionAnalistaRiesgo='F')
        redirect(URL('DetallePolitica'))
    '''
    if request.args(1) == 'EvaluacionControl':
        if (auth.has_membership(role='auditManager') or auth.has_membership(role='admin')):
            if request.args(2)=='1':
                db(db.EvaluacionControl.id==request.args(0)).update(LogJefeAuditoria=signature)
                db(db.EvaluacionControl.id==request.args(0)).update(AprobacionJefeAuditoria='T')
            if request.args(2)=='0':
                db(db.EvaluacionControl.id==request.args(0)).update(LogJefeAuditoria=signature)
                db(db.EvaluacionControl.id==request.args(0)).update(AprobacionJefeAuditoria='F')
        if (auth.has_membership(role='auditAnalyst')):
            if request.args(2)=='1':
                db(db.EvaluacionControl.id==request.args(0)).update(LogAnalistaAuditoria=signature)
                db(db.EvaluacionControl.id==request.args(0)).update(AprobacionAnalistaAuditoria='T')
            if request.args(2)=='0':
                db(db.EvaluacionControl.id==request.args(0)).update(LogAnalistaAuditoria=signature)
                db(db.EvaluacionControl.id==request.args(0)).update(AprobacionAnalistaAuditoria='F')
        if (auth.has_membership(role='controlResp')):
            if request.args(2)=='1':
                db(db.EvaluacionControl.id==request.args(0)).update(LogResponsableControl=signature)
                db(db.EvaluacionControl.id==request.args(0)).update(AprobacionResponsableControl='T')
            if request.args(2)=='0':
                db(db.EvaluacionControl.id==request.args(0)).update(LogResponsableControl=signature)
                db(db.EvaluacionControl.id==request.args(0)).update(AprobacionResponsableControl='F')
        #redirect(URL('EvaluacionControl', vars=dict(keywords=parametros)))
        if request.args(3):
            redirect(URL('EvaluacionControl', vars=dict(keywords=parametros)))
        else:
            redirect(URL('EvaluacionControl'))

    if request.args(1) == 'AlcanceRevision':
        if (auth.has_membership(role='auditManager') or auth.has_membership(role='admin')):
            if request.args(2)=='1':
                db(db.AlcanceRevision.id==request.args(0)).update(LogJefeAuditoria=signature)
                db(db.AlcanceRevision.id==request.args(0)).update(AprobacionJefeAuditoria='T')
            if request.args(2)=='0':
                db(db.AlcanceRevision.id==request.args(0)).update(LogJefeAuditoria=signature)
                db(db.AlcanceRevision.id==request.args(0)).update(AprobacionJefeAuditoria='F')
        if (auth.has_membership(role='auditAnalyst')):
            if request.args(2)=='1':
                db(db.AlcanceRevision.id==request.args(0)).update(LogAnalistaAuditoria=signature)
                db(db.AlcanceRevision.id==request.args(0)).update(AprobacionAnalistaAuditoria='T')
            if request.args(2)=='0':
                db(db.AlcanceRevision.id==request.args(0)).update(LogAnalistaAuditoria=signature)
                db(db.AlcanceRevision.id==request.args(0)).update(AprobacionAnalistaAuditoria='F')
        #redirect(URL('AlcanceRevision', vars=dict(keywords=parametros)))
        if request.args(3):
            redirect(URL('AlcanceRevision', vars=dict(keywords=parametros)))
        else:
            redirect(URL('AlcanceRevision'))

    if request.args(1) == 'TipoRevision':
        if (auth.has_membership(role='auditManager') or auth.has_membership(role='admin')):
            if request.args(2)=='1':
                db(db.TipoRevision.id==request.args(0)).update(LogJefeAuditoria=signature)
                db(db.TipoRevision.id==request.args(0)).update(AprobacionJefeAuditoria='T')
            if request.args(2)=='0':
                db(db.TipoRevision.id==request.args(0)).update(LogJefeAuditoria=signature)
                db(db.TipoRevision.id==request.args(0)).update(AprobacionJefeAuditoria='F')
        if (auth.has_membership(role='auditAnalyst')):
            if request.args(2)=='1':
                db(db.TipoRevision.id==request.args(0)).update(LogAnalistaAuditoria=signature)
                db(db.TipoRevision.id==request.args(0)).update(AprobacionAnalistaAuditoria='T')
            if request.args(2)=='0':
                db(db.TipoRevision.id==request.args(0)).update(LogAnalistaAuditoria=signature)
                db(db.TipoRevision.id==request.args(0)).update(AprobacionAnalistaAuditoria='F')
        #redirect(URL('TipoRevision', vars=dict(keywords=parametros)))
        if request.args(3):
            redirect(URL('TipoRevision', vars=dict(keywords=parametros)))
        else:
            redirect(URL('TipoRevision'))

    if request.args(1) == 'TipoIncidenteSeguridad':
        if (auth.has_membership(role='riskManager') or auth.has_membership(role='admin')):
            if request.args(2)=='1':
                db(db.TipoIncidenteSeguridad.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.TipoIncidenteSeguridad.id==request.args(0)).update(AprobacionJefeRiesgo='T')
            elif request.args(2)=='0':
                db(db.TipoIncidenteSeguridad.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.TipoIncidenteSeguridad.id==request.args(0)).update(AprobacionJefeRiesgo='F')
        elif (auth.has_membership(role='riskAnalyst')):
            if request.args(2)=='1':
                db(db.TipoIncidenteSeguridad.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.TipoIncidenteSeguridad.id==request.args(0)).update(AprobacionAnalistaRiesgo='T')
            elif request.args(2)=='0':
                db(db.TipoIncidenteSeguridad.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.TipoIncidenteSeguridad.id==request.args(0)).update(AprobacionAnalistaRiesgo='F')
        #redirect(URL('TipoIncidenteSeguridad', vars=dict(keywords=parametros)))
        if request.args(3):
            redirect(URL('TipoIncidenteSeguridad', vars=dict(keywords=parametros)))
        else:
            redirect(URL('TipoIncidenteSeguridad'))

    if request.args(1) == 'ActivoTiRegion':
        if (auth.has_membership(role='riskManager') or auth.has_membership(role='admin')):
            if request.args(2)=='1':
                db(db.ActivoTiRegion.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.ActivoTiRegion.id==request.args(0)).update(AprobacionJefeRiesgo='T')
            elif request.args(2)=='0':
                db(db.ActivoTiRegion.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.ActivoTiRegion.id==request.args(0)).update(AprobacionJefeRiesgo='F')
        elif (auth.has_membership(role='riskAnalyst')):
            if request.args(2)=='1':
                db(db.ActivoTiRegion.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.ActivoTiRegion.id==request.args(0)).update(AprobacionAnalistaRiesgo='T')
            elif request.args(2)=='0':
                db(db.ActivoTiRegion.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.ActivoTiRegion.id==request.args(0)).update(AprobacionAnalistaRiesgo='F')
        #redirect(URL('ActivoTiRegion', vars=dict(keywords=parametros)))
        if request.args(3):
            redirect(URL('ActivoTiRegion', vars=dict(keywords=parametros)))
        else:
            redirect(URL('ActivoTiRegion'))

    if request.args(1) == 'ActivoTiActivoInformacion':
        if (auth.has_membership(role='riskManager') or auth.has_membership(role='admin')):
            if request.args(2)=='1':
                db(db.ActivoTiActivoInformacion.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.ActivoTiActivoInformacion.id==request.args(0)).update(AprobacionJefeRiesgo='T')
            elif request.args(2)=='0':
                db(db.ActivoTiActivoInformacion.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.ActivoTiActivoInformacion.id==request.args(0)).update(AprobacionJefeRiesgo='F')
        elif (auth.has_membership(role='riskAnalyst')):
            if request.args(2)=='1':
                db(db.ActivoTiActivoInformacion.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.ActivoTiActivoInformacion.id==request.args(0)).update(AprobacionAnalistaRiesgo='T')
            elif request.args(2)=='0':
                db(db.ActivoTiActivoInformacion.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.ActivoTiActivoInformacion.id==request.args(0)).update(AprobacionAnalistaRiesgo='F')
        #redirect(URL('ActivoTiRegion', vars=dict(keywords=parametros)))
        if request.args(3):
            redirect(URL('ActivoTiActivoInformacion', vars=dict(keywords=parametros)))
        else:
            redirect(URL('ActivoTiActivoInformacion'))

    if request.args(1) == 'IncidenteSeguridad':
        if (auth.has_membership(role='riskManager') or auth.has_membership(role='admin')):
            if request.args(2)=='1':
                db(db.IncidenteSeguridad.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.IncidenteSeguridad.id==request.args(0)).update(AprobacionJefeRiesgo='T')
            elif request.args(2)=='0':
                db(db.IncidenteSeguridad.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.IncidenteSeguridad.id==request.args(0)).update(AprobacionJefeRiesgo='F')
        elif (auth.has_membership(role='riskAnalyst')):
            if request.args(2)=='1':
                db(db.IncidenteSeguridad.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.IncidenteSeguridad.id==request.args(0)).update(AprobacionAnalistaRiesgo='T')
            elif request.args(2)=='0':
                db(db.IncidenteSeguridad.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.IncidenteSeguridad.id==request.args(0)).update(AprobacionAnalistaRiesgo='F')
        #redirect(URL('IncidenteSeguridad', vars=dict(keywords=parametros)))
        if request.args(3):
            redirect(URL('IncidenteSeguridad', vars=dict(keywords=parametros)))
        else:
            redirect(URL('IncidenteSeguridad'))

    if request.args(1) == 'ActivoTiPlataforma':
        if (auth.has_membership(role='riskManager') or auth.has_membership(role='admin')):
            if request.args(2)=='1':
                db(db.ActivoTiPlataforma.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.ActivoTiPlataforma.id==request.args(0)).update(AprobacionJefeRiesgo='T')
            elif request.args(2)=='0':
                db(db.ActivoTiPlataforma.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.ActivoTiPlataforma.id==request.args(0)).update(AprobacionJefeRiesgo='F')
        elif (auth.has_membership(role='riskAnalyst')):
            if request.args(2)=='1':
                db(db.ActivoTiPlataforma.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.ActivoTiPlataforma.id==request.args(0)).update(AprobacionAnalistaRiesgo='T')
            elif request.args(2)=='0':
                db(db.ActivoTiPlataforma.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.ActivoTiPlataforma.id==request.args(0)).update(AprobacionAnalistaRiesgo='F')
        #redirect(URL('ActivoTiPlataforma', vars=dict(keywords=parametros)))
        if request.args(3):
            redirect(URL('ActivoTiPlataforma', vars=dict(keywords=parametros)))
        else:
            redirect(URL('ActivoTiPlataforma'))

    if request.args(1) == 'ActivoTiProceso':
        if (auth.has_membership(role='riskManager') or auth.has_membership(role='admin')):
            if request.args(2)=='1':
                db(db.ActivoTiProceso.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.ActivoTiProceso.id==request.args(0)).update(AprobacionJefeRiesgo='T')
            elif request.args(2)=='0':
                db(db.ActivoTiProceso.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.ActivoTiProceso.id==request.args(0)).update(AprobacionJefeRiesgo='F')
        elif (auth.has_membership(role='riskAnalyst')):
            if request.args(2)=='1':
                db(db.ActivoTiProceso.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.ActivoTiProceso.id==request.args(0)).update(AprobacionAnalistaRiesgo='T')
            elif request.args(2)=='0':
                db(db.ActivoTiProceso.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.ActivoTiProceso.id==request.args(0)).update(AprobacionAnalistaRiesgo='F')
        #redirect(URL('ActivoTiProceso', vars=dict(keywords=parametros)))
        if request.args(3):
            redirect(URL('ActivoTiProceso', vars=dict(keywords=parametros)))
        else:
            redirect(URL('ActivoTiProceso'))

    if request.args(1) == 'ActivoInformacionRegulacion':
        if (auth.has_membership(role='riskManager') or auth.has_membership(role='admin')):
            if request.args(2)=='1':
                db(db.ActivoInformacionRegulacion.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.ActivoInformacionRegulacion.id==request.args(0)).update(AprobacionJefeRiesgo='T')
            elif request.args(2)=='0':
                db(db.ActivoInformacionRegulacion.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.ActivoInformacionRegulacion.id==request.args(0)).update(AprobacionJefeRiesgo='F')
        elif (auth.has_membership(role='riskAnalyst')):
            if request.args(2)=='1':
                db(db.ActivoInformacionRegulacion.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.ActivoInformacionRegulacion.id==request.args(0)).update(AprobacionAnalistaRiesgo='T')
            elif request.args(2)=='0':
                db(db.ActivoInformacionRegulacion.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.ActivoInformacionRegulacion.id==request.args(0)).update(AprobacionAnalistaRiesgo='F')
        #redirect(URL('ActivoInformacionRegulacion', vars=dict(keywords=parametros)))
        if request.args(3):
            redirect(URL('ActivoInformacionRegulacion', vars=dict(keywords=parametros)))
        else:
            redirect(URL('ActivoInformacionRegulacion'))

    if request.args(1) == 'ProcesoActivoInformacion':
        if (auth.has_membership(role='riskManager') or auth.has_membership(role='admin')):
            if request.args(2)=='1':
                db(db.ProcesoActivoInformacion.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.ProcesoActivoInformacion.id==request.args(0)).update(AprobacionJefeRiesgo='T')
            elif request.args(2)=='0':
                db(db.ProcesoActivoInformacion.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.ProcesoActivoInformacion.id==request.args(0)).update(AprobacionJefeRiesgo='F')
        elif (auth.has_membership(role='riskAnalyst')):
            if request.args(2)=='1':
                db(db.ProcesoActivoInformacion.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.ProcesoActivoInformacion.id==request.args(0)).update(AprobacionAnalistaRiesgo='T')
            elif request.args(2)=='0':
                db(db.ProcesoActivoInformacion.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.ProcesoActivoInformacion.id==request.args(0)).update(AprobacionAnalistaRiesgo='F')
        if request.args(3):
            redirect(URL('ProcesoActivoInformacion', vars=dict(keywords=parametros)))
        else:
            redirect(URL('ProcesoActivoInformacion'))
    '''
    if request.args(1) == 'IconoNodo':
        if (auth.has_membership(role='riskManager') or auth.has_membership(role='admin')):
            if request.args(2)=='1':
                db(db.IconoNodo.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.IconoNodo.id==request.args(0)).update(AprobacionJefeRiesgo='T')
            elif request.args(2)=='0':
                db(db.IconoNodo.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.IconoNodo.id==request.args(0)).update(AprobacionJefeRiesgo='F')
        elif (auth.has_membership(role='riskAnalyst')):
            if request.args(2)=='1':
                db(db.IconoNodo.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.IconoNodo.id==request.args(0)).update(AprobacionAnalistaRiesgo='T')
            elif request.args(2)=='0':
                db(db.IconoNodo.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.IconoNodo.id==request.args(0)).update(AprobacionAnalistaRiesgo='F')
        #redirect(URL('IconoNodo', vars=dict(keywords=parametros)))
        if request.args(3):
            redirect(URL('IconoNodo', vars=dict(keywords=parametros)))
        else:
            redirect(URL('IconoNodo'))

    if request.args(1) == 'Nodo':
        if (auth.has_membership(role='riskManager') or auth.has_membership(role='admin')):
            if request.args(2)=='1':
                db(db.Nodo.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.Nodo.id==request.args(0)).update(AprobacionJefeRiesgo='T')
            elif request.args(2)=='0':
                db(db.Nodo.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.Nodo.id==request.args(0)).update(AprobacionJefeRiesgo='F')
        elif (auth.has_membership(role='riskAnalyst')):
            if request.args(2)=='1':
                db(db.Nodo.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.Nodo.id==request.args(0)).update(AprobacionAnalistaRiesgo='T')
            elif request.args(2)=='0':
                db(db.Nodo.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.Nodo.id==request.args(0)).update(AprobacionAnalistaRiesgo='F')
        #redirect(URL('Nodo', vars=dict(keywords=parametros)))
        if request.args(3):
            redirect(URL('Nodo', vars=dict(keywords=parametros)))
        else:
            redirect(URL('Nodo'))

    if request.args(1) == 'Arista':
        if (auth.has_membership(role='riskManager') or auth.has_membership(role='admin')):
            if request.args(2)=='1':
                db(db.Arista.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.Arista.id==request.args(0)).update(AprobacionJefeRiesgo='T')
            elif request.args(2)=='0':
                db(db.Arista.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.Arista.id==request.args(0)).update(AprobacionJefeRiesgo='F')
        elif (auth.has_membership(role='riskAnalyst')):
            if request.args(2)=='1':
                db(db.Arista.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.Arista.id==request.args(0)).update(AprobacionAnalistaRiesgo='T')
            elif request.args(2)=='0':
                db(db.Arista.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.Arista.id==request.args(0)).update(AprobacionAnalistaRiesgo='F')
        #redirect(URL('Arista', vars=dict(keywords=parametros)))
        if request.args(3):
            redirect(URL('Arista', vars=dict(keywords=parametros)))
        else:
            redirect(URL('Arista'))

    if request.args(1) == 'ArquitecturaPregunta':
        if (auth.has_membership(role='riskManager') or auth.has_membership(role='admin')):
            if request.args(2)=='1':
                db(db.ArquitecturaPregunta.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.ArquitecturaPregunta.id==request.args(0)).update(AprobacionJefeRiesgo='T')
            elif request.args(2)=='0':
                db(db.ArquitecturaPregunta.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.ArquitecturaPregunta.id==request.args(0)).update(AprobacionJefeRiesgo='F')
        elif (auth.has_membership(role='riskAnalyst')):
            if request.args(2)=='1':
                db(db.ArquitecturaPregunta.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.ArquitecturaPregunta.id==request.args(0)).update(AprobacionAnalistaRiesgo='T')
            elif request.args(2)=='0':
                db(db.ArquitecturaPregunta.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.ArquitecturaPregunta.id==request.args(0)).update(AprobacionAnalistaRiesgo='F')
        #redirect(URL('ArquitecturaPregunta', vars=dict(keywords=parametros)))
        if request.args(3):
            redirect(URL('ArquitecturaPregunta', vars=dict(keywords=parametros)))
        else:
            redirect(URL('ArquitecturaPregunta'))

    if request.args(1) == 'ArquitecturaSistema':
        if (auth.has_membership(role='riskManager') or auth.has_membership(role='admin')):
            if request.args(2)=='1':
                db(db.ArquitecturaSistema.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.ArquitecturaSistema.id==request.args(0)).update(AprobacionJefeRiesgo='T')
            elif request.args(2)=='0':
                db(db.ArquitecturaSistema.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.ArquitecturaSistema.id==request.args(0)).update(AprobacionJefeRiesgo='F')
        elif (auth.has_membership(role='riskAnalyst')):
            if request.args(2)=='1':
                db(db.ArquitecturaSistema.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.ArquitecturaSistema.id==request.args(0)).update(AprobacionAnalistaRiesgo='T')
            elif request.args(2)=='0':
                db(db.ArquitecturaSistema.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.ArquitecturaSistema.id==request.args(0)).update(AprobacionAnalistaRiesgo='F')
        #redirect(URL('ArquitecturaSistema', vars=dict(keywords=parametros)))
        if request.args(3):
            redirect(URL('ArquitecturaSistema', vars=dict(keywords=parametros)))
        else:
            redirect(URL('ArquitecturaSistema'))

    if request.args(1) == 'Auditoria':
        if (auth.has_membership(role='auditManager') or auth.has_membership(role='admin')):
            if request.args(2)=='1':
                db(db.Auditoria.id==request.args(0)).update(LogJefeAuditoria=signature)
                db(db.Auditoria.id==request.args(0)).update(AprobacionJefeAuditoria='T')
            if request.args(2)=='0':
                db(db.Auditoria.id==request.args(0)).update(LogJefeAuditoria=signature)
                db(db.Auditoria.id==request.args(0)).update(AprobacionJefeAuditoria='F')
        if (auth.has_membership(role='auditAnalyst')):
            if request.args(2)=='1':
                db(db.Auditoria.id==request.args(0)).update(LogAnalistaAuditoria=signature)
                db(db.Auditoria.id==request.args(0)).update(AprobacionAnalistaAuditoria='T')
            if request.args(2)=='0':
                db(db.Auditoria.id==request.args(0)).update(LogAnalistaAuditoria=signature)
                db(db.Auditoria.id==request.args(0)).update(AprobacionAnalistaAuditoria='F')
        if (auth.has_membership(role='controlResp')):
            if request.args(2)=='1':
                db(db.Auditoria.id==request.args(0)).update(LogResponsableControl=signature)
                db(db.Auditoria.id==request.args(0)).update(AprobacionResponsableControl='T')
            if request.args(2)=='0':
                db(db.Auditoria.id==request.args(0)).update(LogResponsableControl=signature)
                db(db.Auditoria.id==request.args(0)).update(AprobacionResponsableControl='F')
        #redirect(URL('Auditoria', vars=dict(keywords=parametros)))
        if request.args(3):
            redirect(URL('Auditoria', vars=dict(keywords=parametros)))
        else:
            redirect(URL('Auditoria'))
    '''
    if request.args(1) == 'BenchVersion':
        if (auth.has_membership(role='riskManager') or auth.has_membership(role='admin')):
            if request.args(2)=='1':
                db(db.BenchVersion.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.BenchVersion.id==request.args(0)).update(AprobacionJefeRiesgo='T')
            elif request.args(2)=='0':
                db(db.BenchVersion.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.BenchVersion.id==request.args(0)).update(AprobacionJefeRiesgo='F')
        elif (auth.has_membership(role='riskAnalyst')):
            if request.args(2)=='1':
                db(db.BenchVersion.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.BenchVersion.id==request.args(0)).update(AprobacionAnalistaRiesgo='T')
            elif request.args(2)=='0':
                db(db.BenchVersion.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.BenchVersion.id==request.args(0)).update(AprobacionAnalistaRiesgo='F')
        #redirect(URL('tool', 'BenchVersion', vars=dict(keywords=parametros)))
        if request.args(3):
            redirect(URL('default', 'BenchVersion', vars=dict(keywords=parametros)))
        else:
            redirect(URL('default', 'BenchVersion'))

    if request.args(1) == 'PruebaWeb':
        if (auth.has_membership(role='riskManager') or auth.has_membership(role='admin')):
            if request.args(2)=='1':
                db(db.PruebaWeb.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.PruebaWeb.id==request.args(0)).update(AprobacionJefeRiesgo='T')
            elif request.args(2)=='0':
                db(db.PruebaWeb.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.PruebaWeb.id==request.args(0)).update(AprobacionJefeRiesgo='F')
        elif (auth.has_membership(role='riskAnalyst')):
            if request.args(2)=='1':
                db(db.PruebaWeb.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.PruebaWeb.id==request.args(0)).update(AprobacionAnalistaRiesgo='T')
            elif request.args(2)=='0':
                db(db.PruebaWeb.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.PruebaWeb.id==request.args(0)).update(AprobacionAnalistaRiesgo='F')
        #redirect(URL('tool', 'BenchVersion', vars=dict(keywords=parametros)))
        if request.args(3):
            redirect(URL('default', 'PruebaWeb', vars=dict(keywords=parametros)))
        else:
            redirect(URL('default', 'PruebaWeb'))

    if request.args(1) == 'BenchObjetivoControl':
        if (auth.has_membership(role='riskManager') or auth.has_membership(role='admin')):
            if request.args(2)=='1':
                db(db.BenchObjetivoControl.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.BenchObjetivoControl.id==request.args(0)).update(AprobacionJefeRiesgo='T')
            elif request.args(2)=='0':
                db(db.BenchObjetivoControl.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.BenchObjetivoControl.id==request.args(0)).update(AprobacionJefeRiesgo='F')
        elif (auth.has_membership(role='riskAnalyst')):
            if request.args(2)=='1':
                db(db.BenchObjetivoControl.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.BenchObjetivoControl.id==request.args(0)).update(AprobacionAnalistaRiesgo='T')
            elif request.args(2)=='0':
                db(db.BenchObjetivoControl.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.BenchObjetivoControl.id==request.args(0)).update(AprobacionAnalistaRiesgo='F')
        #redirect(URL('tool', 'BenchObjetivoControl', vars=dict(keywords=parametros)))
        if request.args(3):
            redirect(URL('default', 'BenchObjetivoControl', vars=dict(keywords=parametros)))
        else:
            redirect(URL('default', 'BenchObjetivoControl'))
        
    if request.args(1) == 'BenchControl':
        if (auth.has_membership(role='riskManager') or auth.has_membership(role='admin')):
            if request.args(2)=='1':
                db(db.BenchControl.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.BenchControl.id==request.args(0)).update(AprobacionJefeRiesgo='T')
            elif request.args(2)=='0':
                db(db.BenchControl.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.BenchControl.id==request.args(0)).update(AprobacionJefeRiesgo='F')
        elif (auth.has_membership(role='riskAnalyst')):
            if request.args(2)=='1':
                db(db.BenchControl.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.BenchControl.id==request.args(0)).update(AprobacionAnalistaRiesgo='T')
            elif request.args(2)=='0':
                db(db.BenchControl.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.BenchControl.id==request.args(0)).update(AprobacionAnalistaRiesgo='F')
        #redirect(URL('tool', 'BenchControl', vars=dict(keywords=parametros)))
        if request.args(3):
            redirect(URL('default', 'BenchControl', vars=dict(keywords=parametros)))
        else:
            redirect(URL('default', 'BenchControl'))
        
    if request.args(1) == 'BenchEvaluacion':
        if (auth.has_membership(role='riskManager') or auth.has_membership(role='admin')):
            if request.args(2)=='1':
                db(db.BenchEvaluacion.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.BenchEvaluacion.id==request.args(0)).update(AprobacionJefeRiesgo='T')
            elif request.args(2)=='0':
                db(db.BenchEvaluacion.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.BenchEvaluacion.id==request.args(0)).update(AprobacionJefeRiesgo='F')
        elif (auth.has_membership(role='riskAnalyst')):
            if request.args(2)=='1':
                db(db.BenchEvaluacion.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.BenchEvaluacion.id==request.args(0)).update(AprobacionAnalistaRiesgo='T')
            elif request.args(2)=='0':
                db(db.BenchEvaluacion.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.BenchEvaluacion.id==request.args(0)).update(AprobacionAnalistaRiesgo='F')
        #redirect(URL('tool', 'BenchEvaluacion', vars=dict(keywords=parametros)))
        if request.args(3):
            redirect(URL('default', 'BenchEvaluacion', vars=dict(keywords=parametros)))
        else:
            redirect(URL('default', 'BenchEvaluacion'))

    if request.args(1) == 'TestSeguridad':
        if (auth.has_membership(role='riskManager') or auth.has_membership(role='admin')):
            if request.args(2)=='1':
                db(db.TestSeguridad.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.TestSeguridad.id==request.args(0)).update(AprobacionJefeRiesgo='T')
            elif request.args(2)=='0':
                db(db.TestSeguridad.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.TestSeguridad.id==request.args(0)).update(AprobacionJefeRiesgo='F')
        elif (auth.has_membership(role='riskAnalyst')):
            if request.args(2)=='1':
                db(db.TestSeguridad.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.TestSeguridad.id==request.args(0)).update(AprobacionAnalistaRiesgo='T')
            elif request.args(2)=='0':
                db(db.TestSeguridad.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.TestSeguridad.id==request.args(0)).update(AprobacionAnalistaRiesgo='F')
        if request.args(3):
            redirect(URL('default', 'PruebaSeguridad', vars=dict(keywords=parametros)))
        else:
            redirect(URL('default', 'PruebaSeguridad'))

    if request.args(1) == 'AlcanceControl':
        if (auth.has_membership(role='riskManager') or auth.has_membership(role='admin')):
            if request.args(2)=='1':
                db(db.AlcanceControl.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.AlcanceControl.id==request.args(0)).update(AprobacionJefeRiesgo='T')
            elif request.args(2)=='0':
                db(db.AlcanceControl.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.AlcanceControl.id==request.args(0)).update(AprobacionJefeRiesgo='F')
        elif (auth.has_membership(role='riskAnalyst')):
            if request.args(2)=='1':
                db(db.AlcanceControl.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.AlcanceControl.id==request.args(0)).update(AprobacionAnalistaRiesgo='T')
            elif request.args(2)=='0':
                db(db.AlcanceControl.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.AlcanceControl.id==request.args(0)).update(AprobacionAnalistaRiesgo='F')
        #redirect(URL('tool', 'BenchEvaluacion', vars=dict(keywords=parametros)))
        if request.args(3):
            redirect(URL('default', 'AlcanceControl', vars=dict(keywords=parametros)))
        else:
            redirect(URL('default', 'AlcanceControl'))
    '''
    if request.args(1) == 'ValorMetricaSeguridadTi':
        if (auth.has_membership(role='riskManager') or auth.has_membership(role='admin')):
            if request.args(2)=='1':
                db(db.ValorMetricaSeguridadTi.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.ValorMetricaSeguridadTi.id==request.args(0)).update(AprobacionJefeRiesgo='T')
            elif request.args(2)=='0':
                db(db.ValorMetricaSeguridadTi.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.ValorMetricaSeguridadTi.id==request.args(0)).update(AprobacionJefeRiesgo='F')
        elif (auth.has_membership(role='riskAnalyst')):
            if request.args(2)=='1':
                db(db.ValorMetricaSeguridadTi.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.ValorMetricaSeguridadTi.id==request.args(0)).update(AprobacionAnalistaRiesgo='T')
            elif request.args(2)=='0':
                db(db.ValorMetricaSeguridadTi.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.ValorMetricaSeguridadTi.id==request.args(0)).update(AprobacionAnalistaRiesgo='F')
        #redirect(URL('tool', 'BenchEvaluacion', vars=dict(keywords=parametros)))
        if request.args(3):
            redirect(URL('default', 'ValorMetricaSeguridadTi', vars=dict(keywords=parametros)))
        else:
            redirect(URL('default', 'ValorMetricaSeguridadTi'))
    '''
    if request.args(1) == 'GrupoMetrica':
        if (auth.has_membership(role='riskManager') or auth.has_membership(role='admin')):
            if request.args(2)=='1':
                db(db.GrupoMetrica.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.GrupoMetrica.id==request.args(0)).update(AprobacionJefeRiesgo='T')
            elif request.args(2)=='0':
                db(db.GrupoMetrica.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.GrupoMetrica.id==request.args(0)).update(AprobacionJefeRiesgo='F')
        elif (auth.has_membership(role='riskAnalyst')):
            if request.args(2)=='1':
                db(db.GrupoMetrica.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.GrupoMetrica.id==request.args(0)).update(AprobacionAnalistaRiesgo='T')
            elif request.args(2)=='0':
                db(db.GrupoMetrica.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.GrupoMetrica.id==request.args(0)).update(AprobacionAnalistaRiesgo='F')
        if request.args(3):
            redirect(URL('default', 'GrupoMetrica', vars=dict(keywords=parametros)))
        else:
            redirect(URL('default', 'GrupoMetrica'))
    if request.args(1) == 'Metrica':
        if (auth.has_membership(role='riskManager') or auth.has_membership(role='admin')):
            if request.args(2)=='1':
                db(db.Metrica.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.Metrica.id==request.args(0)).update(AprobacionJefeRiesgo='T')
            elif request.args(2)=='0':
                db(db.Metrica.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.Metrica.id==request.args(0)).update(AprobacionJefeRiesgo='F')
        elif (auth.has_membership(role='riskAnalyst')):
            if request.args(2)=='1':
                db(db.Metrica.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.Metrica.id==request.args(0)).update(AprobacionAnalistaRiesgo='T')
            elif request.args(2)=='0':
                db(db.Metrica.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.Metrica.id==request.args(0)).update(AprobacionAnalistaRiesgo='F')
        if request.args(3):
            redirect(URL('default', 'Metrica', vars=dict(keywords=parametros)))
        else:
            redirect(URL('default', 'Metrica'))
    if request.args(1) == 'ValorMetrica':
        if (auth.has_membership(role='riskManager') or auth.has_membership(role='admin')):
            if request.args(2)=='1':
                db(db.ValorMetrica.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.ValorMetrica.id==request.args(0)).update(AprobacionJefeRiesgo='T')
            elif request.args(2)=='0':
                db(db.ValorMetrica.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.ValorMetrica.id==request.args(0)).update(AprobacionJefeRiesgo='F')
        elif (auth.has_membership(role='riskAnalyst')):
            if request.args(2)=='1':
                db(db.ValorMetrica.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.ValorMetrica.id==request.args(0)).update(AprobacionAnalistaRiesgo='T')
            elif request.args(2)=='0':
                db(db.ValorMetrica.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.ValorMetrica.id==request.args(0)).update(AprobacionAnalistaRiesgo='F')
        if request.args(3):
            redirect(URL('default', 'ValorMetrica', vars=dict(keywords=parametros)))
        else:
            redirect(URL('default', 'ValorMetrica'))
    if request.args(1) == 'ValorMetricaSeguridadTi':
        if (auth.has_membership(role='riskManager') or auth.has_membership(role='admin')):
            if request.args(2)=='1':
                db(db.ValorMetricaSeguridadTi.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.ValorMetricaSeguridadTi.id==request.args(0)).update(AprobacionJefeRiesgo='T')
            elif request.args(2)=='0':
                db(db.ValorMetricaSeguridadTi.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.ValorMetricaSeguridadTi.id==request.args(0)).update(AprobacionJefeRiesgo='F')
        elif (auth.has_membership(role='riskAnalyst')):
            if request.args(2)=='1':
                db(db.ValorMetricaSeguridadTi.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.ValorMetricaSeguridadTi.id==request.args(0)).update(AprobacionAnalistaRiesgo='T')
            elif request.args(2)=='0':
                db(db.ValorMetricaSeguridadTi.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.ValorMetricaSeguridadTi.id==request.args(0)).update(AprobacionAnalistaRiesgo='F')
        if request.args(3):
            redirect(URL('default', 'ValorMetricaSeguridadTi', vars=dict(keywords=parametros)))
        else:
            redirect(URL('default', 'ValorMetricaSeguridadTi'))

    if request.args(1) == 'ControlCvss':
        if (auth.has_membership(role='riskManager') or auth.has_membership(role='admin')):
            if request.args(2)=='1':
                db(db.ControlCvss.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.ControlCvss.id==request.args(0)).update(AprobacionJefeRiesgo='T')
            elif request.args(2)=='0':
                db(db.ControlCvss.id==request.args(0)).update(LogJefeRiesgo=signature)
                db(db.ControlCvss.id==request.args(0)).update(AprobacionJefeRiesgo='F')
        elif (auth.has_membership(role='riskAnalyst')):
            if request.args(2)=='1':
                db(db.ControlCvss.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.ControlCvss.id==request.args(0)).update(AprobacionAnalistaRiesgo='T')
            elif request.args(2)=='0':
                db(db.ControlCvss.id==request.args(0)).update(LogAnalistaRiesgo=signature)
                db(db.ControlCvss.id==request.args(0)).update(AprobacionAnalistaRiesgo='F')
        if request.args(3):
            redirect(URL('default', 'ControlCvss', vars=dict(keywords=parametros)))
        else:
            redirect(URL('default', 'ControlCvss'))

@auth.requires_login()
def ActualizaAprobacion(Tabla):
    if 'edit' in request.args:
        if Tabla=='TipoObjetivo':
            db(db.TipoObjetivo.id==request.args[len(request.args)-1]).update(AprobacionJefeRiesgo='F')
            db(db.TipoObjetivo.id==request.args[len(request.args)-1]).update(AprobacionAnalistaRiesgo='F')
        if Tabla=='ClasificacionInformacion':
            db(db.ClasificacionInformacion.id==request.args[len(request.args)-1]).update(AprobacionJefeRiesgo='F')
            db(db.ClasificacionInformacion.id==request.args[len(request.args)-1]).update(AprobacionAnalistaRiesgo='F')
        if Tabla=='TipoDato':
            db(db.TipoDato.id==request.args[len(request.args)-1]).update(AprobacionJefeRiesgo='F')
            db(db.TipoDato.id==request.args[len(request.args)-1]).update(AprobacionAnalistaRiesgo='F')
        if Tabla=='ClasificacionRiesgo':
            db(db.ClasificacionRiesgo.id==request.args[len(request.args)-1]).update(AprobacionJefeRiesgo='F')
            db(db.ClasificacionRiesgo.id==request.args[len(request.args)-1]).update(AprobacionAnalistaRiesgo='F')
        if Tabla=='AnalisisRiesgoObjetivoOrganizacion':
            db(db.AnalisisRiesgoObjetivoOrganizacion.id==request.args[len(request.args)-1]).update(AprobacionJefeRiesgo='F')
            db(db.AnalisisRiesgoObjetivoOrganizacion.id==request.args[len(request.args)-1]).update(AprobacionAnalistaRiesgo='F')
        if Tabla=='AnalisisRiesgoClasificacionRiesgo':
            db(db.AnalisisRiesgoClasificacionRiesgo.id==request.args[len(request.args)-1]).update(AprobacionJefeRiesgo='F')
            db(db.AnalisisRiesgoClasificacionRiesgo.id==request.args[len(request.args)-1]).update(AprobacionAnalistaRiesgo='F')
        if Tabla=='TratamientoRiesgoAnalisisRiesgo':
            db(db.TratamientoRiesgoAnalisisRiesgo.id==request.args[len(request.args)-1]).update(AprobacionJefeRiesgo='F')
            db(db.TratamientoRiesgoAnalisisRiesgo.id==request.args[len(request.args)-1]).update(AprobacionAnalistaRiesgo='F')
        if Tabla=='TipoTratamientoRiesgo':
            db(db.TipoTratamientoRiesgo.id==request.args[len(request.args)-1]).update(AprobacionJefeRiesgo='F')
            db(db.TipoTratamientoRiesgo.id==request.args[len(request.args)-1]).update(AprobacionAnalistaRiesgo='F')
        if Tabla=='TipoVulnerabilidadAnalisisRiesgo':
            db(db.TipoVulnerabilidadAnalisisRiesgo.id==request.args[len(request.args)-1]).update(AprobacionJefeRiesgo='F')
            db(db.TipoVulnerabilidadAnalisisRiesgo.id==request.args[len(request.args)-1]).update(AprobacionAnalistaRiesgo='F')
        if Tabla=='TipoControl':
            db(db.TipoControl.id==request.args[len(request.args)-1]).update(AprobacionJefeRiesgo='F')
            db(db.TipoControl.id==request.args[len(request.args)-1]).update(AprobacionAnalistaRiesgo='F')
        if Tabla=='GrupoControl':
            db(db.GrupoControl.id==request.args[len(request.args)-1]).update(AprobacionJefeRiesgo='F')
            db(db.GrupoControl.id==request.args[len(request.args)-1]).update(AprobacionAnalistaRiesgo='F')
        if Tabla=='Region':
            db(db.Region.id==request.args[len(request.args)-1]).update(AprobacionJefeRiesgo='F')
            db(db.Region.id==request.args[len(request.args)-1]).update(AprobacionAnalistaRiesgo='F')
        if Tabla=='RegionPolitica':
            db(db.RegionPolitica.id==request.args[len(request.args)-1]).update(AprobacionJefeRiesgo='F')
            db(db.RegionPolitica.id==request.args[len(request.args)-1]).update(AprobacionAnalistaRiesgo='F')
        if Tabla=='ClasificacionControl':
            db(db.ClasificacionControl.id==request.args[len(request.args)-1]).update(AprobacionJefeRiesgo='F')
            db(db.ClasificacionControl.id==request.args[len(request.args)-1]).update(AprobacionAnalistaRiesgo='F')
        if Tabla=='CatalogoControl':
            db(db.CatalogoControl.id==request.args[len(request.args)-1]).update(AprobacionJefeRiesgo='F')
            db(db.CatalogoControl.id==request.args[len(request.args)-1]).update(AprobacionAnalistaRiesgo='F')
        if Tabla=='ObjetivoControl':
            db(db.ObjetivoControl.id==request.args[len(request.args)-1]).update(AprobacionJefeRiesgo='F')
            db(db.ObjetivoControl.id==request.args[len(request.args)-1]).update(AprobacionAnalistaRiesgo='F')
        if Tabla=='CatalogoControlBenchControl':
            db(db.CatalogoControlObjetivoControl.id==request.args[len(request.args)-1]).update(AprobacionJefeRiesgo='F')
            db(db.CatalogoControlObjetivoControl.id==request.args[len(request.args)-1]).update(AprobacionAnalistaRiesgo='F')
        if Tabla=='DetallePoliticaBenchControl':
            db(db.DetallePoliticaBenchControl.id==request.args[len(request.args)-1]).update(AprobacionJefeRiesgo='F')
            db(db.DetallePoliticaBenchControl.id==request.args[len(request.args)-1]).update(AprobacionAnalistaRiesgo='F')
        if Tabla=='Region':
            db(db.Region.id==request.args[len(request.args)-1]).update(AprobacionJefeRiesgo='F')
            db(db.Region.id==request.args[len(request.args)-1]).update(AprobacionAnalistaRiesgo='F')
        if Tabla=='ProcesoRegion':
            db(db.ProcesoRegion.id==request.args[len(request.args)-1]).update(AprobacionJefeRiesgo='F')
            db(db.ProcesoRegion.id==request.args[len(request.args)-1]).update(AprobacionAnalistaRiesgo='F')
        if Tabla=='CicloNegocio':
            db(db.CicloNegocio.id==request.args[len(request.args)-1]).update(AprobacionJefeRiesgo='F')
            db(db.CicloNegocio.id==request.args[len(request.args)-1]).update(AprobacionAnalistaRiesgo='F')
        if Tabla=='TipoProceso':
            db(db.TipoProceso.id==request.args[len(request.args)-1]).update(AprobacionJefeRiesgo='F')
            db(db.TipoProceso.id==request.args[len(request.args)-1]).update(AprobacionAnalistaRiesgo='F')
        if Tabla=='MacroProceso':
            db(db.MacroProceso.id==request.args[len(request.args)-1]).update(AprobacionJefeRiesgo='F')
            db(db.MacroProceso.id==request.args[len(request.args)-1]).update(AprobacionAnalistaRiesgo='F')
        if Tabla=='ProcesoCicloNegocio':
            db(db.ProcesoCicloNegocio.id==request.args[len(request.args)-1]).update(AprobacionJefeRiesgo='F')
            db(db.ProcesoCicloNegocio.id==request.args[len(request.args)-1]).update(AprobacionAnalistaRiesgo='F')
        if Tabla=='ProcesoTipoProceso':
            db(db.ProcesoTipoProceso.id==request.args[len(request.args)-1]).update(AprobacionJefeRiesgo='F')
            db(db.ProcesoTipoProceso.id==request.args[len(request.args)-1]).update(AprobacionAnalistaRiesgo='F')
        if Tabla=='ProcesoMacroProceso':
            db(db.ProcesoMacroProceso.id==request.args[len(request.args)-1]).update(AprobacionJefeRiesgo='F')
            db(db.ProcesoMacroProceso.id==request.args[len(request.args)-1]).update(AprobacionAnalistaRiesgo='F')
        if Tabla=='ProcesoPolitica':
            db(db.ProcesoPolitica.id==request.args[len(request.args)-1]).update(AprobacionJefeRiesgo='F')
            db(db.ProcesoPolitica.id==request.args[len(request.args)-1]).update(AprobacionAnalistaRiesgo='F')
        if Tabla=='Direccion':
            db(db.Direccion.id==request.args[len(request.args)-1]).update(AprobacionJefeRiesgo='F')
            db(db.Direccion.id==request.args[len(request.args)-1]).update(AprobacionAnalistaRiesgo='F')
        if Tabla=='Proceso':
            db(db.Proceso.id==request.args[len(request.args)-1]).update(AprobacionJefeRiesgo='F')
            db(db.Proceso.id==request.args[len(request.args)-1]).update(AprobacionAnalistaRiesgo='F')
        if Tabla=='NivelMadurez':
            db(db.NivelMadurez.id==request.args[len(request.args)-1]).update(AprobacionJefeRiesgo='F')
            db(db.NivelMadurez.id==request.args[len(request.args)-1]).update(AprobacionAnalistaRiesgo='F')
        if Tabla=='CriterioImpacto':
            db(db.CriterioImpacto.id==request.args[len(request.args)-1]).update(AprobacionJefeRiesgo='F')
        if Tabla=='CriterioProbabilidad':
            db(db.CriterioProbabilidad.id==request.args[len(request.args)-1]).update(AprobacionJefeRiesgo='F')
        if Tabla=='CriterioRiesgo':
            db(db.CriterioRiesgo.id==request.args[len(request.args)-1]).update(AprobacionJefeRiesgo='F')
        if Tabla=='ObjetivoOrganizacion':
            db(db.ObjetivoOrganizacion.id==request.args[len(request.args)-1]).update(AprobacionJefeRiesgo='F')
        if Tabla=='Organizacion':
            db(db.Organizacion.id==request.args[len(request.args)-1]).update(AprobacionJefeRiesgo='F')
        if Tabla=='AmbienteControl':
            db(db.AmbienteControl.id==request.args[len(request.args)-1]).update(AprobacionJefeRiesgo='F')
            db(db.AmbienteControl.id==request.args[len(request.args)-1]).update(AprobacionAnalistaRiesgo='F')
        if Tabla=='ActivoInformacion':
            db(db.ActivoInformacion.id==request.args[len(request.args)-1]).update(AprobacionJefeRiesgo='F')
            db(db.ActivoInformacion.id==request.args[len(request.args)-1]).update(AprobacionAnalistaRiesgo='F')
        if Tabla=='RolResponsabilidad':
            db(db.RolResponsabilidad.id==request.args[len(request.args)-1]).update(AprobacionJefeRiesgo='F')
            db(db.RolResponsabilidad.id==request.args[len(request.args)-1]).update(AprobacionAnalistaRiesgo='F')
        if Tabla=='AnalisisRiesgo':
            db(db.AnalisisRiesgo.id==request.args[len(request.args)-1]).update(AprobacionJefeRiesgo='F')
            db(db.AnalisisRiesgo.id==request.args[len(request.args)-1]).update(AprobacionAnalistaRiesgo='F')
            db(db.AnalisisRiesgo.id==request.args[len(request.args)-1]).update(AprobacionDuenoRiesgo='F')
        if Tabla=='TratamientoRiesgo':
            if (auth.has_membership(role='admin') or auth.has_membership(role='riskManager') or auth.has_membership(role='riskAnalyst')):
                db(db.TratamientoRiesgo.id==request.args[len(request.args)-1]).update(AprobacionJefeRiesgo='F')
                db(db.TratamientoRiesgo.id==request.args[len(request.args)-1]).update(AprobacionAnalistaRiesgo='F')
                db(db.TratamientoRiesgo.id==request.args[len(request.args)-1]).update(AprobacionResponsableControl='F')
            elif (auth.has_membership(role='controlResp')):
                db(db.TratamientoRiesgo.id==request.args[len(request.args)-1]).update(AprobacionResponsableControl='F')
        if Tabla=='CatalogoPolitica':
            db(db.CatalogoPolitica.id==request.args[len(request.args)-1]).update(AprobacionJefeRiesgo='F')
            db(db.CatalogoPolitica.id==request.args[len(request.args)-1]).update(AprobacionAnalistaRiesgo='F')
        if Tabla=='DetallePolitica':
            db(db.DetallePolitica.id==request.args[len(request.args)-1]).update(AprobacionJefeRiesgo='F')
            db(db.DetallePolitica.id==request.args[len(request.args)-1]).update(AprobacionAnalistaRiesgo='F')
        if Tabla=='RegulacionDato':
            db(db.RegulacionDato.id==request.args[len(request.args)-1]).update(AprobacionJefeRiesgo='F')
            db(db.RegulacionDato.id==request.args[len(request.args)-1]).update(AprobacionAnalistaRiesgo='F')
        if Tabla=='RegulacionPolitica':
            db(db.RegulacionPolitica.id==request.args[len(request.args)-1]).update(AprobacionJefeRiesgo='F')
            db(db.RegulacionPolitica.id==request.args[len(request.args)-1]).update(AprobacionAnalistaRiesgo='F')
        if Tabla=='Metrica':
            db(db.Metrica.id==request.args[len(request.args)-1]).update(AprobacionJefeRiesgo='F')
            db(db.Metrica.id==request.args[len(request.args)-1]).update(AprobacionAnalistaRiesgo='F')
        if Tabla=='GrupoMetrica':
            db(db.GrupoMetrica.id==request.args[len(request.args)-1]).update(AprobacionJefeRiesgo='F')
            db(db.GrupoMetrica.id==request.args[len(request.args)-1]).update(AprobacionAnalistaRiesgo='F')
        if Tabla=='ValorMetrica':
            db(db.ValorMetrica.id==request.args[len(request.args)-1]).update(AprobacionJefeRiesgo='F')
            db(db.ValorMetrica.id==request.args[len(request.args)-1]).update(AprobacionAnalistaRiesgo='F')
        if Tabla=='ControlCvss':
            db(db.ControlCvss.id==request.args[len(request.args)-1]).update(AprobacionJefeRiesgo='F')
            db(db.ControlCvss.id==request.args[len(request.args)-1]).update(AprobacionAnalistaRiesgo='F')
        if Tabla=='TipoVulnerabilidad':
            db(db.TipoVulnerabilidad.id==request.args[len(request.args)-1]).update(AprobacionJefeRiesgo='F')
            db(db.TipoVulnerabilidad.id==request.args[len(request.args)-1]).update(AprobacionAnalistaRiesgo='F')
        if Tabla=='TipoCapaSistema':
            db(db.TipoCapaSistema.id==request.args[len(request.args)-1]).update(AprobacionJefeRiesgo='F')
            db(db.TipoCapaSistema.id==request.args[len(request.args)-1]).update(AprobacionAnalistaRiesgo='F')
        if Tabla=='Plataforma':
            db(db.Plataforma.id==request.args[len(request.args)-1]).update(AprobacionJefeAuditoria='F')
            db(db.Plataforma.id==request.args[len(request.args)-1]).update(AprobacionAnalistaAuditoria='F')
        if Tabla=='ActivoTi':
            db(db.ActivoTi.id==request.args[len(request.args)-1]).update(AprobacionJefeRiesgo='F')
            db(db.ActivoTi.id==request.args[len(request.args)-1]).update(AprobacionAnalistaRiesgo='F')
        if Tabla=='TipoCumplimiento':
            db(db.TipoCumplimiento.id==request.args[len(request.args)-1]).update(AprobacionJefeAuditoria='F')
            db(db.TipoCumplimiento.id==request.args[len(request.args)-1]).update(AprobacionAnalistaAuditoria='F')
        if Tabla=='SeguridadTi':
            db(db.SeguridadTi.id==request.args[len(request.args)-1]).update(AprobacionJefeAuditoria='F')
            db(db.SeguridadTi.id==request.args[len(request.args)-1]).update(AprobacionAnalistaAuditoria='F')
            db(db.SeguridadTi.id==request.args[len(request.args)-1]).update(AprobacionResponsableControl='F')
        if Tabla=='TipoIncidenteSeguridad':
            db(db.TipoIncidenteSeguridad.id==request.args[len(request.args)-1]).update(AprobacionJefeRiesgo='F')
            db(db.TipoIncidenteSeguridad.id==request.args[len(request.args)-1]).update(AprobacionAnalistaRiesgo='F')
        if Tabla=='IncidenteSeguridad':
            db(db.IncidenteSeguridad.id==request.args[len(request.args)-1]).update(AprobacionJefeRiesgo='F')
            db(db.IncidenteSeguridad.id==request.args[len(request.args)-1]).update(AprobacionAnalistaRiesgo='F')
        if Tabla=='ActivoTiRegion':
            db(db.ActivoTiRegion.id==request.args[len(request.args)-1]).update(AprobacionJefeRiesgo='F')
            db(db.ActivoTiRegion.id==request.args[len(request.args)-1]).update(AprobacionAnalistaRiesgo='F')
        if Tabla=='ActivoTiPlataforma':
            db(db.ActivoTiPlataforma.id==request.args[len(request.args)-1]).update(AprobacionJefeRiesgo='F')
            db(db.ActivoTiPlataforma.id==request.args[len(request.args)-1]).update(AprobacionAnalistaRiesgo='F')
        if Tabla=='ActivoTiProceso':
            db(db.ActivoTiProceso.id==request.args[len(request.args)-1]).update(AprobacionJefeRiesgo='F')
            db(db.ActivoTiProceso.id==request.args[len(request.args)-1]).update(AprobacionAnalistaRiesgo='F')
        if Tabla=='ActivoInformacionRegulacion':
            db(db.ActivoInformacionRegulacion.id==request.args[len(request.args)-1]).update(AprobacionJefeRiesgo='F')
            db(db.ActivoInformacionRegulacion.id==request.args[len(request.args)-1]).update(AprobacionAnalistaRiesgo='F')
        if Tabla=='ProcesoActivoInformacion':
            db(db.ProcesoActivoInformacion.id==request.args[len(request.args)-1]).update(AprobacionJefeRiesgo='F')
            db(db.ProcesoActivoInformacion.id==request.args[len(request.args)-1]).update(AprobacionAnalistaRiesgo='F')
        if Tabla=='ActivoTiActivoInformacion':
            db(db.ActivoTiActivoInformacion.id==request.args[len(request.args)-1]).update(AprobacionJefeRiesgo='F')
            db(db.ActivoTiActivoInformacion.id==request.args[len(request.args)-1]).update(AprobacionAnalistaRiesgo='F')
        if Tabla=='AuditoriaControl':
            db(db.AuditoriaControl.id==request.args[len(request.args)-1]).update(AprobacionJefeAuditoria='F')
            db(db.AuditoriaControl.id==request.args[len(request.args)-1]).update(AprobacionAnalistaAuditoria='F')
            db(db.AuditoriaControl.id==request.args[len(request.args)-1]).update(AprobacionResponsableControl='F')
        if Tabla=='EvaluacionControl':
            db(db.EvaluacionControl.id==request.args[len(request.args)-1]).update(AprobacionJefeAuditoria='F')
            db(db.EvaluacionControl.id==request.args[len(request.args)-1]).update(AprobacionAnalistaAuditoria='F')
            #db(db.EvaluacionControl.id==request.args[len(request.args)-1]).update(AprobacionResponsableControl='F')
        if Tabla=='IngresoProceso':
            db(db.IngresoProceso.id==request.args[len(request.args)-1]).update(AprobacionAnalistaRiesgo='F')
            db(db.IngresoProceso.id==request.args[len(request.args)-1]).update(AprobacionJefeRiesgo='F')
        if Tabla=='IngresoCiclo':
            db(db.IngresoCiclo.id==request.args[len(request.args)-1]).update(AprobacionAnalistaRiesgo='F')
            db(db.IngresoCiclo.id==request.args[len(request.args)-1]).update(AprobacionJefeRiesgo='F')
        if Tabla=='AlcanceRevision':
            db(db.AlcanceRevision.id==request.args[len(request.args)-1]).update(AprobacionJefeAuditoria='F')
            db(db.AlcanceRevision.id==request.args[len(request.args)-1]).update(AprobacionAnalistaAuditoria='F')
        if Tabla=='TipoRevision':
            db(db.TipoRevision.id==request.args[len(request.args)-1]).update(AprobacionJefeAuditoria='F')
            db(db.TipoRevision.id==request.args[len(request.args)-1]).update(AprobacionAnalistaAuditoria='F')
        if Tabla=='Documentacion':
            db(db.Documentacion.id==request.args[len(request.args)-1]).update(AprobacionAnalistaRiesgo='F')
            db(db.Documentacion.id==request.args[len(request.args)-1]).update(AprobacionJefeRiesgo='F')
        if Tabla=='AutoControlConfiguracion':
            db2(db2.AutoControlConfiguracion.id==request.args[len(request.args)-1]).update(AprobacionJefeAuditoria='F')
            db2(db2.AutoControlConfiguracion.id==request.args[len(request.args)-1]).update(AprobacionAnalistaAuditoria='F')
        if Tabla=='AutoControlCuestionario':
            db2(db2.AutoControlCuestionario.id==request.args[len(request.args)-1]).update(AprobacionJefeAuditoria='F')
            db2(db2.AutoControlCuestionario.id==request.args[len(request.args)-1]).update(AprobacionAnalistaAuditoria='F')
        if Tabla=='AreaImpacto':
            db(db.AreaImpacto.id==request.args[len(request.args)-1]).update(AprobacionAnalistaRiesgo='F')
            db(db.AreaImpacto.id==request.args[len(request.args)-1]).update(AprobacionJefeRiesgo='F')
        if Tabla=='AreaProbabilidad':
            db(db.AreaProbabilidad.id==request.args[len(request.args)-1]).update(AprobacionAnalistaRiesgo='F')
            db(db.AreaProbabilidad.id==request.args[len(request.args)-1]).update(AprobacionJefeRiesgo='F')
        if Tabla=='AreaImpactoCriterioImpacto':
            db(db.AreaImpactoCriterioImpacto.id==request.args[len(request.args)-1]).update(AprobacionAnalistaRiesgo='F')
            db(db.AreaImpactoCriterioImpacto.id==request.args[len(request.args)-1]).update(AprobacionJefeRiesgo='F')
        if Tabla=='AreaProbabilidadCriterioProbabilidad':
            db(db.AreaProbabilidadCriterioProbabilidad.id==request.args[len(request.args)-1]).update(AprobacionAnalistaRiesgo='F')
            db(db.AreaProbabilidadCriterioProbabilidad.id==request.args[len(request.args)-1]).update(AprobacionJefeRiesgo='F')
        if Tabla=='TratamientoRiesgoAreaImpacto':
            db(db.TratamientoRiesgoAreaImpacto.id==request.args[len(request.args)-1]).update(AprobacionAnalistaRiesgo='F')
            db(db.TratamientoRiesgoAreaImpacto.id==request.args[len(request.args)-1]).update(AprobacionJefeRiesgo='F')
        if Tabla=='TratamientoRiesgoAreaProbabilidad':
            db(db.TratamientoRiesgoAreaProbabilidad.id==request.args[len(request.args)-1]).update(AprobacionAnalistaRiesgo='F')
            db(db.TratamientoRiesgoAreaProbabilidad.id==request.args[len(request.args)-1]).update(AprobacionJefeRiesgo='F')
        if Tabla=='BenchVersion':
            db(db.BenchVersion.id==request.args[len(request.args)-1]).update(AprobacionAnalistaRiesgo='F')
            db(db.BenchVersion.id==request.args[len(request.args)-1]).update(AprobacionJefeRiesgo='F')
        if Tabla=='PruebaWeb':
            db(db.PruebaWeb.id==request.args[len(request.args)-1]).update(AprobacionAnalistaRiesgo='F')
            db(db.PruebaWeb.id==request.args[len(request.args)-1]).update(AprobacionJefeRiesgo='F')
        if Tabla=='CatalogoControlBenchControl':
            db(db.CatalogoControlBenchControl.id==request.args[len(request.args)-1]).update(AprobacionAnalistaRiesgo='F')
            db(db.CatalogoControlBenchControl.id==request.args[len(request.args)-1]).update(AprobacionJefeRiesgo='F')
        if Tabla=='AlcanceControl':
            db(db.AlcanceControl.id==request.args[len(request.args)-1]).update(AprobacionAnalistaRiesgo='F')
            db(db.AlcanceControl.id==request.args[len(request.args)-1]).update(AprobacionJefeRiesgo='F')
        if Tabla=='ValorMetricaSeguridadTi':
            db(db.ValorMetricaSeguridadTi.id==request.args[len(request.args)-1]).update(AprobacionAnalistaRiesgo='F')
            db(db.ValorMetricaSeguridadTi.id==request.args[len(request.args)-1]).update(AprobacionJefeRiesgo='F')
        if Tabla=='BenchVersion':
            db(db.BenchVersion.id==request.args[len(request.args)-1]).update(AprobacionJefeRiesgo='F')
            db(db.BenchVersion.id==request.args[len(request.args)-1]).update(AprobacionAnalistaRiesgo='F')
        if Tabla=='BenchObjetivoControl':
            db(db.BenchObjetivoControl.id==request.args[len(request.args)-1]).update(AprobacionJefeRiesgo='F')
            db(db.BenchObjetivoControl.id==request.args[len(request.args)-1]).update(AprobacionAnalistaRiesgo='F')
        if Tabla=='BenchControl':
            db(db.BenchControl.id==request.args[len(request.args)-1]).update(AprobacionJefeRiesgo='F')
            db(db.BenchControl.id==request.args[len(request.args)-1]).update(AprobacionAnalistaRiesgo='F')
        if Tabla=='BenchEvaluacion':
            db(db.BenchEvaluacion.id==request.args[len(request.args)-1]).update(AprobacionJefeRiesgo='F')
            db(db.BenchEvaluacion.id==request.args[len(request.args)-1]).update(AprobacionAnalistaRiesgo='F')
        if Tabla=='TestSeguridad':
            db(db.TestSeguridad.id==request.args[len(request.args)-1]).update(AprobacionJefeRiesgo='F')
            db(db.TestSeguridad.id==request.args[len(request.args)-1]).update(AprobacionAnalistaRiesgo='F')
        if Tabla == 'GrupoMetrica':
            db(db.GrupoMetrica.id == request.args[len(request.args)-1]).update(AprobacionJefeRiesgo='F')
            db(db.GrupoMetrica.id == request.args[len(request.args)-1]).update(AprobacionAnalistaRiesgo='F')
        if Tabla == 'Metrica':
            db(db.Metrica.id == request.args[len(request.args)-1]).update(AprobacionJefeRiesgo='F')
            db(db.Metrica.id == request.args[len(request.args)-1]).update(AprobacionAnalistaRiesgo='F')
        if Tabla == 'ValorMetrica':
            db(db.ValorMetrica.id == request.args[len(request.args)-1]).update(AprobacionJefeRiesgo='F')
            db(db.ValorMetrica.id == request.args[len(request.args)-1]).update(AprobacionAnalistaRiesgo='F')
        if Tabla == 'ValorMetricaSeguridadTi':
            db(db.ValorMetricaSeguridadTi.id == request.args[len(request.args)-1]).update(AprobacionJefeRiesgo='F')
            db(db.ValorMetricaSeguridadTi.id == request.args[len(request.args)-1]).update(AprobacionAnalistaRiesgo='F')
    else:
        pass

@auth.requires_login()
#if auth.has_membership(role='auditAnalyst') or auth.has_membership(role='auditManager') or auth.has_membership(role='admin'):
@auth.requires( auth.has_membership(role='riskAnalyst') or auth.has_membership(role='riskManager') or auth.has_membership(role='admin') )
def CvssImpacto():
    TratamientoRiesgoId = db(db.TratamientoRiesgo.ActivoTiId==request.args(0)).select(db.TratamientoRiesgo.id)
    for i in TratamientoRiesgoId:
        db.ValorMetricaSeguridadTi.update_or_insert(( (db.ValorMetricaSeguridadTi.TratamientoRiesgoId==i) & ((db.ValorMetricaSeguridadTi.ValorMetricaId==14 ) | (db.ValorMetricaSeguridadTi.ValorMetricaId==15 ) | (db.ValorMetricaSeguridadTi.ValorMetricaId==16 ))), TratamientoRiesgoId=i, ValorMetricaId=request.args(1), Descripcion=base64.b64decode(request.args(4)) )
    for i in TratamientoRiesgoId:
        db.ValorMetricaSeguridadTi.update_or_insert(( (db.ValorMetricaSeguridadTi.TratamientoRiesgoId==i) & ((db.ValorMetricaSeguridadTi.ValorMetricaId==17 ) | (db.ValorMetricaSeguridadTi.ValorMetricaId==18 ) | (db.ValorMetricaSeguridadTi.ValorMetricaId==19 ))), TratamientoRiesgoId=i, ValorMetricaId=request.args(2), Descripcion=base64.b64decode(request.args(4)) )
    for i in TratamientoRiesgoId:
        db.ValorMetricaSeguridadTi.update_or_insert(( (db.ValorMetricaSeguridadTi.TratamientoRiesgoId==i) & ((db.ValorMetricaSeguridadTi.ValorMetricaId==20 ) | (db.ValorMetricaSeguridadTi.ValorMetricaId==21 ) | (db.ValorMetricaSeguridadTi.ValorMetricaId==22 ))), TratamientoRiesgoId=i, ValorMetricaId=request.args(3), Descripcion=base64.b64decode(request.args(4)) )
    redirect(URL('default','ActivoTi'))

@auth.requires_login()
#if auth.has_membership(role='auditAnalyst') or auth.has_membership(role='auditManager') or auth.has_membership(role='admin'):
@auth.requires( auth.has_membership(role='riskAnalyst') or auth.has_membership(role='riskManager') or auth.has_membership(role='admin') )
def CvssEvaluation():
    if request.args(3):
        parametros = base64.b64decode(request.args(3))
    else:
        pass

    #ActualizaAprobacion(request.args(1))
    #db.auth_user.update_or_insert((db.auth_user.id==4),first_name="riskAnalyst", last_name="riskAnalyst", email="riskAnalyst@mail.com", username="riskAnalyst", password=db.auth_user.password.validate('Password01')[0])
    #return dict()
    #CvssEvaluation
    #db(db.SeguridadTi.AprobacionJefeAuditoria == 'T').select(db.SeguridadTi.id, db.SeguridadTi.ResponsableControl):
    #--------------------------------
    #Asignacion inicial de valores
    #--------------------------------
    #cvssBaseAV=0.85 #Network
    #cvssBaseAVString="N"
    #cvssBaseAC=0.77 #Low
    #cvssBaseACString="L"
    #cvssBasePR=0.85 #None
    #cvssBasePRString="N"
    #cvssBaseUI=0.85 #None
    #cvssBaseUIString="N"
    #cvssBaseS =7.52 #Changed
    #cvssBaseSString="C"
    #cvssBaseC =0.56 #High
    #cvssBaseCString="H"
    #cvssBaseI =0.56 #High
    #cvssBaseIString="H"
    #cvssBaseA =0.56 #High
    #cvssBaseAString="H"
    #changed=1
    cvssBaseAV=0.2 #Physical
    cvssBaseAVString="P"
    cvssBaseAC=0.44 #High
    cvssBaseACString="H"
    cvssBasePR=0.27 #High
    cvssBasePRString="H"
    cvssBaseUI=0.62 #Required
    cvssBaseUIString="R"
    cvssBaseS =6.42 #Unhanged
    cvssBaseSString="U"
    cvssBaseC =0 #None
    cvssBaseCString="N"
    cvssBaseI =0 #None
    cvssBaseIString="N"
    cvssBaseA =0 #None
    cvssBaseAString="N"
    changed=0
    #---------------------
    #Variables temporales
    #---------------------
    cvssTempE  = 1 
    cvssTempEString  = "X" 
    cvssTempRL = 1
    cvssTempRLString = "X"
    cvssTempRC = 1
    cvssTempRCString = "X"
    #---------------------
    #Variables Ambientales
    #---------------------
    cvssEnvCR  = 1.5
    cvssEnvIR  = 1.5
    cvssEnvAR  = 1.5
    cvssEnvMAV = 0.85
    cvssEnvMAC = 0.77
    cvssEnvMPR = 0.85
    cvssEnvMUI = 0.85
    cvssEnvMS  = 7.52
    cvssEnvMC  = 0.56
    cvssEnvMI  = 0.56
    cvssEnvMA  = 0.56
    #ISS = 1-[(1-cvssBaseC) (1-cvssBaseI) (1-cvssBaseA)]
    #Exploitability = (8.22) (cvssBaseAV) (cvssBaseAC) (cvssBasePR) (cvssBaseUI)
    #Impact = [((7.52) (ISS - 0.029)) - ( (3.25) ((ISS - 0.02)^15)) ]
    #BaseScore = round( min( 1.08(impact*Exploitability)  , 10) )

    cvss = db(db.ValorMetricaSeguridadTi.TratamientoRiesgoId==request.args(0)).select(db.ValorMetricaSeguridadTi.ALL)
    for s in cvss:
        #-----------------------------------------------------------------------
        #El grupo metrica 5 corresponde a 5 | Base Metric Group | S | Scope (S)
        #Changed(C) y Unchanged(U)
        #-----------------------------------------------------------------------
        #if s.ValorMetricaId.GrupoMetricaId==5:
        if s.ValorMetricaId.MetricaId==5:
            #----------------------------
            #Scope (S)    Changed (C)	  
            #----------------------------
            if s.ValorMetricaId==12:
                changed=1
            #----------------------------
            #Scope (S)    Unchanged (U)	  
            #----------------------------
            elif s.ValorMetricaId==13:
                changed=0

    for i in cvss:

        if i.ValorMetricaId.MetricaId==1:
        #if i.ValorMetricaId.Nombre=="Attack Vector (AV)":
            cvssBaseAV=i.ValorMetricaId.ValorNumerico
            cvssBaseAVString=i.ValorMetricaId.ValorMetrica
        #else:
        #    cvssBaseAV = 0.85
        if i.ValorMetricaId.MetricaId==2:
            cvssBaseAC=i.ValorMetricaId.ValorNumerico
            cvssBaseACString=i.ValorMetricaId.ValorMetrica

        if i.ValorMetricaId.MetricaId==3 and changed==0:
            cvssBasePR=i.ValorMetricaId.ValorNumerico
            cvssBasePRString=i.ValorMetricaId.ValorMetrica
        elif i.ValorMetricaId.MetricaId==3 and changed==1 and i.ValorMetricaId==7: #Changed (C) & PR High (H)
            cvssBasePR=0.5
            cvssBasePRString=i.ValorMetricaId.ValorMetrica
        elif i.ValorMetricaId.MetricaId==3 and changed==1 and i.ValorMetricaId==8: #Changed (C) & PR Low (L)
            cvssBasePR=0.68
            cvssBasePRString=i.ValorMetricaId.ValorMetrica

        if i.ValorMetricaId.MetricaId==4:
            cvssBaseUI=i.ValorMetricaId.ValorNumerico
            cvssBaseUIString=i.ValorMetricaId.ValorMetrica
        if i.ValorMetricaId.MetricaId==5:
            cvssBaseS=i.ValorMetricaId.ValorNumerico
            cvssBaseSString=i.ValorMetricaId.ValorMetrica
        if i.ValorMetricaId.MetricaId==6:
            cvssBaseC=i.ValorMetricaId.ValorNumerico
            cvssBaseCString=i.ValorMetricaId.ValorMetrica
        if i.ValorMetricaId.MetricaId==7:
            cvssBaseI=i.ValorMetricaId.ValorNumerico
            cvssBaseIString=i.ValorMetricaId.ValorMetrica
        if i.ValorMetricaId.MetricaId==8:
            cvssBaseA=i.ValorMetricaId.ValorNumerico
            cvssBaseAString=i.ValorMetricaId.ValorMetrica
        #--------------------
        #Metricas temporales
        #--------------------
        if i.ValorMetricaId.MetricaId==9:
            cvssTempE=i.ValorMetricaId.ValorNumerico
            cvssTempEString=i.ValorMetricaId.ValorMetrica
        if i.ValorMetricaId.MetricaId==10:
            cvssTempRL=i.ValorMetricaId.ValorNumerico
            cvssTempRLString=i.ValorMetricaId.ValorMetrica
        if i.ValorMetricaId.MetricaId==11:
            cvssTempRC=i.ValorMetricaId.ValorNumerico
            cvssTempRCString=i.ValorMetricaId.ValorMetrica

    ISS = 1-( (1-cvssBaseC) * (1-cvssBaseI) * (1-cvssBaseA) )
    #Impact = ( ((7.52) * (ISS - 0.029)) - ( (3.25) * ((ISS - 0.02)**15)) )
    Impact = ( ((7.52) * (ISS - 0.029)) - ( (3.25) * (math.pow((ISS - 0.02), 15))) )

        #if i.ValorMetricaId.GrupoMetricaId==5 and i.ValorMetricaId==13:
    for i in cvss:
        if i.ValorMetricaId==13: #Unchanged (U)	
            Impact = (6.42) * (ISS)
        elif i.ValorMetricaId==12:
            Impact = ( ((7.52) * (ISS - 0.029)) - ( (3.25) * (math.pow((ISS - 0.02), 15))) )

    #ISS = 1-[(1-cvssBaseC) (1-cvssBaseI) (1-cvssBaseA)]
    Exploitability = (8.22) * (cvssBaseAV) * (cvssBaseAC) * (cvssBasePR) * (cvssBaseUI)
    #Impact = [((7.52) (ISS - 0.029)) - ( (3.25) ((ISS - 0.02)^15)) ]
    BaseScore = roundup( min( 1.08*(Impact + Exploitability)  , 10) )

    if Impact <=0:
        BaseScore=0

    for i in cvss:
        if i.ValorMetricaId==13: #Unchanged (U)	
            BaseScore = roundup( min( Impact + Exploitability  , 10) )
        elif i.ValorMetricaId==12:
            BaseScore = roundup( min( (1.08) * (Impact + Exploitability)  , 10) )
    #-------------------------
    #Calculo metrica temporal
    #-------------------------
    TemScore = roundup(BaseScore * cvssTempE * cvssTempRL * cvssTempRC )
    
    VectorString = "CVSS:3.1/AV:"+str(cvssBaseAVString)+"/AC:"+str(cvssBaseACString)+"/PR:"+str(cvssBasePRString)+"/UI:"+str(cvssBaseUIString)+"/S:"+str(cvssBaseSString)+"/C:"+str(cvssBaseCString)+"/I:"+str(cvssBaseIString)+"/A:"+str(cvssBaseAString)
    #VectorString = "CVSS:3.1/AV:"+str(cvssBaseAVString)+"/AC:"+str(cvssBaseACString)+"/PR:"+str(cvssBasePRString)+"/UI:"+str(cvssBaseUIString)+"/S:"+str(cvssBaseSString)+"/C:"+str(cvssBaseCString)+"/I:"+str(cvssBaseIString)+"/A:"+str(cvssBaseAString)+"/E:"+str(cvssTempE)+"/RL:"+str(cvssTempRL)+"/RC:"+str(cvssTempRC)
    #db.TratamientoRiesgo.update_or_insert(db.TratamientoRiesgo.id==request.args(0) , CuantificacionCVSS=BaseScore, VectorCVSS=VectorString)
    db.TratamientoRiesgo.update_or_insert(db.TratamientoRiesgo.id==request.args(0) , CuantificacionCVSS=BaseScore, VectorCVSS=VectorString)

    if request.args(3):
        redirect(URL('TratamientoRiesgo', vars=dict(keywords=parametros)))
    else:
        redirect(URL('TratamientoRiesgo'))


@auth.requires_login()
#if auth.has_membership(role='auditAnalyst') or auth.has_membership(role='auditManager') or auth.has_membership(role='admin'):
@auth.requires( auth.has_membership(role='riskAnalyst') or auth.has_membership(role='riskManager') or auth.has_membership(role='admin') )
def CvssEvaluation1():
    if request.args(3):
        parametros = base64.b64decode(request.args(3))
    else:
        pass

    cvssBaseAV=0.2 #Physical
    cvssBaseAVString="P"
    cvssBaseAC=0.44 #High
    cvssBaseACString="H"
    cvssBasePR=0.27 #High
    cvssBasePRString="H"
    cvssBaseUI=0.62 #Required
    cvssBaseUIString="R"
    cvssBaseS =6.42 #Unhanged
    cvssBaseSString="U"
    cvssBaseC =0 #None
    cvssBaseCString="N"
    cvssBaseI =0 #None
    cvssBaseIString="N"
    cvssBaseA =0 #None
    cvssBaseAString="N"
    changed=0
    #---------------------
    #Variables temporales
    #---------------------
    cvssTempE  = 1 
    cvssTempEString  = "X" 
    cvssTempRL = 1
    cvssTempRLString = "X"
    cvssTempRC = 1
    cvssTempRCString = "X"
    #---------------------
    #Variables Ambientales
    #---------------------
    cvssEnvCR  = 1.5
    cvssEnvIR  = 1.5
    cvssEnvAR  = 1.5
    cvssEnvMAV = 0.85
    cvssEnvMAC = 0.77
    cvssEnvMPR = 0.85
    cvssEnvMUI = 0.85
    cvssEnvMS  = 7.52
    cvssEnvMC  = 0.56
    cvssEnvMI  = 0.56
    cvssEnvMA  = 0.56

    cvss = db(db.ControlCvss.EvaluacionControlId==request.args(0)).select(db.ControlCvss.ALL)
    for s in cvss:
        #-----------------------------------------------------------------------
        #El grupo metrica 5 corresponde a 5 | Base Metric Group | S | Scope (S)
        #Changed(C) y Unchanged(U)
        #-----------------------------------------------------------------------
        #if s.ValorMetricaId.GrupoMetricaId==5:
        if s.ValorMetricaId.MetricaId==5:
            #----------------------------
            #Scope (S)    Changed (C)	  
            #----------------------------
            if s.ValorMetricaId==12:
                changed=1
            #----------------------------
            #Scope (S)    Unchanged (U)	  
            #----------------------------
            elif s.ValorMetricaId==13:
                changed=0

    for i in cvss:

        if i.ValorMetricaId.MetricaId==1:
        #if i.ValorMetricaId.Nombre=="Attack Vector (AV)":
            cvssBaseAV=i.ValorMetricaId.ValorNumerico
            cvssBaseAVString=i.ValorMetricaId.ValorMetrica
        #else:
        #    cvssBaseAV = 0.85
        if i.ValorMetricaId.MetricaId==2:
            cvssBaseAC=i.ValorMetricaId.ValorNumerico
            cvssBaseACString=i.ValorMetricaId.ValorMetrica

        if i.ValorMetricaId.MetricaId==3 and changed==0:
            cvssBasePR=i.ValorMetricaId.ValorNumerico
            cvssBasePRString=i.ValorMetricaId.ValorMetrica
        elif i.ValorMetricaId.MetricaId==3 and changed==1 and i.ValorMetricaId==7: #Changed (C) & PR High (H)
            cvssBasePR=0.5
            cvssBasePRString=i.ValorMetricaId.ValorMetrica
        elif i.ValorMetricaId.MetricaId==3 and changed==1 and i.ValorMetricaId==8: #Changed (C) & PR Low (L)
            cvssBasePR=0.68
            cvssBasePRString=i.ValorMetricaId.ValorMetrica

        if i.ValorMetricaId.MetricaId==4:
            cvssBaseUI=i.ValorMetricaId.ValorNumerico
            cvssBaseUIString=i.ValorMetricaId.ValorMetrica
        if i.ValorMetricaId.MetricaId==5:
            cvssBaseS=i.ValorMetricaId.ValorNumerico
            cvssBaseSString=i.ValorMetricaId.ValorMetrica
        if i.ValorMetricaId.MetricaId==6:
            cvssBaseC=i.ValorMetricaId.ValorNumerico
            cvssBaseCString=i.ValorMetricaId.ValorMetrica
        if i.ValorMetricaId.MetricaId==7:
            cvssBaseI=i.ValorMetricaId.ValorNumerico
            cvssBaseIString=i.ValorMetricaId.ValorMetrica
        if i.ValorMetricaId.MetricaId==8:
            cvssBaseA=i.ValorMetricaId.ValorNumerico
            cvssBaseAString=i.ValorMetricaId.ValorMetrica
        #--------------------
        #Metricas temporales
        #--------------------
        if i.ValorMetricaId.MetricaId==9:
            cvssTempE=i.ValorMetricaId.ValorNumerico
            cvssTempEString=i.ValorMetricaId.ValorMetrica
        if i.ValorMetricaId.MetricaId==10:
            cvssTempRL=i.ValorMetricaId.ValorNumerico
            cvssTempRLString=i.ValorMetricaId.ValorMetrica
        if i.ValorMetricaId.MetricaId==11:
            cvssTempRC=i.ValorMetricaId.ValorNumerico
            cvssTempRCString=i.ValorMetricaId.ValorMetrica

    ISS = 1-( (1-cvssBaseC) * (1-cvssBaseI) * (1-cvssBaseA) )
    #Impact = ( ((7.52) * (ISS - 0.029)) - ( (3.25) * ((ISS - 0.02)**15)) )
    Impact = ( ((7.52) * (ISS - 0.029)) - ( (3.25) * (math.pow((ISS - 0.02), 15))) )

        #if i.ValorMetricaId.GrupoMetricaId==5 and i.ValorMetricaId==13:
    for i in cvss:
        if i.ValorMetricaId==13: #Unchanged (U)	
            Impact = (6.42) * (ISS)
        elif i.ValorMetricaId==12:
            Impact = ( ((7.52) * (ISS - 0.029)) - ( (3.25) * (math.pow((ISS - 0.02), 15))) )

    #ISS = 1-[(1-cvssBaseC) (1-cvssBaseI) (1-cvssBaseA)]
    Exploitability = (8.22) * (cvssBaseAV) * (cvssBaseAC) * (cvssBasePR) * (cvssBaseUI)
    #Impact = [((7.52) (ISS - 0.029)) - ( (3.25) ((ISS - 0.02)^15)) ]
    BaseScore = roundup( min( 1.08*(Impact + Exploitability)  , 10) )

    if Impact <=0:
        BaseScore=0

    for i in cvss:
        if i.ValorMetricaId==13: #Unchanged (U)	
            BaseScore = roundup( min( Impact + Exploitability  , 10) )
        elif i.ValorMetricaId==12:
            BaseScore = roundup( min( (1.08) * (Impact + Exploitability)  , 10) )

    #-------------------------
    #Calculo metrica temporal
    #-------------------------
    TemScore = roundup(BaseScore * cvssTempE * cvssTempRL * cvssTempRC )
    
    VectorString = "CVSS:3.1/AV:"+str(cvssBaseAVString)+"/AC:"+str(cvssBaseACString)+"/PR:"+str(cvssBasePRString)+"/UI:"+str(cvssBaseUIString)+"/S:"+str(cvssBaseSString)+"/C:"+str(cvssBaseCString)+"/I:"+str(cvssBaseIString)+"/A:"+str(cvssBaseAString)
    #VectorString = "CVSS:3.1/AV:"+str(cvssBaseAVString)+"/AC:"+str(cvssBaseACString)+"/PR:"+str(cvssBasePRString)+"/UI:"+str(cvssBaseUIString)+"/S:"+str(cvssBaseSString)+"/C:"+str(cvssBaseCString)+"/I:"+str(cvssBaseIString)+"/A:"+str(cvssBaseAString)+"/E:"+str(cvssTempE)+"/RL:"+str(cvssTempRL)+"/RC:"+str(cvssTempRC)

    #db.TratamientoRiesgo.update_or_insert(db.TratamientoRiesgo.id==request.args(0) , CuantificacionCVSS=BaseScore, VectorCVSS=VectorString)
    db.EvaluacionControl.update_or_insert(db.EvaluacionControl.id==request.args(0) , CuantificacionCVSS=BaseScore, VectorCVSS=VectorString)

    if request.args(3):
        redirect(URL('EvaluacionControl', vars=dict(keywords=parametros)))
    else:
        redirect(URL('EvaluacionControl'))

        
def roundup(num):
    return D(math.ceil(num * 10) / 10).quantize(D("0.1"))

@auth.requires_login()
def EmailConfig():
    if auth.has_membership(role='riskManager') or auth.has_membership(role='riskAnalyst') or auth.has_membership(role='admin') :
        links = [lambda row: A('SMTP Test',_class='button btn btn-warning',_href=URL("default","testSMTP", args=[row.id, row.server_c, row.port_c, row.tls_2, row.openRelay, base64.b64encode(str(row.login_c)), base64.b64encode(str(row.password_c)), row.tls_c]))]
        form = SQLFORM.grid(db.EmailConfig, links=links, searchable=True, create=True, editable=True, deletable=True, user_signature=True, paginate=10, maxtextlength=500)
        return dict(form=form)
    else:
        redirect(URL('default','index'))

'''
@auth.requires_login()
@auth.requires(auth.has_membership(role='riskManager') or auth.has_membership(role='riskAnalyst') or auth.has_membership(role='admin'))
def testSMTP():
    socket.setdefaulttimeout(30)
    host = request.args(1)
    port = request.args(2)
    user = base64.b64decode(request.args(5))
    pasw = base64.b64decode(request.args(6))
    testTime = time.strftime("%c")
    try:
        #----------------
        #Crear objeto 
        #----------------
        if request.args(3)=='True':
            server = smtplib.SMTP_SSL()
        elif request.args(3)=='False':
            server = smtplib.SMTP()
        #---------------------------------------------------
        #Si es openrelay se realiza conexion sin autenticar
        #---------------------------------------------------
        if request.args(4)=='True':
            smtpRes = server.connect(host, port)
            db.phishingConfig.update_or_insert((db.phishingConfig.id==request.args(0)), testResult=str(str(testTime) + "|" + str(smtpRes) ) )
        elif request.args(4)=='False':
            server.connect(host, port)
            if request.args(7)=='True':
                server.starttls()
            smtpRes = server.login(user, pasw)
            db.phishingConfig.update_or_insert((db.phishingConfig.id==request.args(0)), testResult=str(str(testTime) + "|" + str(smtpRes) )  )
        server.quit()
    except Exception, e:
            db.phishingConfig.update_or_insert((db.phishingConfig.id==request.args(0)), testResult=str(str(testTime) + "|" + str(e) ) )
    redirect(URL('default', 'EmailConfig'))
'''

@auth.requires_login()
def BarraIncidenteSistemaTI():
    if auth.has_membership(role='riskManager') or auth.has_membership(role='auditManager') or auth.has_membership(role='riskAnalyst') or auth.has_membership(role='auditAnalyst') or auth.has_membership(role='iformationOwner') or auth.has_membership(role='admin') or auth.has_membership(role='guest') or auth.has_membership(role='controlResp'):
        return TableroIncidenteSeguridadTi()
    else:
        pass

@auth.requires_login()
def BarraTipoIncidenteSeguridadTI():
    if auth.has_membership(role='riskManager') or auth.has_membership(role='auditManager') or auth.has_membership(role='riskAnalyst') or auth.has_membership(role='auditAnalyst') or auth.has_membership(role='iformationOwner') or auth.has_membership(role='admin') or auth.has_membership(role='guest') or auth.has_membership(role='controlResp'):
        return TableroIncidenteSeguridadTi()
    else:
        pass

@auth.requires_login()
def BarraRegionIncidenteSeguridadTI():
    if auth.has_membership(role='riskManager') or auth.has_membership(role='auditManager') or auth.has_membership(role='riskAnalyst') or auth.has_membership(role='auditAnalyst') or auth.has_membership(role='iformationOwner') or auth.has_membership(role='admin') or auth.has_membership(role='guest') or auth.has_membership(role='controlResp'):
        return TableroIncidenteSeguridadTi()
    else:
        pass

@auth.requires_login()
def TableroIncidenteSeguridadTi():
    if auth.has_membership(role='riskManager') or auth.has_membership(role='auditManager') or auth.has_membership(role='riskAnalyst') or auth.has_membership(role='auditAnalyst') or auth.has_membership(role='iformationOwner') or auth.has_membership(role='admin') or auth.has_membership(role='guest') or auth.has_membership(role='controlResp'):
        pass
    else:
        redirect(URL('default', 'index'))

    queryIncidenteSeguridad = (db.IncidenteSeguridad.TipoIncidenteSeguridadId==db.TipoIncidenteSeguridad.id) & (db.IncidenteSeguridad.ActivoTiRegionId==db.ActivoTiRegion.id) & (db.IncidenteSeguridad.AprobacionJefeRiesgo=='T')
    queryActivoTiRegion = (db.ActivoTiRegion.ActivoTiId==db.ActivoTi.id) & (db.ActivoTiRegion.RegionId==db.Region.id)

    Periodo = request.now.year
    Parametro = {}
    Parametro.update(dict(request.vars))

    if request.vars.Periodo:
        Parametro['Periodo'] = request.vars.Periodo
        queryIncidenteSeguridad = queryIncidenteSeguridad & (db.IncidenteSeguridad.Fecha.year()==request.vars.Periodo)
    if request.vars.ActivoTi:
        Parametro['ActivoTi'] = request.vars.ActivoTi
        queryIncidenteSeguridad = queryIncidenteSeguridad & (db.ActivoTiRegion.ActivoTiId==request.vars.ActivoTi) 
    if request.vars.TipoIncidenteSeguridad:
        Parametro['TipoIncidenteSeguridad'] = request.vars.TipoIncidenteSeguridad
        queryIncidenteSeguridad = queryIncidenteSeguridad & (db.IncidenteSeguridad.TipoIncidenteSeguridadId==request.vars.TipoIncidenteSeguridad) 
    if request.vars.Region:
        Parametro['Region'] = request.vars.Region
        queryIncidenteSeguridad = queryIncidenteSeguridad & (db.ActivoTiRegion.RegionId==request.vars.Region)
    if request.vars.Mes:
        Parametro['Mes'] = request.vars.Mes
        queryIncidenteSeguridad = queryIncidenteSeguridad & (db.IncidenteSeguridad.Fecha.month()==request.vars.Mes)

    CountActivoTi = db.ActivoTiRegion.id.count()
    CountTipoIncidenteSeguridad = db.TipoIncidenteSeguridad.id.count()
    CountRegion = db.ActivoTiRegion.id.count()
    CountIncidenteSeguridad = db.IncidenteSeguridad.id.count()
    TotalIncidenteSeguridad = db(queryIncidenteSeguridad).count()

    GrupoActivoTi = db(queryIncidenteSeguridad & queryActivoTiRegion).select(db.ActivoTiRegion.ALL, CountActivoTi, groupby=db.ActivoTiRegion.ActivoTiId | db.ActivoTiRegion.id)
    GrupoTipoIncidenteSeguridad = db(queryIncidenteSeguridad).select(db.IncidenteSeguridad.TipoIncidenteSeguridadId, CountTipoIncidenteSeguridad, groupby=db.IncidenteSeguridad.TipoIncidenteSeguridadId)
    GrupoIncidenteSeguridad = db(queryIncidenteSeguridad).select(db.IncidenteSeguridad.ALL, CountIncidenteSeguridad, groupby=db.IncidenteSeguridad.id) 
    GrupoRegion = db(queryIncidenteSeguridad & queryActivoTiRegion).select(db.ActivoTiRegion.RegionId, CountRegion, groupby=db.ActivoTiRegion.RegionId)

    ActivoTiRegion = db(queryIncidenteSeguridad & queryActivoTiRegion).select(db.ActivoTiRegion.ALL, distinct=True)
    TotalActivoTi = db(queryIncidenteSeguridad).count()
    Plataforma = db(queryIncidenteSeguridad).select(db.Plataforma.ALL, distinct=True)
    TipoIncidenteSeguridad = db(queryIncidenteSeguridad).select(db.TipoIncidenteSeguridad.ALL, distinct=True)

    TotalTipoIncidenteSeguridad = db(queryIncidenteSeguridad).count()
    Organizacion = db(db.Configuracion).select(db.Configuracion.Organizacion).first().Organizacion
    IncidenteSeguridad = db(queryIncidenteSeguridad).select(db.IncidenteSeguridad.ALL, distinct=True)

    return dict(Organizacion=Organizacion, CountTipoIncidenteSeguridad=CountTipoIncidenteSeguridad, GrupoTipoIncidenteSeguridad=GrupoTipoIncidenteSeguridad, ActivoTiRegion=ActivoTiRegion, Parametro=Parametro, Plataforma=Plataforma, TipoIncidenteSeguridad=TipoIncidenteSeguridad, GrupoActivoTi=GrupoActivoTi, GrupoRegion=GrupoRegion, IncidenteSeguridad=IncidenteSeguridad, GrupoIncidenteSeguridad=GrupoIncidenteSeguridad, TotalIncidenteSeguridad=TotalIncidenteSeguridad, TotalTipoIncidenteSeguridad=TotalTipoIncidenteSeguridad, TotalActivoTi=TotalActivoTi, CountActivoTi=CountActivoTi)

@auth.requires_login()
def TableroSeguridadTi():
    if auth.has_membership(role='riskManager') or auth.has_membership(role='auditManager') or auth.has_membership(role='riskAnalyst') or auth.has_membership(role='auditAnalyst') or auth.has_membership(role='iformationOwner') or auth.has_membership(role='admin') or auth.has_membership(role='guest') or auth.has_membership(role='controlResp'):
        pass
    else:
        redirect(URL('default', 'index'))
    
    #Variables para manejar los filtros de busqueda
    FiltroPeriodo = 0
    FiltroActivoTi = 0
    #FiltroPlataforma = 0
    FiltroRegion = 0
    FiltroMes = 0
    FiltroCumplimiento = 0
    Periodo = request.now.year
    Parametro = {} #Variable tipo diccionario
    Parametro.update(dict(request.vars))

    #Query join desde la tabla de SeguridadTi
    #QuerySeguridadTi = (db.SeguridadTi.ActivoTiId==db.ActivoTi.id) & (db.SeguridadTi.DetallePoliticaId==db.DetallePolitica.id) & (db.SeguridadTi.TipoVulnerabilidadId==db.TipoVulnerabilidad.id) & (db.SeguridadTi.AnalisisRiesgoId==db.AnalisisRiesgo.id) & (db.SeguridadTi.TipoTratamientoRiesgoId==db.TipoTratamientoRiesgo.id) & (db.SeguridadTi.NivelMadurezId==db.NivelMadurez.id)
    QuerySeguridadTi = (db.SeguridadTi.ActivoTiId==db.ActivoTi.id) & (db.SeguridadTi.DetallePoliticaId==db.DetallePolitica.id) & (db.SeguridadTi.TipoVulnerabilidadId==db.TipoVulnerabilidad.id) & (db.SeguridadTi.NivelMadurezId==db.NivelMadurez.id)
    QueryActivoTi = (db.ActivoTi.TipoCapaSistemaId==db.TipoCapaSistema.id) & (db.ActivoTi.RegionId==db.Region.id)
    QueryPolitica = (db.DetallePolitica.CatalogoPoliticaId==db.CatalogoPolitica.id)
    QueryAnalisisRiesgo    =       (db.AnalisisRiesgo.ClasificacionRiesgoId==db.ClasificacionRiesgo.id) & (db.AnalisisRiesgo.ObjetivoOrganizacionId==db.ObjetivoOrganizacion.id) & (db.AnalisisRiesgo.CriterioProbabilidadId==db.CriterioProbabilidad.id) & (db.AnalisisRiesgo.CriterioImpactoId==db.CriterioImpacto.id) & (db.ObjetivoOrganizacion.TipoObjetivoId==db.TipoObjetivo.id)      
    QueryAprobacion = (db.SeguridadTi.AprobacionJefeAuditoria=='T') & (db.ActivoTi.AprobacionJefeRiesgo=='T') & (db.CatalogoPolitica.AprobacionJefeRiesgo=='T') & (db.DetallePolitica.AprobacionJefeRiesgo=='T') & (db.TipoVulnerabilidad.AprobacionJefeRiesgo=='T') & (db.AnalisisRiesgo.AprobacionJefeRiesgo=='T') & (db.TipoTratamientoRiesgo.AprobacionJefeRiesgo=='T') & (db.NivelMadurez.AprobacionJefeRiesgo=='T') & (db.TipoCapaSistema.AprobacionJefeAuditoria=='T') & (db.Region.AprobacionJefeRiesgo=='T') & (db.ClasificacionRiesgo.AprobacionJefeRiesgo=='T') & (db.ObjetivoOrganizacion.AprobacionJefeRiesgo=='T') & (db.CriterioProbabilidad.AprobacionJefeRiesgo=='T') & (db.CriterioImpacto.AprobacionJefeRiesgo=='T') & (db.TipoObjetivo.AprobacionJefeRiesgo=='T') 
    QuerySeguridadTi = (QuerySeguridadTi) & (QueryActivoTi) & (QueryPolitica) & (QueryAnalisisRiesgo) & (db.SeguridadTi.AprobacionJefeAuditoria=='T')

    if request.vars.Periodo:
        Parametro['Periodo'] = request.vars.Periodo
        QueryPeriodo = (db.SeguridadTi.FechaRevision.year()==request.vars.Periodo)
        FiltroPeriodo = 1
    if request.vars.ActivoTi:
        Parametro['ActivoTi'] = request.vars.ActivoTi
        QueryActivoTi = (db.ActivoTi.id==request.vars.ActivoTi) 
        FiltroActivoTi = 1
    if request.vars.Region:
        Parametro['Region'] = request.vars.Region
        QueryRegion = ((db.ActivoTi.RegionId==db.Region.id) & (db.ActivoTi.RegionId==request.vars.Region))
        FiltroRegion = 1
    if request.vars.Mes:
        Parametro['Mes'] = request.vars.Mes
        QueryMes=(db.SeguridadTi.FechaRevision.month()==request.vars.Mes)
        FiltroMes = 1

    if FiltroPeriodo == 1:
        QuerySeguridadTi = QuerySeguridadTi & QueryPeriodo
    if FiltroActivoTi == 1:
        QuerySeguridadTi = QuerySeguridadTi & QueryActivoTi
    if FiltroRegion == 1:
        QuerySeguridadTi = QuerySeguridadTi & QueryRegion
    if FiltroMes == 1:
        QuerySeguridadTi = QuerySeguridadTi & QueryMes

    if auth.has_membership(role='riskManager') or auth.has_membership(role='auditManager') or auth.has_membership(role='riskAnalyst') or auth.has_membership(role='auditAnalyst') or auth.has_membership(role='admin') or auth.has_membership(role='guest'):
        QuerySeguridadTi = QuerySeguridadTi

    elif auth.has_membership(role='controlResp'):
        controlId=[]
        for a in db(db.SeguridadTi.AprobacionJefeAuditoria == 'T').select(db.SeguridadTi.id, db.SeguridadTi.ResponsableControl):
            try:
                for b in str(str(a.ResponsableControl).replace(' ','')).split(','):
                    if b==auth.user.username:
                        controlId.append(int(a.id))
            except:
                pass
        #query = (db.SeguridadTi.id==0)
        query = db.SeguridadTi.id.belongs(controlId)
        QuerySeguridadTi = (QuerySeguridadTi) & (query)

    CountSeguridadTi = db.SeguridadTi.id.count()
    CountActivoTi = db.ActivoTi.id.count()
    EfectividadControl = db((QuerySeguridadTi) & ( db.SeguridadTi.EfectividadControl=='T' ) ).count()
    TotalSeguridadTi = db(QuerySeguridadTi).count()
    
    GrupoTipoTratamientoRiesgo = db(QuerySeguridadTi).select(db.TipoTratamientoRiesgo.Nombre, db.TipoTratamientoRiesgo.Color, CountSeguridadTi)
    GrupoTipoCumplimiento= db(QuerySeguridadTi).select(db.SeguridadTi.Cumplimiento, db.ActivoTi.Nombre, CountSeguridadTi, groupby=db.SeguridadTi.Cumplimiento)
    #GrupoSeguridadTi = db(QuerySeguridadTi).select(db.SeguridadTi.Cumplimiento, db.ActivoTi.Nombre, CountSeguridadTi, groupby=db.ActivoTi.id)
    #GrupoActivoTi = db(QuerySeguridadTi).select(db.SeguridadTi.ActivoTiId, CountActivoTi, groupby=db.SeguridadTi.ActivoTiId)
    GrupoTipoVulnerabilidad = db(QuerySeguridadTi & (db.SeguridadTi.EfectividadControl=='F')).select(db.SeguridadTi.TipoVulnerabilidadId, CountSeguridadTi, groupby=db.SeguridadTi.TipoVulnerabilidadId)
    GrupoNivelMadurezControl = db(QuerySeguridadTi).select(db.SeguridadTi.NivelMadurezId,CountSeguridadTi, groupby=db.SeguridadTi.NivelMadurezId)

    #ActivoTi = db( (QuerySeguridadTi) & db.ActivoTi.id==db.SeguridadTi.ActivoTiId).select(db.ActivoTi.ALL, distinct=True) #Solo los que tienen prueba asociada
    ActivoTi = db(QuerySeguridadTi).select(db.ActivoTi.ALL, distinct=True) #Solo los que tienen prueba asociada
    TipoVulnerabilidad = db(QuerySeguridadTi & (db.SeguridadTi.EfectividadControl=='F')).select(db.TipoVulnerabilidad.ALL, distinct=True)
    #CatalogoPolitica = db(QuerySeguridadTi).select(db.CatalogoPolitica.ALL, distinct=True)
    AnalisisRiesgo = db(QuerySeguridadTi).select(db.AnalisisRiesgo.ALL, distinct=True)
    TratamientoRiesgo = db(QuerySeguridadTi).select(db.TratamientoRiesgo.ALL, distinct=True)
    
    Plataforma = db(QuerySeguridadTi).select(db.Plataforma.ALL, distinct=True)
    Region = db(QuerySeguridadTi).select(db.Region.ALL, distinct=True)
    SeguridadTi = db(QuerySeguridadTi).select(db.SeguridadTi.ALL, distinct=True)
    CatalogoPolitica = db(QuerySeguridadTi).select(db.CatalogoPolitica.ALL, distinct=True)
    
    #Query
    #TipoTratamientoRiesgo = db(db.TipoTratamientoRiesgo).select(db.TipoTratamientoRiesgo.ALL, distinct=True)
    TipoTratamientoRiesgo = db(QuerySeguridadTi).select(db.TipoTratamientoRiesgo.ALL, distinct=True)
    #TipoCumplimiento = db(db.TipoCumplimiento).select(db.TipoCumplimiento.ALL, distinct=True)
    #NivelMadurez = db(db.NivelMadurez).select(db.NivelMadurez.ALL, orderby=db.NivelMadurez.Valor, distinct=True)
    NivelMadurez = db(QuerySeguridadTi).select(db.NivelMadurez.ALL, orderby=db.NivelMadurez.Valor, distinct=True)
    #CatalogoPolitica = db(db.CatalogoPolitica).select(db.CatalogoPolitica.ALL, distinct=True)

    #cumplimiento por activo
    GrupoActivoTi = []
    for i in ActivoTi:
        ListaActivoTi = []
        Sistema = str(i.Nombre) + ' | ' + str(i.TipoCapaSistemaId.Nombre)
        ListaActivoTi.append(i.id)
        ListaActivoTi.append(Sistema)
        ListaActivoTi.append(0)
        ListaActivoTi.append(0)
        GrupoActivoTi.append(ListaActivoTi)
    for a in SeguridadTi:
        for b in GrupoActivoTi:
            if (a.ActivoTiId==b[0]) and (a.Cumplimiento==True):
                b[2]=b[2]+1
            elif (a.ActivoTiId==b[0]) and (a.Cumplimiento==False):
                b[3]=b[3]+1

    #cumplimiento por control
    GrupoAnalisisRiesgo = []
    for i in TratamientoRiesgo:
        ListaAnalisisRiesgo = []
        ListaAnalisisRiesgo.append(i.id)
        ListaAnalisisRiesgo.append(i.Control)
        ListaAnalisisRiesgo.append(0)
        ListaAnalisisRiesgo.append(0)
        GrupoAnalisisRiesgo.append(ListaAnalisisRiesgo)
    for a in SeguridadTi:
        for b in GrupoAnalisisRiesgo:
            if (a.TratamientoRiesgoId == b[0]) and (a.Cumplimiento=='T'):
                b[2]=b[2]+1
            elif (a.TratamientoRiesgoId == b[0]) and (a.Cumplimiento=='F'):
                b[3]=b[3]+1

    #cumplimiento por politica
    GrupoPolitica = []
    for i in CatalogoPolitica:
        ListaPolitica = []
        ListaPolitica.append(i.id)
        ListaPolitica.append(i.Nombre)
        ListaPolitica.append(0)
        ListaPolitica.append(0)
        GrupoPolitica.append(ListaPolitica)
    for a in SeguridadTi:
        for b in GrupoPolitica:
            if (a.DetallePoliticaId.CatalogoPoliticaId == b[0]) and (a.Cumplimiento==True):
                b[2]=b[2]+1
            elif (a.DetallePoliticaId.CatalogoPoliticaId == b[0]) and (a.Cumplimiento==False):
                b[3]=b[3]+1

    TotalActivoTi = 0
    TotalTipoVulnerabilidad = 0
    TotalCatalogoPolitica = 0
    for i in ActivoTi:
        TotalActivoTi = TotalActivoTi + 1
    for i in TipoVulnerabilidad:
        TotalTipoVulnerabilidad = TotalTipoVulnerabilidad + 1
    for i in CatalogoPolitica:
        TotalCatalogoPolitica = TotalCatalogoPolitica + 1
    Organizacion = db(db.Configuracion).select(db.Configuracion.Organizacion).first().Organizacion

    return dict(GrupoTipoTratamientoRiesgo=GrupoTipoTratamientoRiesgo, GrupoPolitica=GrupoPolitica, GrupoAnalisisRiesgo=GrupoAnalisisRiesgo, GrupoActivoTi=GrupoActivoTi, Parametro=Parametro, ActivoTi=ActivoTi, Plataforma=Plataforma, Region=Region, TipoCumplimiento=TipoCumplimiento, SeguridadTi=SeguridadTi, Periodo=Periodo, TotalSeguridadTi=TotalSeguridadTi, TotalActivoTi=TotalActivoTi, GrupoTipoCumplimiento=GrupoTipoCumplimiento, CountSeguridadTi=CountSeguridadTi, GrupoNivelMadurezControl=GrupoNivelMadurezControl, NivelMadurez=NivelMadurez, EfectividadControl=EfectividadControl, CatalogoPolitica=CatalogoPolitica, ListaPolitica=ListaPolitica, AnalisisRiesgo=AnalisisRiesgo, ListaAnalisisRiesgo=ListaAnalisisRiesgo, CountActivoTi=CountActivoTi, TotalTipoVulnerabilidad=TotalTipoVulnerabilidad, GrupoTipoVulnerabilidad=GrupoTipoVulnerabilidad, TipoVulnerabilidad=TipoVulnerabilidad, Organizacion=Organizacion, TotalCatalogoPolitica=TotalCatalogoPolitica)

@auth.requires_login()
def TableroAuditoria():
    if auth.has_membership(role='riskManager') or auth.has_membership(role='auditManager') or auth.has_membership(role='riskAnalyst') or auth.has_membership(role='auditAnalyst') or auth.has_membership(role='iformationOwner') or auth.has_membership(role='admin') or auth.has_membership(role='guest') or auth.has_membership(role='controlResp'):
        pass
    else:
        redirect(URL('default', 'index'))
    
    #Variables para los filtros de busqueda
    FiltroPeriodo = 0
    FiltroProceso = 0
    #FiltroPlataforma = 0
    FiltroRegion = 0
    FiltroMes = 0
    FiltroCumplimiento = 0
    Periodo = request.now.year
    Parametro = {}
    Parametro.update(dict(request.vars))

    #Query join desde la tabla de auditoria
    QueryAuditoria = (db.Auditoria.ProcesoId==db.Proceso.id) & (db.Auditoria.DetallePoliticaId==db.DetallePolitica.id) & (db.Auditoria.AnalisisRiesgoId==db.AnalisisRiesgo.id) & (db.Auditoria.TipoControlId==db.TipoControl.id) & (db.Auditoria.ClasificacionControlId==db.ClasificacionControl.id) & (db.Auditoria.TipoTratamientoRiesgoId==db.TipoTratamientoRiesgo.id) & (db.Auditoria.NivelMadurezId==db.NivelMadurez.id)
    QueryProceso = (db.Proceso.CicloNegocioId==db.CicloNegocio.id) & (db.Proceso.TipoProcesoId==db.TipoProceso.id) & (db.Proceso.RegionId==db.Region.id)
    QueryPolitica = (db.DetallePolitica.CatalogoPoliticaId==db.CatalogoPolitica.id)
    QueryAnalisisRiesgo    =       (db.AnalisisRiesgo.ClasificacionRiesgoId==db.ClasificacionRiesgo.id) & (db.AnalisisRiesgo.ObjetivoOrganizacionId==db.ObjetivoOrganizacion.id) & (db.AnalisisRiesgo.CriterioProbabilidadId==db.CriterioProbabilidad.id) & (db.AnalisisRiesgo.CriterioImpactoId==db.CriterioImpacto.id) & (db.ObjetivoOrganizacion.TipoObjetivoId==db.TipoObjetivo.id)      
    #QueryAuditoria = (QueryAuditoria) & (QueryProceso) & (QueryPolitica) & (QueryAnalisisRiesgo) & (db.Auditoria.AprobacionJefeAuditoria=='T')  & (db.CatalogoPolitica.AprobacionJefeRiesgo=='T') & (db.DetallePolitica.AprobacionJefeRiesgo=='T')
    QueryAuditoria = (QueryAuditoria) & (QueryProceso) & (QueryPolitica) & (QueryAnalisisRiesgo) & (db.Auditoria.AprobacionJefeAuditoria=='T')

    if request.vars.Periodo:
        Parametro['Periodo'] = request.vars.Periodo
        QueryPeriodo = (db.Auditoria.FechaRevision.year()==request.vars.Periodo)
        FiltroPeriodo = 1
    if request.vars.Proceso:
        Parametro['Proceso'] = request.vars.Proceso
        QueryProceso = (db.Auditoria.ProcesoId==request.vars.Proceso) 
        FiltroProceso = 1
    if request.vars.Region:
        Parametro['Region'] = request.vars.Region
        QueryRegion = ((db.Auditoria.ProcesoId==db.Proceso.id) & (db.Proceso.RegionId==request.vars.Region))
        FiltroRegion = 1
    if request.vars.Mes:
        Parametro['Mes'] = request.vars.Mes
        QueryMes=(db.Auditoria.FechaRevision.month()==request.vars.Mes)
        FiltroMes = 1
    #if request.vars.TipoCumplimiento:
    #    Parametro['TipoCumplimiento'] = request.vars.TipoCumplimiento
    #    QueryCumplimiento = (db.Auditoria.TipoCumplimientoId==request.vars.TipoCumplimiento)
    #    FiltroCumplimiento = 1

    if FiltroPeriodo == 1:
        QueryAuditoria = QueryAuditoria & QueryPeriodo
    if FiltroProceso == 1:
        QueryAuditoria = QueryAuditoria & QueryProceso
    if FiltroRegion == 1:
        QueryAuditoria = QueryAuditoria & QueryRegion
    if FiltroMes == 1:
        QueryAuditoria = QueryAuditoria & QueryMes
    #if FiltroCumplimiento == 1:
    #    QueryAuditoria = QueryAuditoria & QueryCumplimiento

    if auth.has_membership(role='riskManager') or auth.has_membership(role='auditManager') or auth.has_membership(role='riskAnalyst') or auth.has_membership(role='auditAnalyst') or auth.has_membership(role='admin') or auth.has_membership(role='guest'):
        QueryAuditoria = QueryAuditoria

    elif auth.has_membership(role='controlResp'):
        controlId=[]
        for a in db(db.Auditoria.AprobacionJefeAuditoria == 'T').select(db.Auditoria.id, db.Auditoria.ResponsableControl):
            try:
                for b in str(str(a.ResponsableControl).replace(' ','')).split(','):
                    if b==auth.user.username:
                        controlId.append(int(a.id))
            except:
                pass
        query = db.Auditoria.id.belongs(controlId)
        QueryAuditoria = (QueryAuditoria) & (query)

    CountAuditoria = db.Auditoria.id.count()
    CountProceso = db.Proceso.id.count()
    EfectividadControl = db((QueryAuditoria) & ( db.Auditoria.EfectividadControl=='T' ) ).count()
    TotalAuditoria = db(QueryAuditoria).count()
    #CountTipoCumplimiento = db.TipoCumplimiento.id.count()
    #CountEfectividadControl = db((QueryAuditoria) & (db.Auditoria.EfectividadControl=='T')).count()
    
    
    GrupoTipoTratamientoRiesgo = db(QueryAuditoria).select(db.TipoTratamientoRiesgo.Nombre, db.TipoTratamientoRiesgo.Color, CountAuditoria, groupby=db.Auditoria.TipoTratamientoRiesgoId)
    GrupoTipoCumplimiento= db(QueryAuditoria).select(db.Auditoria.Cumplimiento, db.Proceso.Nombre, CountAuditoria, groupby=db.Auditoria.Cumplimiento)
    #GrupoProceso = db(QueryAuditoria).select(db.Proceso.Nombre, CountAuditoria, groupby=db.Auditoria.ProcesoId)
    #GrupoAuditoria = db(QueryAuditoria).select(db.Auditoria.ALL, CountAuditoria, groupby=db.Auditoria.ProcesoId)
    GrupoNivelMadurezControl = db(QueryAuditoria).select(db.Auditoria.NivelMadurezId, CountAuditoria, groupby=db.Auditoria.NivelMadurezId)

    Proceso = db(QueryAuditoria).select(db.Proceso.ALL, distinct=True)
    AnalisisRiesgo = db(QueryAuditoria).select(db.AnalisisRiesgo.ALL, distinct=True)
    Region = db(QueryAuditoria).select(db.Region.ALL, distinct=True)
    Auditoria = db(QueryAuditoria).select(db.Auditoria.ALL, distinct=True)
    CatalogoPolitica = db(QueryAuditoria).select(db.CatalogoPolitica.ALL, distinct=True)
    
    TipoTratamientoRiesgo = db(QueryAuditoria).select(db.TipoTratamientoRiesgo.ALL, distinct=True)
    #TipoCumplimiento = db(QueryAuditoria).select(db.TipoCumplimiento.ALL, distinct=True)
    NivelMadurez = db(QueryAuditoria).select(db.NivelMadurez.ALL, orderby=db.NivelMadurez.Valor, distinct=True)

    #ListaProceso = []
    #ListaPolitica = []
    #ListaAnalisisRiesgo = []
    #TotalProceso = 0
    #TotalAuditoria = 0
    #TotalTipoVulnerabilidad = 0
    
    #Cumplimiento por proceso
    GrupoProceso = []
    for i in Proceso:
        ListaProceso = []
        ProcesoNombre = str(i.RegionId.Nombre) + ' | ' + str(i.Nombre)
        ListaProceso.append(i.id)
        ListaProceso.append(ProcesoNombre)
        ListaProceso.append(0)
        ListaProceso.append(0)
        GrupoProceso.append(ListaProceso)
    for a in Auditoria:
        for b in GrupoProceso:
            if (a.ProcesoId==b[0]) and (a.Cumplimiento==True):
                b[2]=b[2]+1
            elif (a.ProcesoId==b[0]) and (a.Cumplimiento==False):
                b[3]=b[3]+1

    #cumplimiento por riesgo
    GrupoAnalisisRiesgo = []
    for i in AnalisisRiesgo:
        ListaAnalisisRiesgo = []
        ListaAnalisisRiesgo.append(i.id)
        ListaAnalisisRiesgo.append(i.Riesgo)
        ListaAnalisisRiesgo.append(0)
        ListaAnalisisRiesgo.append(0)
        GrupoAnalisisRiesgo.append(ListaAnalisisRiesgo)
    for a in Auditoria:
        for b in GrupoAnalisisRiesgo:
            if (a.AnalisisRiesgoId == b[0]) and (a.Cumplimiento==True):
                b[2]=b[2]+1
            elif (a.AnalisisRiesgoId == b[0]) and (a.Cumplimiento==False):
                b[3]=b[3]+1

    #cumplimiento por politica
    GrupoPolitica = []
    for i in CatalogoPolitica:
        ListaPolitica = []
        ListaPolitica.append(i.id)
        ListaPolitica.append(i.Nombre)
        ListaPolitica.append(0)
        ListaPolitica.append(0)
        GrupoPolitica.append(ListaPolitica)
    for a in Auditoria:
        for b in GrupoPolitica:
            if (a.DetallePoliticaId.CatalogoPoliticaId == b[0]) and (a.Cumplimiento==True):
                b[2]=b[2]+1
            elif (a.DetallePoliticaId.CatalogoPoliticaId == b[0]) and (a.Cumplimiento==False):
                b[3]=b[3]+1

    TotalProceso = 0
    #TotalTipoVulnerabilidad = 0
    TotalCatalogoPolitica = 0
    #NivelMadurezMax = []
    for i in Proceso:
        TotalProceso = TotalProceso + 1
    for i in CatalogoPolitica:
        TotalCatalogoPolitica = TotalCatalogoPolitica + 1

    Organizacion = db(db.Configuracion).select(db.Configuracion.Organizacion).first().Organizacion

    return dict(EfectividadControl=EfectividadControl, TotalCatalogoPolitica=TotalCatalogoPolitica, GrupoPolitica=GrupoPolitica, GrupoAuditoria=GrupoProceso, Proceso=Proceso, Parametro=Parametro, Region=Region, Auditoria=Auditoria, Periodo=Periodo, TotalAuditoria=TotalAuditoria, ListaProceso=ListaProceso, GrupoProceso=GrupoProceso, TotalProceso=TotalProceso, CountAuditoria=CountAuditoria, GrupoTipoTratamientoRiesgo=GrupoTipoTratamientoRiesgo, GrupoNivelMadurezControl=GrupoNivelMadurezControl, NivelMadurez=NivelMadurez, CatalogoPolitica=CatalogoPolitica, ListaPolitica=ListaPolitica, AnalisisRiesgo=AnalisisRiesgo, ListaAnalisisRiesgo=ListaAnalisisRiesgo, CountProceso=CountProceso, Organizacion=Organizacion)

@auth.requires_login()
def TableroEvaluacionControl():
    if auth.has_membership(role='riskManager') or auth.has_membership(role='auditManager') or auth.has_membership(role='riskAnalyst') or auth.has_membership(role='auditAnalyst') or auth.has_membership(role='iformationOwner') or auth.has_membership(role='admin') or auth.has_membership(role='guest') or auth.has_membership(role='controlResp'):
        pass	
    else:
        redirect(URL('default', 'index'))
    
    Parametro = {}
    Parametro.update(dict(request.vars))

    QueryAuditoria = (db.EvaluacionControl.TratamientoRiesgoId==db.TratamientoRiesgo.id) & (db.EvaluacionControl.CatalogoControlId==db.CatalogoControl.id) & (db.EvaluacionControl.DetallePoliticaId==db.DetallePolitica.id) & (db.EvaluacionControl.ProcesoId==db.Proceso.id) & (db.EvaluacionControl.ActivoTiId==db.ActivoTi.id) & (db.EvaluacionControl.NivelMadurezId==db.NivelMadurez.id) & (db.EvaluacionControl.TipoRevisionId==db.TipoRevision.id) & (db.EvaluacionControl.AprobacionJefeAuditoria=='T')

    queryTratamientoRiesgoAnalisisRiesgo = (db.TratamientoRiesgoAnalisisRiesgo.TratamientoRiesgoId==db.TratamientoRiesgo.id) & (db.TratamientoRiesgoAnalisisRiesgo.AnalisisRiesgoId==db.AnalisisRiesgo.id)

    if request.vars.Proceso:
        Parametro['Proceso'] = request.vars.Proceso
        QueryAuditoria = QueryAuditoria & (db.EvaluacionControl.ProcesoId==request.vars.Proceso) 
    if request.vars.ActivoTi:
        Parametro['ActivoTi'] = request.vars.ActivoTi
        QueryAuditoria = QueryAuditoria & (db.EvaluacionControl.ActivoTiId==request.vars.ActivoTi) 
    if request.vars.Politica:
        Parametro['Politica'] = request.vars.Politica
        QueryAuditoria = QueryAuditoria & (db.EvaluacionControl.DetallePoliticaId==db.DetallePolitica.id)
    if request.vars.Factor:
        Parametro['Factor'] = request.vars.Factor
        QueryAuditoria = QueryAuditoria & (db.EvaluacionControl.TratamientoRiesgoId==request.vars.Factor)
    if request.vars.Control:
        Parametro['Control'] = request.vars.Control
        QueryAuditoria = QueryAuditoria & (db.EvaluacionControl.CatalogoControlId==request.vars.Control)

    if auth.has_membership(role='riskManager') or auth.has_membership(role='auditManager') or auth.has_membership(role='riskAnalyst') or auth.has_membership(role='auditAnalyst') or auth.has_membership(role='admin') or auth.has_membership(role='guest'):
        QueryAuditoria = QueryAuditoria

    elif auth.has_membership(role='controlResp'):
        controlId=[]
        for a in db(db.EvaluacionControl.AprobacionJefeAuditoria == 'T').select(db.EvaluacionControl.id, db.EvaluacionControl.ResponsableControl):
            try:
                for b in str(str(a.ResponsableControl).replace(' ','')).split(','):
                    if b==auth.user.username:
                        controlId.append(int(a.id))
            except:
                pass
        query = db.EvaluacionControl.id.belongs(controlId)
        QueryAuditoria = (QueryAuditoria) & (query)

    CountAuditoria = db.EvaluacionControl.id.count()
    CountProceso = db.Proceso.id.count()
    EfectividadControl = db((QueryAuditoria) & ( db.EvaluacionControl.EfectividadControl=='T' )).count()
    CumplimientoControl = db((QueryAuditoria) & ( db.EvaluacionControl.CumplimientoControl=='T' ) & (db.EvaluacionControl.TipoRevisionId==2) ).count()
    TotalAuditoria = db(QueryAuditoria).count()
    TotalAuditoriaCumplimiento = db(QueryAuditoria & (db.EvaluacionControl.TipoRevisionId==2)).count()
    
    #GrupoTipoCumplimiento= db(QueryAuditoria & (db.TratamientoRiesgo.ProcesoRegionId==db.ProcesoRegion.id) & (db.ProcesoRegion.ProcesoId==db.Proceso.id) ).select(db.EvaluacionControl.CumplimientoControl, db.Proceso.Nombre, CountAuditoria, groupby=db.EvaluacionControl.CumplimientoControl)
    #GrupoTipoCumplimiento= db(QueryAuditoria & (db.TratamientoRiesgo.ProcesoRegionId==db.ProcesoRegion.id) & (db.ProcesoRegion.ProcesoId==db.Proceso.id) ).select(db.EvaluacionControl.CumplimientoControl, db.Proceso.Nombre, CountAuditoria)
    GrupoNivelMadurezControl = db(QueryAuditoria).select(db.EvaluacionControl.NivelMadurezId, CountAuditoria, groupby=db.EvaluacionControl.NivelMadurezId)

    Proceso = db(QueryAuditoria & (db.TratamientoRiesgo.ProcesoId==db.Proceso.id) ).select(db.Proceso.ALL, distinct=True)
    ActivoTi = db(QueryAuditoria & (db.TratamientoRiesgo.ActivoTiId==db.ActivoTi.id) ).select(db.ActivoTi.ALL, distinct=True)
    #Region = db(QueryAuditoria & (db.TratamientoRiesgo.ProcesoId==db.Proceso.id) ).select(db.Region.ALL, distinct=True)
    #CatalogoPolitica = db(QueryAuditoria & (db.TratamientoRiesgo.DetallePoliticaId==db.DetallePolitica.id) & (db.DetallePolitica.RegionPoliticaId==db.RegionPolitica.id) & (db.RegionPolitica.CatalogoPoliticaId==db.CatalogoPolitica.id)).select(db.CatalogoPolitica.ALL, distinct=True)
    CatalogoPolitica = db(QueryAuditoria ).select(db.CatalogoPolitica.ALL, distinct=True)
    CatalogoControl = db(QueryAuditoria ).select(db.CatalogoControl.ALL, distinct=True)
    FactorRiesgo = db(QueryAuditoria ).select(db.TratamientoRiesgo.ALL, distinct=True)

    #AnalisisRiesgo = db(QueryAuditoria & (db.TratamientoRiesgo.AnalisisRiesgoId==db.AnalisisRiesgo.id) ).select(db.AnalisisRiesgo.ALL, distinct=True)
    AnalisisRiesgo = db(QueryAuditoria & queryTratamientoRiesgoAnalisisRiesgo ).select(db.AnalisisRiesgo.ALL, distinct=True)
    Auditoria = db(QueryAuditoria & (db.TratamientoRiesgo.CriterioImpactoId==db.CriterioRiesgo.CriterioImpactoId) & (db.TratamientoRiesgo.CriterioProbabilidadId==db.CriterioRiesgo.CriterioProbabilidadId) ).select(db.EvaluacionControl.ALL, db.CriterioRiesgo.ALL, distinct=True)
    
    TipoTratamientoRiesgo = db(QueryAuditoria).select(db.TipoTratamientoRiesgo.ALL, distinct=True)
    NivelMadurez = db(QueryAuditoria).select(db.NivelMadurez.ALL, orderby=db.NivelMadurez.Valor, distinct=True)

    GrupoProceso = []
    for i in Proceso:
        ListaProceso = []
        #ProcesoNombre = str(i.RegionId.Nombre) + ' | ' + str(i.Nombre)
        ProcesoNombre = str(i.Nombre)
        ListaProceso.append(i.id)
        ListaProceso.append(ProcesoNombre)
        ListaProceso.append(0) #cumplimiento
        ListaProceso.append(0) #cumplimiento
        ListaProceso.append(0) #diseno
        ListaProceso.append(0) #diseno
        GrupoProceso.append(ListaProceso)
    #----------------------------------------------------------------------------
    #La logica toma las 3 lineas de defensa DuenoProceso-RiesgosControl-Auditoria
    #----------------------------------------------------------------------------
    for a in Auditoria:
        for b in GrupoProceso:
            #if (a.EvaluacionControl.ProcesoRegionId.ProcesoId==b[0]) and (a.EvaluacionControl.CumplimientoControl==True) and (a.EvaluacionControl.TipoRevisionId==2):
            if (a.EvaluacionControl.ProcesoId==b[0]) and (a.EvaluacionControl.CumplimientoControl==True) and (a.EvaluacionControl.TipoRevisionId==3):
                b[2]=b[2]+1
            #elif (a.EvaluacionControl.ProcesoRegionId.ProcesoId==b[0]) and (a.EvaluacionControl.CumplimientoControl==False) and (a.EvaluacionControl.TipoRevisionId==2):
            elif (a.EvaluacionControl.ProcesoId==b[0]) and (a.EvaluacionControl.CumplimientoControl==False) and (a.EvaluacionControl.TipoRevisionId==3):
                b[3]=b[3]+1
            #if (a.EvaluacionControl.ProcesoRegionId.ProcesoId==b[0]) and (a.EvaluacionControl.EfectividadControl==True):
            if (a.EvaluacionControl.ProcesoId==b[0]) and (a.EvaluacionControl.EfectividadControl==True):
                b[4]=b[4]+1
            #elif (a.EvaluacionControl.ProcesoRegionId.ProcesoId==b[0]) and (a.EvaluacionControl.EfectividadControl==False):
            elif (a.EvaluacionControl.ProcesoId==b[0]) and (a.EvaluacionControl.EfectividadControl==False):
                b[5]=b[5]+1

    GrupoActivoTi = []
    for i in ActivoTi:
        ListaActivoTi = []
        #ProcesoNombre = str(i.RegionId.Nombre) + ' | ' + str(i.Nombre)
        ListaActivoTi.append(i.id)
        ListaActivoTi.append(i.Nombre)
        ListaActivoTi.append(0) #cumplimiento
        ListaActivoTi.append(0) #cumplimiento
        ListaActivoTi.append(0) #diseno
        ListaActivoTi.append(0) #diseno
        GrupoActivoTi.append(ListaActivoTi)
    for a in Auditoria:
        for b in GrupoActivoTi:
            #if (a.EvaluacionControl.ActivoTiRegionId.ActivoTiId==b[0]) and (a.EvaluacionControl.CumplimientoControl==True) and (a.EvaluacionControl.TipoRevisionId==2):
            if (a.EvaluacionControl.ActivoTiId==b[0]) and (a.EvaluacionControl.CumplimientoControl==True) and (a.EvaluacionControl.TipoRevisionId==3):
                b[2]=b[2]+1
            #elif (a.EvaluacionControl.ActivoTiRegionId.ActivoTiId==b[0]) and (a.EvaluacionControl.CumplimientoControl==False)and (a.EvaluacionControl.TipoRevisionId==2):
            elif (a.EvaluacionControl.ActivoTiId==b[0]) and (a.EvaluacionControl.CumplimientoControl==False)and (a.EvaluacionControl.TipoRevisionId==3):
                b[3]=b[3]+1
            #if (a.EvaluacionControl.ActivoTiRegionId.ActivoTiId==b[0]) and (a.EvaluacionControl.EfectividadControl==True):
            if (a.EvaluacionControl.ActivoTiId==b[0]) and (a.EvaluacionControl.EfectividadControl==True):
                b[4]=b[4]+1
            #elif (a.EvaluacionControl.ActivoTiRegionId.ActivoTiId==b[0]) and (a.EvaluacionControl.EfectividadControl==False):
            elif (a.EvaluacionControl.ActivoTiId==b[0]) and (a.EvaluacionControl.EfectividadControl==False):
                b[5]=b[5]+1
    '''
    #cumplimiento por riesgo
    GrupoAnalisisRiesgo = []
    for i in AnalisisRiesgo:
        ListaAnalisisRiesgo = []
        ListaAnalisisRiesgo.append(i.id)
        ListaAnalisisRiesgo.append(i.Riesgo)
        ListaAnalisisRiesgo.append(0)
        ListaAnalisisRiesgo.append(0)
        ListaAnalisisRiesgo.append(0)
        ListaAnalisisRiesgo.append(0)
        GrupoAnalisisRiesgo.append(ListaAnalisisRiesgo)
    for a in Auditoria:
        for b in GrupoAnalisisRiesgo:
            if (a.EvaluacionControl.TratamientoRiesgoId.AnalisisRiesgoId == b[0]) and (a.EvaluacionControl.CumplimientoControl==True) and (a.EvaluacionControl.TipoRevisionId==2):
                b[2]=b[2]+1
            elif (a.EvaluacionControl.TratamientoRiesgoId.AnalisisRiesgoId == b[0]) and (a.EvaluacionControl.CumplimientoControl==False) and (a.EvaluacionControl.TipoRevisionId==2):
                b[3]=b[3]+1
            if (a.EvaluacionControl.TratamientoRiesgoId.AnalisisRiesgoId == b[0]) and (a.EvaluacionControl.EfectividadControl==True):
                b[4]=b[4]+1
            elif (a.EvaluacionControl.TratamientoRiesgoId.AnalisisRiesgoId == b[0]) and (a.EvaluacionControl.EfectividadControl==False):
                b[5]=b[5]+1
    '''
    #cumplimiento por politica
    GrupoPolitica = []
    for i in CatalogoPolitica:
        ListaPolitica = []
        ListaPolitica.append(i.id)
        ListaPolitica.append(i.Nombre)
        ListaPolitica.append(0)
        ListaPolitica.append(0)
        ListaPolitica.append(0)
        ListaPolitica.append(0)
        GrupoPolitica.append(ListaPolitica)
    for a in Auditoria:
        for b in GrupoPolitica:
            #if (a.EvaluacionControl.DetallePoliticaId.RegionPoliticaId.CatalogoPoliticaId == b[0]) and (a.EvaluacionControl.CumplimientoControl==True) and (a.EvaluacionControl.TipoRevisionId==2):
            if (a.EvaluacionControl.DetallePoliticaId == b[0]) and (a.EvaluacionControl.CumplimientoControl==True) and (a.EvaluacionControl.TipoRevisionId==3):
                b[2]=b[2]+1
            #elif (a.EvaluacionControl.DetallePoliticaId.RegionPoliticaId.CatalogoPoliticaId == b[0]) and (a.EvaluacionControl.CumplimientoControl==False) and (a.EvaluacionControl.TipoRevisionId==2):
            elif (a.EvaluacionControl.DetallePoliticaId == b[0]) and (a.EvaluacionControl.CumplimientoControl==False) and (a.EvaluacionControl.TipoRevisionId==3):
                b[3]=b[3]+1
            #if (a.EvaluacionControl.DetallePoliticaId.RegionPoliticaId.CatalogoPoliticaId == b[0]) and (a.EvaluacionControl.EfectividadControl==True):
            if (a.EvaluacionControl.DetallePoliticaId == b[0]) and (a.EvaluacionControl.EfectividadControl==True):
                b[4]=b[4]+1
            #elif (a.EvaluacionControl.DetallePoliticaId.RegionPoliticaId.CatalogoPoliticaId== b[0]) and (a.EvaluacionControl.EfectividadControl==False):
            elif (a.EvaluacionControl.DetallePoliticaId== b[0]) and (a.EvaluacionControl.EfectividadControl==False):
                b[5]=b[5]+1

    TotalProceso = 0
    #TotalTipoVulnerabilidad = 0
    TotalCatalogoPolitica = 0
    #NivelMadurezMax = []
    for i in Proceso:
        TotalProceso = TotalProceso + 1
    for i in CatalogoPolitica:
        TotalCatalogoPolitica = TotalCatalogoPolitica + 1

    Organizacion = db(db.Configuracion).select(db.Configuracion.Organizacion).first().Organizacion

    return dict(EfectividadControl=EfectividadControl, TotalCatalogoPolitica=TotalCatalogoPolitica, GrupoPolitica=GrupoPolitica, GrupoProceso=GrupoProceso, Proceso=Proceso, Parametro=Parametro, Auditoria=Auditoria, TotalAuditoria=TotalAuditoria, TotalProceso=TotalProceso, CountAuditoria=CountAuditoria, GrupoNivelMadurezControl=GrupoNivelMadurezControl, NivelMadurez=NivelMadurez, CatalogoPolitica=CatalogoPolitica, AnalisisRiesgo=AnalisisRiesgo, CumplimientoControl=CumplimientoControl, Organizacion=Organizacion, ActivoTi=ActivoTi, GrupoActivoTi=GrupoActivoTi, TotalAuditoriaCumplimiento=TotalAuditoriaCumplimiento, CatalogoControl=CatalogoControl, FactorRiesgo=FactorRiesgo)

@auth.requires_login()
def Configuracion():
    db.Configuracion.id.readable = False
    #db.Configuracion.MatrizRiesgo.readable = False
    #db.Configuracion.MatrizRiesgo.writable = False
    #if versionGratuita==1:
    #    db.Configuracion.Organizacion.writable = False
    #    db.Configuracion.Lenguaje.writable = False
    #if auth.has_membership(role='admin') or auth.has_membership(role='riskManager'):
    if auth.has_membership(role='admin'):
        return dict(form=SQLFORM.grid(db.Configuracion, searchable=True, create=False, editable=True, deletable=False, user_signature=True, paginate=15, maxtextlength=250))
    else:
        return dict(form=SQLFORM.grid(db.Configuracion, searchable=True, create=False, editable=False, deletable=False, user_signature=True, paginate=15, maxtextlength=250))

@auth.requires_login()
def Documentacion():
    #db.Documentacion.id.readable = False
    db.Documentacion.LogAnalistaRiesgo.writable=False
    db.Documentacion.LogJefeRiesgo.writable=False
    db.Documentacion.AprobacionAnalistaRiesgo.writable=False
    db.Documentacion.AprobacionJefeRiesgo.writable=False

    Tabla = "Documentacion"
    fields = (db.Documentacion.id, db.Documentacion.Nombre, db.Documentacion.Descripcion, db.Documentacion.Archivo, db.Documentacion.AprobacionJefeRiesgo)
    if request.vars.get('keywords'):
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1", base64.b64encode(request.vars.get('keywords'))] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0", base64.b64encode(request.vars.get('keywords'))]))]
    else:
        links = [lambda row: A(T('Approve'),_class='button btn btn-success',_href=URL("default","RegistroLog", args=[row.id, Tabla, "1"] )), lambda row: A(T('Unlock'),_class='button btn btn-primary',_href=URL("default","RegistroLog", args=[row.id, Tabla, "0"]))]
        
    query = (db.Documentacion.AprobacionJefeRiesgo=='T')
    if auth.has_membership(role='admin') or auth.has_membership(role='riskManager') or auth.has_membership(role='riskAnalyst'):
        ActualizaAprobacion(Tabla)
        return dict(form=SQLFORM.grid(db.Documentacion, fields=fields, links=links, searchable=True, create=True, editable=True, deletable=True, user_signature=True, paginate=10, maxtextlength=500))
    else:
        return dict(form=SQLFORM.grid(query=query, fields=fields, searchable=True, create=False, editable=False, deletable=False, user_signature=True, paginate=10, maxtextlength=500))
    #else:
    #    redirect(URL('default','index'))

#@auth.requires_login()
def Licencia():
    return dict(Licencia='')
#--------------
# IT Security
#--------------
####manejar los parametros GET y poner grafico nuevo

@auth.requires_login()
#@auth.requires(auth.has_membership(role='adminItSecurity') or auth.has_membership(role='auditorItSecurity'))
#@auth.requires(auth.has_membership(role='adminItSecurity'))
def dataTypes():
    if auth.has_membership(role='adminItSecurity') or auth.has_membership(role='auditorItSecurity'):
        pass
    else:
        redirect(URL('default', 'index'))
        
    db.dataTypes.id.readable=False
    if auth.has_membership(role='adminItSecurity'):
        form = SQLFORM.grid(db.dataTypes, searchable=True, create=True, editable=True, deletable=True, user_signature=True, paginate=15, maxtextlength=250)
    elif auth.has_membership(role='auditorItSecurity'):
        form = SQLFORM.grid(db.dataTypes, searchable=True, create=False, editable=False, deletable=False, user_signature=True, paginate=15, maxtextlength=250)
    return dict(form=form)

@auth.requires_login()
#@auth.requires(auth.has_membership(role='adminItSecurity') or auth.has_membership(role='auditorItSecurity'))
#@auth.requires(auth.has_membership(role='adminItSecurity'))
def threatActors():
    if auth.has_membership(role='adminItSecurity') or auth.has_membership(role='auditorItSecurity'):
        pass
    else:
        redirect(URL('default', 'index'))
        
    db.threatActors.id.readable = False
    if auth.has_membership(role='adminItSecurity'):
        form = SQLFORM.grid(db.threatActors, searchable=True, create=True, editable=True, deletable=True, user_signature=True, paginate=15, maxtextlength=250)
    elif auth.has_membership(role='auditorItSecurity'):
        form = SQLFORM.grid(db.threatActors, searchable=True, create=False, editable=False, deletable=False, user_signature=True, paginate=15, maxtextlength=250)
    return dict(form=form)

@auth.requires_login()
#@auth.requires(auth.has_membership(role='adminItSecurity') or auth.has_membership(role='auditorItSecurity'))
#@auth.requires(auth.has_membership(role='adminItSecurity'))
def threatComplexity():
    if auth.has_membership(role='adminItSecurity') or auth.has_membership(role='auditorItSecurity'):
        pass
    else:
        redirect(URL('default', 'index'))
        
    db.threatComplexity.id.readable = False
    if auth.has_membership(role='adminItSecurity'):
        form = SQLFORM.grid(db.threatComplexity, searchable=True, create=True, editable=True, deletable=True, user_signature=True, paginate=15, maxtextlength=250)
    elif auth.has_membership(role='auditorItSecurity'):
        form = SQLFORM.grid(db.threatComplexity, searchable=True, create=False, editable=False, deletable=False, user_signature=True, paginate=15, maxtextlength=250)
    return dict(form=form)

@auth.requires_login()
#@auth.requires(auth.has_membership(role='adminItSecurity') or auth.has_membership(role='auditorTI') or auth.has_membership(role='auditorItSecurity'))
#@auth.requires(auth.has_membership(role='adminItSecurity') or auth.has_membership(role='auditorItSecurity'))
#@auth.requires(auth.has_membership(role='adminItSecurity'))
def businessUnits():

    if auth.has_membership(role='adminItSecurity') or auth.has_membership(role='auditorItSecurity'):
        pass
    else:
        redirect(URL('default', 'index'))
        
    db.businessUnits.id.readable = False
    if auth.has_membership(role='adminItSecurity'):
        form = SQLFORM.grid(db.businessUnits, searchable=True, create=True, editable=True, deletable=True, user_signature=True, paginate=15, maxtextlength=250)
    #elif auth.has_membership(role='auditorTI'):
    #    form = SQLFORM.grid(db.businessUnits, searchable=True, create=True, editable=False, deletable=False, user_signature=True, paginate=15, maxtextlength=250)
    elif auth.has_membership(role='auditorItSecurity'):
        form = SQLFORM.grid(db.businessUnits, searchable=True, create=False, editable=False, deletable=False, user_signature=True, paginate=15, maxtextlength=250)
    return dict(form=form)

@auth.requires_login()
#@auth.requires(auth.has_membership(role='adminItSecurity'))
#@auth.requires(auth.has_membership(role='adminItSecurity') or auth.has_membership(role='auditorItSecurity'))
def regions():
    if auth.has_membership(role='adminItSecurity') or auth.has_membership(role='auditorItSecurity'):
        pass
    else:
        redirect(URL('default', 'index'))
        
    db.regions.id.readable=False
    if auth.has_membership(role='adminItSecurity'):
        form = SQLFORM.grid(db.regions, searchable=True, create=True, editable=True, deletable=True, user_signature=True, paginate=15, maxtextlength=250)
    elif auth.has_membership(role='auditorItSecurity'):
        form = SQLFORM.grid(db.regions, searchable=True, create=False, editable=False, deletable=False, user_signature=True, paginate=15, maxtextlength=250)
    return dict(form=form)

@auth.requires_login()
#@auth.requires(auth.has_membership(role='adminItSecurity') or auth.has_membership(role='auditorItSecurity'))
def riskTypes():
    if auth.has_membership(role='adminItSecurity') or auth.has_membership(role='auditorItSecurity'):
        pass
    else:
        redirect(URL('default', 'index'))
        
    if auth.has_membership(role='adminItSecurity'):
        form = SQLFORM.grid(db.riskTypes, searchable=True, create=True, editable=True, deletable=True, user_signature=True, paginate=15, maxtextlength=250)    
    elif auth.has_membership(role='auditorItSecurity'):
        form = SQLFORM.grid(db.riskTypes, searchable=True, create=False, editable=False, deletable=False, user_signature=True, paginate=15, maxtextlength=250)
    return dict(form=form)


#-----------------------
# Information Gathering
#-----------------------

@auth.requires_login()
#@auth.requires(auth.has_membership(role='adminItSecurity')or auth.has_membership(role='auditorItSecurity'))
#@auth.requires(auth.has_membership(role='adminItSecurity'))
def services():
    db.services.id.readable = False
    if auth.has_membership(role='adminItSecurity'):
        form = SQLFORM.grid(db.services, searchable=True, create=True, editable=True, deletable=True, user_signature=True, paginate=15, maxtextlength=250)
    #elif auth.has_membership(role='auditorItSecurity'):
    #    db.services.serviceDescription.readable=False
    #    db.services.serviceInfoGathering.readable=False
    #    db.services.serviceDocs.readable=False
    #    form = SQLFORM.grid(db.services, searchable=True, create=False, editable=False, deletable=False, user_signature=True, paginate=15, maxtextlength=250)
        return dict(form=form)
    else:
        redirect(URL('default','index'))

#--------------------------
# Vulnerability Assessment
#--------------------------
@auth.requires_login()
def TipoRiesgo():
    table = 'tipos_riesgo'
    if auth.has_membership(role='admin') or auth.has_membership(role='riskSupervisor'):
        return dict(form=SQLFORM.grid(db.tipo_riesgo, searchable=True, create=True, user_signature=True, editable=True, paginate=15, maxtextlength=300))
    elif auth.has_membership(role='riskManagement'):
        return dict(form=SQLFORM.grid(db.tipo_riesgo, searchable=True, create=False, deletable=False, user_signature=True, editable=False, paginate=15, maxtextlength=300))
    else:
        redirect(URL('default','index'))
        
@auth.requires_login()
#@auth.requires(auth.has_membership(role='guest') or auth.has_membership(role='manager') or auth.has_membership(role='admin') or auth.has_membership(role='riskManagement') or auth.has_membership(role='auditor'))
def plataforma_add():
    if auth.has_membership(role='admin') or auth.has_membership(role='riskManagement'):
        return dict(form=SQLFORM.grid(db.plataforma, searchable=True, create=True, user_signature=True, editable=True, paginate=15, maxtextlength=300))
    else:
        redirect(URL('default','index'))
    #else:
    #    return dict(form=SQLFORM.grid(db.plataforma, searchable=True, create=False, user_signature=True, editable=False, paginate=15, maxtextlength=300))

@auth.requires_login()
@auth.requires(auth.has_membership(role='riskManager') or auth.has_membership(role='auditManager') or auth.has_membership(role='riskAnalyst') or auth.has_membership(role='auditAnalyst') or auth.has_membership(role='processOwner') or auth.has_membership(role='controlResp') or auth.has_membership(role='admin') or auth.has_membership(role='guest'))
def MatrizRiesgo():
    return TableroRiesgo()

@auth.requires_login()
@auth.requires(auth.has_membership(role='riskManager') or auth.has_membership(role='auditManager') or auth.has_membership(role='riskAnalyst') or auth.has_membership(role='auditAnalyst') or auth.has_membership(role='processOwner') or auth.has_membership(role='controlResp') or auth.has_membership(role='admin') or auth.has_membership(role='guest'))
def FactorRiesgo():
    '''
    #------------------------------------------------------------------------------
    #Pendiente recibir parametros HTTP para modificar los queries
    #------------------------------------------------------------------------------
    queryAnalisisRiesgo = (db.AnalisisRiesgo.AprobacionJefeRiesgo=='T')
    queryAnalisisRiesgoClasificacionRiesgo = (db.AnalisisRiesgoClasificacionRiesgo.AnalisisRiesgoId==db.AnalisisRiesgo.id) & (db.AnalisisRiesgoClasificacionRiesgo.ClasificacionRiesgoId==db.ClasificacionRiesgo.id) & (db.AnalisisRiesgoClasificacionRiesgo.AprobacionJefeRiesgo=='T')
    queryAnalisisRiesgoObjetivoOrganizacion = (db.AnalisisRiesgoObjetivoOrganizacion.AnalisisRiesgoId==db.AnalisisRiesgo.id) & (db.AnalisisRiesgoObjetivoOrganizacion.ObjetivoOrganizacionId==db.ObjetivoOrganizacion.id) & (db.AnalisisRiesgoObjetivoOrganizacion.AprobacionJefeRiesgo=='T')
    queryTratamientoRiesgoAnalisisRiesgo = (db.TratamientoRiesgoAnalisisRiesgo.TratamientoRiesgoId==db.TratamientoRiesgo.id) & (db.TratamientoRiesgoAnalisisRiesgo.AnalisisRiesgoId==db.AnalisisRiesgo.id) & (db.TratamientoRiesgoAnalisisRiesgo.AprobacionJefeRiesgo=='T')
    queryTotalAnalisisRiesgo = queryAnalisisRiesgo & queryAnalisisRiesgoClasificacionRiesgo & queryAnalisisRiesgoObjetivoOrganizacion & queryTratamientoRiesgoAnalisisRiesgo

    queryTratamientoRiesgo = (db.TratamientoRiesgo.ProcesoId==db.Proceso.id) & (db.TratamientoRiesgo.ActivoTiId==db.ActivoTi.id) & (db.TratamientoRiesgo.TipoVulnerabilidadId==db.TipoVulnerabilidad.id) & (db.TratamientoRiesgo.CriterioImpactoId==db.CriterioRiesgo.CriterioImpactoId) & (db.TratamientoRiesgo.CriterioProbabilidadId==db.CriterioRiesgo.CriterioProbabilidadId) & (db.TratamientoRiesgo.TipoTratamientoRiesgoId==db.TipoTratamientoRiesgo.id) & (db.TratamientoRiesgo.CatalogoControlId==db.CatalogoControl.id) & (db.TratamientoRiesgo.TipoControlId==db.TipoControl.id) & (db.TratamientoRiesgo.ClasificacionControlId==db.ClasificacionControl.id) & (db.TratamientoRiesgo.AprobacionJefeRiesgo=='T')
    queryActivoTi = (db.ActivoTi.TipoCapaSistemaId==db.TipoCapaSistema.id) & (db.ActivoTi.AprobacionJefeRiesgo=='T')
    queryProcesoRegion = (db.ProcesoRegion.ProcesoId==db.Proceso.id) & (db.ProcesoRegion.RegionId==db.Region.id) & (db.ProcesoRegion.AprobacionJefeRiesgo=='T')
    queryProcesoActivoInformacion = (db.ProcesoActivoInformacion.ProcesoId==db.Proceso.id) & (db.ProcesoActivoInformacion.ActivoInformacionId==db.ActivoInformacion.id) & (db.ProcesoActivoInformacion.AprobacionJefeRiesgo=='T')
    queryActivoTiRegion = (db.ActivoTiRegion.ActivoTiId==db.ActivoTi.id) & (db.ActivoTiRegion.RegionId==db.Region.id) & (db.ActivoTiRegion.AprobacionJefeRiesgo=='T')
    queryActivoTiProceso = (db.ActivoTiProceso.ActivoTiId==db.ActivoTi.id) & (db.ActivoTiProceso.ProcesoId==db.Proceso.id) & (db.ActivoTiProceso.AprobacionJefeRiesgo=='T')
    queryActivoTiActivoInformacion = (db.ActivoTiActivoInformacion.ActivoTiId==db.ActivoTi.id) & (db.ActivoTiActivoInformacion.ActivoInformacionId==db.ActivoInformacion.id) & (db.ActivoTiActivoInformacion.AprobacionJefeRiesgo=='T')
    queryTotalTratamientoRiesgo = queryTratamientoRiesgo & queryActivoTi & queryProcesoRegion & queryProcesoActivoInformacion & queryActivoTiRegion & queryActivoTiProceso & queryActivoTiActivoInformacion

    MatrizControl =   db( queryTratamientoRiesgo & queryTratamientoRiesgoAnalisisRiesgo & queryAnalisisRiesgo & queryAnalisisRiesgoObjetivoOrganizacion & queryAnalisisRiesgoClasificacionRiesgo).select(db.TratamientoRiesgo.ALL, db.AnalisisRiesgo.ALL, db.CriterioRiesgo.ALL, db.ClasificacionRiesgo.ALL, db.ObjetivoOrganizacion.ALL)
    #MatrizControlId = db( queryTratamientoRiesgo & queryTratamientoRiesgoAnalisisRiesgo & queryAnalisisRiesgoObjetivoOrganizacion & queryAnalisisRiesgoClasificacionRiesgo ).select(db.TratamientoRiesgo.id, distinct=True, groupby=db.TratamientoRiesgo.id)
    MatrizControlId = db( queryTratamientoRiesgo ).select(db.TratamientoRiesgo.id, distinct=True, groupby=db.TratamientoRiesgo.id)
    TotalMatrizControl = db( queryTratamientoRiesgo ).count()


    ArregloMatrizControl1 = []
    ArregloMatrizControl = []
    for i in MatrizControlId:
        ArregloMatrizControl1.append(i.id)
    for i in ArregloMatrizControl1:
        ArregloMatrizControl2 = []
        objetivo = ''
        clasificacion = ''
        riesgo = ''
        for x in MatrizControl:
            if i == x.TratamientoRiesgo.id:
                factorRiesgo = x.TratamientoRiesgo.FactorRiesgo
                #------------------------------------------------
                #Para armar un arreglo con las diferentes 
                #clasificaciones que se asignan al riesgo
                #------------------------------------------------
                if str(x.ClasificacionRiesgo.Nombre) in str(clasificacion):
                    clasificacion = clasificacion
                else:
                    clasificacion = clasificacion + ' | ' + str(x.ClasificacionRiesgo.Nombre)
                pass
                #------------------------------------------------
                #Para armar un arreglo con las diferentes 
                #obejtivos que son afectados por el riesgo 
                #------------------------------------------------
                if str(x.ObjetivoOrganizacion.Nombre) in str(objetivo):
                    objetivo = objetivo
                else:
                    objetivo = objetivo + ' | ' + str(x.ObjetivoOrganizacion.Nombre)
                pass
                idFactorRiesgo = x.TratamientoRiesgo.id
                factorRiesgoImpactoNivel = x.TratamientoRiesgo.CriterioImpactoId.Valor
                factorRiesgoImpactoNombre = x.TratamientoRiesgo.CriterioImpactoId.Nombre
                factorRiesgoProbabilidadNivel = x.TratamientoRiesgo.CriterioProbabilidadId.Valor
                factorRiesgoProbabilidadNombre = x.TratamientoRiesgo.CriterioProbabilidadId.Nombre
                tipoTratamientoRiesgo = x.TratamientoRiesgo.TipoTratamientoRiesgoId.Nombre
                #procesoRegion = str(x.TratamientoRiesgo.ProcesoRegionId.RegionId.Nombre) + ' | ' + str(x.TratamientoRiesgo.ProcesoRegionId.ProcesoId.CicloNegocioId.Nombre) + ' | ' + str(x.TratamientoRiesgo.ProcesoRegionId.ProcesoId.MacroProcesoId.Nombre) + ' | ' + str(x.TratamientoRiesgo.ProcesoRegionId.ProcesoId.TipoProcesoId.Nombre) + ' | ' + str(x.TratamientoRiesgo.ProcesoRegionId.ProcesoId.Nombre)
                procesoRegion = str(x.TratamientoRiesgo.ProcesoId.Nombre)
                #activoTI = str(x.TratamientoRiesgo.ActivoTiId.id) + ' | ' + str(x.TratamientoRiesgo.ActivoTiId.Nombre) + ' | ' + str(x.TratamientoRiesgo.ActivoTiId.TipoCapaSistemaId.Nombre)
                #activoTI = str(x.TratamientoRiesgo.ActivoTiRegionId.RegionId.Nombre) + ' | ' + str(x.TratamientoRiesgo.ActivoTiRegionId.ActivoTiId.Nombre) + ' | ' + str(x.TratamientoRiesgo.ActivoTiRegionId.ActivoTiId.TipoCapaSistemaId.Nombre)
                activoTI = str(x.TratamientoRiesgo.ActivoTiId.Nombre)
                riesgoFraude = x.TratamientoRiesgo.RiesgoFraude
                escenarioAmenaza = x.TratamientoRiesgo.EscenarioAmenaza
                riesgoMaterializadoCheck = x.TratamientoRiesgo.RiesgoMaterializadoCheck
                tipoVulnerabilidad = x.TratamientoRiesgo.TipoVulnerabilidadId.Nombre
                if x.TratamientoRiesgo.EvidenciaRiesgo:
                    evidenciaTratamientoRiesgo = URL('default/download', str(x.TratamientoRiesgo.EvidenciaRiesgo))
                else:
                    evidenciaTratamientoRiesgo = ''
                pass
                fechaRevision = x.TratamientoRiesgo.FechaRevision
                if str(x.AnalisisRiesgo.Riesgo) in str(riesgo):
                    riesgo = riesgo
                else:
                    riesgo = riesgo + ' | ' + str(x.AnalisisRiesgo.Riesgo)
                pass
                if x.AnalisisRiesgo.EvidenciaRiesgo:
                    evidenciaRiesgo = URL('default/download', str(x.AnalisisRiesgo.EvidenciaRiesgo))
                else:
                    evidenciaRiesgo = ''
                pass
                riesgoMaterializado = x.AnalisisRiesgo.RiesgoMaterializado
                duenoProceso = x.AnalisisRiesgo.DuenoProceso
                catalogoControl = x.TratamientoRiesgo.CatalogoControlId.Nombre
                tipoControl = x.TratamientoRiesgo.TipoControlId.Nombre
                clasificacionControl = x.TratamientoRiesgo.ClasificacionControlId.Nombre
                keyControl = x.TratamientoRiesgo.KeyControl
                objetivoControl = x.TratamientoRiesgo.ObjetivoControl
                actividadControl = x.TratamientoRiesgo.ActividadControl
                #nivelMadurez = x.TratamientoRiesgo.NivelMadurezId.Nombre
                nivelMadurez = ''
                comentariosRespCtrl = x.TratamientoRiesgo.ComentariosResponsableControl
                if x.TratamientoRiesgo.EvidenciaControl:
                    evidenciaControl = URL('default/download', str(x.TratamientoRiesgo.EvidenciaControl))
                else:
                    evidenciaControl = ''
                fechaImplementacionControl = x.TratamientoRiesgo.FechaImplementacionControl
                responsableCtrl = x.TratamientoRiesgo.ResponsableControl
                #politica = str(x.TratamientoRiesgo.DetallePoliticaId.RegionPoliticaId.RegionId.Nombre) + ' | ' + str(x.TratamientoRiesgo.DetallePoliticaId.RegionPoliticaId.CatalogoPoliticaId.id) + ' | ' + str(x.TratamientoRiesgo.DetallePoliticaId.RegionPoliticaId.CatalogoPoliticaId.Nombre) + ' | ' + str(x.TratamientoRiesgo.DetallePoliticaId.Codigo) + ' | ' + str(x.TratamientoRiesgo.DetallePoliticaId.Nombre)
                politica = ""
                analistaRiesgo = x.AnalisisRiesgo.AnalistaRiesgo
                cvssValor = x.TratamientoRiesgo.CuantificacionCVSS
                cvssVector = x.TratamientoRiesgo.VectorCVSS
                statusControl = x.TratamientoRiesgo.StatusImplementacionControl
                riesgoImpacto = x.AnalisisRiesgo.CriterioImpactoId.Nombre
        ArregloMatrizControl2.append(idFactorRiesgo)
        ArregloMatrizControl2.append(factorRiesgo)
        ArregloMatrizControl2.append(int(factorRiesgoImpactoNivel))
        ArregloMatrizControl2.append(factorRiesgoImpactoNombre)
        ArregloMatrizControl2.append(int(factorRiesgoProbabilidadNivel))
        ArregloMatrizControl2.append(factorRiesgoProbabilidadNombre)
        ArregloMatrizControl2.append(tipoTratamientoRiesgo)
        ArregloMatrizControl2.append(procesoRegion)
        ArregloMatrizControl2.append(activoTI)
        ArregloMatrizControl2.append(riesgoFraude)
        ArregloMatrizControl2.append(escenarioAmenaza)
        ArregloMatrizControl2.append(riesgoMaterializadoCheck)
        ArregloMatrizControl2.append(tipoVulnerabilidad)
        ArregloMatrizControl2.append(evidenciaTratamientoRiesgo)
        ArregloMatrizControl2.append(fechaRevision)
        ArregloMatrizControl2.append(riesgo)
        ArregloMatrizControl2.append(clasificacion)
        ArregloMatrizControl2.append(objetivo)
        ArregloMatrizControl2.append(evidenciaRiesgo)
        ArregloMatrizControl2.append(riesgoMaterializado)
        ArregloMatrizControl2.append(duenoProceso)
        ArregloMatrizControl2.append(catalogoControl)
        ArregloMatrizControl2.append(tipoControl)
        ArregloMatrizControl2.append(clasificacionControl)
        ArregloMatrizControl2.append(keyControl)
        ArregloMatrizControl2.append(objetivoControl)
        ArregloMatrizControl2.append(actividadControl)
        ArregloMatrizControl2.append(nivelMadurez)
        ArregloMatrizControl2.append(comentariosRespCtrl)
        ArregloMatrizControl2.append(evidenciaControl)
        ArregloMatrizControl2.append(fechaImplementacionControl)
        ArregloMatrizControl2.append(responsableCtrl)
        ArregloMatrizControl2.append(politica)
        ArregloMatrizControl2.append(analistaRiesgo)
        ArregloMatrizControl2.append(cvssValor)
        ArregloMatrizControl2.append(cvssVector)
        ArregloMatrizControl2.append(statusControl)
        ArregloMatrizControl2.append(riesgoImpacto)
        ArregloMatrizControl.append(ArregloMatrizControl2)
    #return TableroRiesgo()
    return dict(ArregloMatrizControl=ArregloMatrizControl, TotalMatrizControl=TotalMatrizControl)
    '''
    return TableroRiesgo()

@auth.requires_login()
@auth.requires(auth.has_membership(role='riskManager') or auth.has_membership(role='auditManager') or auth.has_membership(role='riskAnalyst') or auth.has_membership(role='auditAnalyst') or auth.has_membership(role='processOwner') or auth.has_membership(role='controlResp') or auth.has_membership(role='admin') or auth.has_membership(role='guest'))
def BarraControlProceso():
    return TableroRiesgo()
    #redirect(URL('default','TableroRiesgo'))

@auth.requires_login()
@auth.requires(auth.has_membership(role='riskManager') or auth.has_membership(role='auditManager') or auth.has_membership(role='riskAnalyst') or auth.has_membership(role='auditAnalyst') or auth.has_membership(role='processOwner') or auth.has_membership(role='controlResp') or auth.has_membership(role='admin') or auth.has_membership(role='guest'))
def BarraTipoVulnerabilidad():
    return TableroRiesgo()

@auth.requires_login()
@auth.requires(auth.has_membership(role='riskManager') or auth.has_membership(role='auditManager') or auth.has_membership(role='riskAnalyst') or auth.has_membership(role='auditAnalyst') or auth.has_membership(role='processOwner') or auth.has_membership(role='controlResp') or auth.has_membership(role='admin') or auth.has_membership(role='guest'))
def BarraCatalogoControl():
    return TableroRiesgo()

@auth.requires_login()
@auth.requires(auth.has_membership(role='riskManager') or auth.has_membership(role='auditManager') or auth.has_membership(role='riskAnalyst') or auth.has_membership(role='auditAnalyst') or auth.has_membership(role='processOwner') or auth.has_membership(role='controlResp') or auth.has_membership(role='admin') or auth.has_membership(role='guest'))
def BarraControlActivo():
    return TableroRiesgo()

@auth.requires_login()
@auth.requires(auth.has_membership(role='riskManager') or auth.has_membership(role='auditManager') or auth.has_membership(role='riskAnalyst') or auth.has_membership(role='auditAnalyst') or auth.has_membership(role='processOwner') or auth.has_membership(role='controlResp') or auth.has_membership(role='admin') or auth.has_membership(role='guest'))
def BarraControlRiesgo():
    return TableroRiesgo()

@auth.requires_login()
@auth.requires(auth.has_membership(role='riskManager') or auth.has_membership(role='auditManager') or auth.has_membership(role='riskAnalyst') or auth.has_membership(role='auditAnalyst') or auth.has_membership(role='processOwner') or auth.has_membership(role='controlResp') or auth.has_membership(role='admin') or auth.has_membership(role='guest'))
def BarraControlActivoTi():
    return TableroRiesgo()

@auth.requires_login()
@auth.requires(auth.has_membership(role='riskManager') or auth.has_membership(role='auditManager') or auth.has_membership(role='riskAnalyst') or auth.has_membership(role='auditAnalyst') or auth.has_membership(role='processOwner') or auth.has_membership(role='controlResp') or auth.has_membership(role='admin') or auth.has_membership(role='guest'))
def BarraClasificacionControl():
    return TableroRiesgo()

@auth.requires_login()
@auth.requires(auth.has_membership(role='riskManager') or auth.has_membership(role='auditManager') or auth.has_membership(role='riskAnalyst') or auth.has_membership(role='auditAnalyst') or auth.has_membership(role='processOwner') or auth.has_membership(role='controlResp') or auth.has_membership(role='admin') or auth.has_membership(role='guest'))
def BarraNivelMadurez():
    return TableroRiesgo()

#@auth.requires_login()
#def indexSeguridadTi():
#    return TableroSeguridadTi()

@auth.requires_login()
def indexIncidenteSeguridadTi():
    return TableroIncidenteSeguridadTi()

#@auth.requires_login()
#def indexAuditoria():
#    return TableroAuditoria()

@auth.requires_login()
def indexEvaluacionControl():
    return TableroEvaluacionControl()

'''
@auth.requires_login()
def indexArquitecturaSistema():
    #response.flash = T("Hello World")
    #return dict(message=T('Welcome to web2py!'))
    if not request.vars.proceso:
        VarProceso=1
    elif request.vars.proceso:
        VarProceso=request.vars.proceso

    Nodo = db((db.Nodo.ProcesoId==VarProceso) & (db.Nodo.AprobacionJefeRiesgo=='T')).select(db.Nodo.ALL)
    #Arista = db( (db.Arista.NodoId1==db.Nodo.id) & (db.Arista.NodoId2==db.Nodo.id) & (db.Nodo.ProcesoId==request.vars.proceso) ).select(db.Arista.ALL)
    Arista = db( (db.Arista.NodoId1==db.Nodo.id)  & (db.Nodo.ProcesoId==VarProceso) & (db.Arista.AprobacionJefeRiesgo=='T') ).select(db.Arista.ALL)
    Proceso = db(db.Proceso).select(db.Proceso.ALL)
    NombreProceso = db(db.Proceso.id==VarProceso).select(db.Proceso.Nombre, db.Proceso.RegionId).first()
    return dict(Nodo=Nodo, Arista=Arista, Proceso=Proceso, NombreProceso=NombreProceso)
'''

@auth.requires_login()
def Usuario():
    #if auth.has_membership(role='admin') and demo==0:
    #if auth.has_membership(role='admin') and versionGratuita==0:
    if auth.has_membership(role='admin'):
        return dict(form=SQLFORM.grid(db.auth_user, searchable=True, create=True, editable=True, deletable=True, user_signature=True, paginate=10, maxtextlength=500))
    else:
        #return dict(form=SQLFORM.grid(db.auth_user, searchable=True, create=False, editable=False, deletable=False, user_signature=True, paginate=10, maxtextlength=500))
        redirect(URL('default','index'))

@auth.requires_login()
def Email():
    #if auth.has_membership(role='admin') and demo==0:
    #if auth.has_membership(role='admin') and versionGratuita==0:
    if auth.has_membership(role='admin'):
        return dict(form=SQLFORM.grid(db.Email, searchable=True, create=True, editable=True, deletable=True, user_signature=True, paginate=10, maxtextlength=500))
    else:
        #return dict(form=SQLFORM.grid(db.Email, searchable=True, create=False, editable=False, deletable=False, user_signature=True, paginate=10, maxtextlength=500))
        redirect(URL('default','index'))
@auth.requires_login()
def Grupo():
    #if auth.has_membership(role='admin') and demo==0:
    #if auth.has_membership(role='admin') and versionGratuita==0:
    if auth.has_membership(role='admin'):
        #if demo==1: 
        return dict(form=SQLFORM.grid(db.auth_membership, searchable=True, create=True, editable=True, deletable=True, user_signature=True, paginate=10, maxtextlength=500))
        #elif demo==0:
    else:
        #return dict(form=SQLFORM.grid(db.auth_membership, searchable=True, create=False, editable=False, deletable=False, user_signature=True, paginate=10, maxtextlength=500))
        redirect(URL('default','index'))

@auth.requires_login()
@auth.requires(auth.has_membership(role='riskManager') or auth.has_membership(role='auditManager') or auth.has_membership(role='riskAnalyst') or auth.has_membership(role='auditAnalyst') or auth.has_membership(role='processOwner') or auth.has_membership(role='controlResp') or auth.has_membership(role='admin') or auth.has_membership(role='guest') or auth.has_membership('riskOwner') )
def TableroRiesgo():
    #---------------------------
    #Queries ANALISIS RIESGO
    #---------------------------
    queryAnalisisRiesgo = (db.AnalisisRiesgo.AprobacionJefeRiesgo=='T')
    queryAnalisisRiesgoClasificacionRiesgo = (db.AnalisisRiesgoClasificacionRiesgo.AnalisisRiesgoId==db.AnalisisRiesgo.id) & (db.AnalisisRiesgoClasificacionRiesgo.ClasificacionRiesgoId==db.ClasificacionRiesgo.id) & (db.AnalisisRiesgoClasificacionRiesgo.AprobacionJefeRiesgo=='T')
    queryAnalisisRiesgoObjetivoOrganizacion = (db.AnalisisRiesgoObjetivoOrganizacion.AnalisisRiesgoId==db.AnalisisRiesgo.id) & (db.AnalisisRiesgoObjetivoOrganizacion.ObjetivoOrganizacionId==db.ObjetivoOrganizacion.id) & (db.AnalisisRiesgoObjetivoOrganizacion.AprobacionJefeRiesgo=='T')
    queryTratamientoRiesgoAnalisisRiesgo = (db.TratamientoRiesgoAnalisisRiesgo.TratamientoRiesgoId==db.TratamientoRiesgo.id) & (db.TratamientoRiesgoAnalisisRiesgo.AnalisisRiesgoId==db.AnalisisRiesgo.id) & (db.TratamientoRiesgoAnalisisRiesgo.AprobacionJefeRiesgo=='T')
    queryTotalAnalisisRiesgo = queryAnalisisRiesgo & queryAnalisisRiesgoClasificacionRiesgo & queryAnalisisRiesgoObjetivoOrganizacion & queryTratamientoRiesgoAnalisisRiesgo
    #---------------------------
    #Queries FACTOR DE RIESGO 
    #---------------------------
    queryTratamientoRiesgo = (db.TratamientoRiesgo.ProcesoId==db.Proceso.id) & (db.TratamientoRiesgo.ActivoTiId==db.ActivoTi.id) & (db.TratamientoRiesgo.TipoVulnerabilidadId==db.TipoVulnerabilidad.id) & (db.TratamientoRiesgo.CriterioImpactoId==db.CriterioRiesgo.CriterioImpactoId) & (db.TratamientoRiesgo.CriterioProbabilidadId==db.CriterioRiesgo.CriterioProbabilidadId) & (db.TratamientoRiesgo.TipoTratamientoRiesgoId==db.TipoTratamientoRiesgo.id) & (db.TratamientoRiesgo.CatalogoControlId==db.CatalogoControl.id) & (db.TratamientoRiesgo.TipoControlId==db.TipoControl.id) & (db.TratamientoRiesgo.ClasificacionControlId==db.ClasificacionControl.id) & (db.TratamientoRiesgo.AprobacionJefeRiesgo=='T')
    queryProceso = (db.Proceso.TipoProcesoId == db.TipoProceso.id) & (db.Proceso.AprobacionJefeRiesgo == 'T')
    queryActivoTi = (db.ActivoTi.TipoCapaSistemaId==db.TipoCapaSistema.id) & (db.ActivoTi.AprobacionJefeRiesgo=='T')
    queryCatalogoControl = (db.CatalogoControl.Baseline==db.BenchVersion.id) & (db.CatalogoControl.AprobacionJefeRiesgo=='T')
    queryTotalTratamientoRiesgo = queryTratamientoRiesgo & queryProceso & queryActivoTi & queryCatalogoControl
    #----------------
    #Queries OTROS
    #----------------
    queryActivoInformacion = (db.ActivoInformacion.ClasificacionInformacionId == db.ClasificacionInformacion.id) & (db.ActivoInformacion.AprobacionJefeRiesgo == 'T')
    queryProcesoActivoInformacion = (db.ProcesoActivoInformacion.ProcesoId==db.Proceso.id) & (db.ProcesoActivoInformacion.ActivoInformacionId==db.ActivoInformacion.id) & (db.ProcesoActivoInformacion.AprobacionJefeRiesgo=='T')
    queryActivoTiActivoInformacion = (db.ActivoTiActivoInformacion.ActivoTiId==db.ActivoTi.id) & (db.ActivoTiActivoInformacion.ActivoInformacionId==db.ActivoInformacion.id) & (db.ActivoTiActivoInformacion.AprobacionJefeRiesgo=='T')
    queryActivoTiProceso = (db.ActivoTiProceso.ActivoTiId==db.ActivoTi.id) & (db.ActivoTiProceso.ProcesoId==db.Proceso.id) & (db.ActivoTiProceso.AprobacionJefeRiesgo=='T')
    queryActivoInformacionRegulacion = (db.ActivoInformacionRegulacion.ActivoInformacionId==db.ActivoInformacion.id) & (db.ActivoInformacionRegulacion.RegulacionDatoId == db.RegulacionDato.id) & (db.ActivoInformacionRegulacion.AprobacionJefeRiesgo=='T')
    queryTotalOtros = queryActivoInformacion & queryProcesoActivoInformacion & queryActivoTiActivoInformacion & queryActivoTiProceso & queryActivoInformacionRegulacion 
    #----------------------------
    #Queries EVALUACION CONTROL
    #----------------------------
    queryEvaluacionControl = (db.EvaluacionControl.TipoRevisionId==db.TipoRevision.id) & (db.EvaluacionControl.DetallePoliticaId==db.DetallePolitica.id) & (db.EvaluacionControl.BenchControlId==db.BenchControl.id) & (db.EvaluacionControl.TratamientoRiesgoId==db.TratamientoRiesgo.id) & (db.EvaluacionControl.ProcesoId==db.Proceso.id) & (db.EvaluacionControl.ActivoTiId==db.ActivoTi.id) & (db.EvaluacionControl.NivelMadurezId==db.NivelMadurez.id) & (db.EvaluacionControl.AprobacionJefeAuditoria=='T')
    queryDetallePolitica = (db.DetallePolitica.CatalogoPoliticaId == db.CatalogoPolitica.id) & (db.DetallePolitica.AprobacionJefeRiesgo=='T')
    queryBenchControl = (db.BenchControl.BenchObjetivoControlId==db.BenchObjetivoControl.id) & (db.BenchControl.AprobacionJefeRiesgo=='T')
    queryTotalEvaluacionControl = queryEvaluacionControl & queryDetallePolitica & queryBenchControl & queryTotalTratamientoRiesgo 
    #----------------------------
    if auth.has_membership(role='admin') or auth.has_membership(role='riskManager'):
        queryAnalisisRiesgo = queryTotalAnalisisRiesgo
        queryTratamientoRiesgo = queryTotalTratamientoRiesgo
    elif auth.has_membership(role='riskOwner'):
        riesgoId = []
        for a in db(db.AnalisisRiesgo.AprobacionJefeRiesgo=='T').select(db.AnalisisRiesgo.id, db.AnalisisRiesgo.DuenoRiesgo):
            try:
                for b in str(str(a.DuenoRiesgo).replace(' ','')).split(','):
                    if b==auth.user.username:
                        riesgoId.append(int(a.id))
            except:
                pass
        query = db.AnalisisRiesgo.id.belongs(riesgoId)
        #queryAnalisisRiesgo = (queryAnalisisRiesgo) & (query)
        queryAnalisisRiesgo = (queryTotalAnalisisRiesgo) & (query)
        controlId=[]
        for a in db((db.TratamientoRiesgo.AprobacionJefeRiesgo=='T') & (db.TratamientoRiesgoAnalisisRiesgo.TratamientoRiesgoId==db.TratamientoRiesgo.id) & (db.TratamientoRiesgoAnalisisRiesgo.AnalisisRiesgoId == db.AnalisisRiesgo.id)).select(db.TratamientoRiesgo.id, db.AnalisisRiesgo.DuenoRiesgo):
            try:
                for b in str(str(a.AnalisisRiesgo.DuenoRiesgo).replace(' ','')).split(','):
                    if b==auth.user.username:
                        controlId.append(int(a.TratamientoRiesgo.id))
            except:
                pass
        query = db.TratamientoRiesgo.id.belongs(controlId)
        queryTratamientoRiesgo = (queryTotalTratamientoRiesgo) & (query)
    else:
        queryAnalisisRiesgo = (db.AnalisisRiesgo.id == 0)
        queryTratamientoRiesgo = (db.TotalTratamientoRiesgo.id == 0)
    #------------------------------
    #Queries menu PARAMETROS HTTP
    #------------------------------
    Parametro = {}
    Parametro.update(dict(request.vars))
    if request.vars.Riesgo:
        Parametro['Riesgo'] = request.vars.Riesgo
        queryAnalisisRiesgo = queryTotalAnalisisRiesgo & (db.AnalisisRiesgo.id==request.vars.Riesgo)
        queryTratamientoRiesgo = queryTotalTratamientoRiesgo & queryTotalAnalisisRiesgo & (db.AnalisisRiesgo.id==request.vars.Riesgo)
    if request.vars.Objetivo:
        Parametro['Objetivo'] = request.vars.Objetivo
        queryAnalisisRiesgo = queryTotalAnalisisRiesgo & (db.AnalisisRiesgoObjetivoOrganizacion.ObjetivoOrganizacionId==request.vars.Objetivo)
        queryTratamientoRiesgo = queryTotalTratamientoRiesgo & queryTotalAnalisisRiesgo & (db.AnalisisRiesgoObjetivoOrganizacion.ObjetivoOrganizacionId==request.vars.Objetivo)
    if request.vars.Tipo:
        Parametro['Tipo'] = request.vars.Tipo
        queryAnalisisRiesgo = queryTotalAnalisisRiesgo & (db.AnalisisRiesgoClasificacionRiesgo.ClasificacionRiesgoId==request.vars.Tipo)
        queryTratamientoRiesgo = queryTotalTratamientoRiesgo & queryTotalAnalisisRiesgo & (db.AnalisisRiesgoClasificacionRiesgo.ClasificacionRiesgoId==request.vars.Tipo)
    if request.vars.Factor:
        Parametro['Factor'] = request.vars.Factor
        queryAnalisisRiesgo= queryTotalAnalisisRiesgo & queryTotalTratamientoRiesgo & (db.TratamientoRiesgo.TipoVulnerabilidadId==request.vars.Factor)
        queryTratamientoRiesgo = queryTotalTratamientoRiesgo & (db.TratamientoRiesgo.TipoVulnerabilidadId==request.vars.Factor)
    if request.vars.Control:
        Parametro['Control'] = request.vars.Control
        queryAnalisisRiesgo = queryTotalAnalisisRiesgo & queryTotalTratamientoRiesgo & (db.TratamientoRiesgo.CatalogoControlId==request.vars.Control)
        queryTratamientoRiesgo = queryTotalTratamientoRiesgo & (db.TratamientoRiesgo.CatalogoControlId==request.vars.Control)
    #------------------------------
    #Grafico y matriz NIVEL RIESGO
    #------------------------------
    TotalRiesgo = db.AnalisisRiesgo.id.count()
    MatrizRiesgoClasificacion = db(queryTotalAnalisisRiesgo).select(db.AnalisisRiesgo.NivelRiesgo,  TotalRiesgo, groupby=db.AnalisisRiesgo.NivelRiesgo, distinct=True)
    MatrizRiesgoId = db(queryAnalisisRiesgo & queryAnalisisRiesgoClasificacionRiesgo & queryAnalisisRiesgoObjetivoOrganizacion).select(db.AnalisisRiesgo.id, distinct=True, groupby=db.AnalisisRiesgo.id )
    MatrizRiesgo  =  db(queryAnalisisRiesgo & queryAnalisisRiesgoClasificacionRiesgo & queryAnalisisRiesgoObjetivoOrganizacion).select(db.AnalisisRiesgo.ALL, db.CriterioRiesgo.Nombre, db.CriterioRiesgo.RiesgoValor, db.ObjetivoOrganizacion.Nombre, db.ClasificacionRiesgo.Nombre, distinct=True )
    ArregloMatrizRiesgo1 = []
    ArregloMatrizRiesgo = []
    riesgo = ''
    clasificacion = ''
    impacto = ''
    probabilidad = ''
    riesgoValor = ''
    riesgoNivel = ''
    consecuencia = ''
    objetivo = ''
    ArregloMatrizRiesgo1 = []
    ArregloMatrizRiesgo = []
    for i in MatrizRiesgoId:
        ArregloMatrizRiesgo1.append(i.id)
    for i in ArregloMatrizRiesgo1:
        ArregloMatrizRiesgo2 = []
        objetivo = ''
        clasificacion = ''
        validacion = False
        for x in MatrizRiesgo:
            if i == x.AnalisisRiesgo.id:
                validacion = True
                riesgo = x.AnalisisRiesgo.Riesgo
                if str(x.ClasificacionRiesgo.Nombre) in str(clasificacion):
                    clasificacion = clasificacion
                else:
                    clasificacion = clasificacion + ' | ' + str(x.ClasificacionRiesgo.Nombre)
                pass
                if str(x.ObjetivoOrganizacion.Nombre) in str(objetivo):
                    objetivo = objetivo
                else:
                    objetivo = objetivo + ' | ' + str(x.ObjetivoOrganizacion.Nombre)
                pass
                impacto = x.AnalisisRiesgo.NivelRiesgo
                #probabilidad = x.AnalisisRiesgo.NivelRiesgo
                #riesgoValor = int(x.CriterioRiesgo.RiesgoValor)
                #riesgoNivel = x.CriterioRiesgo.Nombre
                consecuencia = x.AnalisisRiesgo.RiesgoMaterializado
        if validacion == True:
            ArregloMatrizRiesgo2.append(riesgo)
            ArregloMatrizRiesgo2.append(clasificacion)
            ArregloMatrizRiesgo2.append(impacto)
            #ArregloMatrizRiesgo2.append(probabilidad)
            #ArregloMatrizRiesgo2.append(riesgoValor)
            #ArregloMatrizRiesgo2.append(riesgoNivel)
            ArregloMatrizRiesgo2.append(consecuencia)
            ArregloMatrizRiesgo2.append(objetivo)
            ArregloMatrizRiesgo.append(ArregloMatrizRiesgo2)
    #return dict(MatrizRiesgoControl=MatrizRiesgoControl)
    MatrizRiesgoControl = db(queryTotalTratamientoRiesgo).select(db.TratamientoRiesgo.ALL)

    #-------------------------------
    #Grafico y matriz FACTOR RIESGO
    #-------------------------------
    MatrizControl =   db( queryTratamientoRiesgo & queryAnalisisRiesgo ).select(db.TratamientoRiesgo.ALL, db.AnalisisRiesgo.ALL, db.CriterioRiesgo.ALL, db.ClasificacionRiesgo.ALL, db.ObjetivoOrganizacion.ALL)
    MatrizControlId = db( queryTratamientoRiesgo & queryAnalisisRiesgo ).select(db.TratamientoRiesgo.id, distinct=True, groupby=db.TratamientoRiesgo.id)
    ArregloMatrizControl1 = []
    ArregloMatrizControl = []
    for i in MatrizControlId:
        ArregloMatrizControl1.append(i.id)
    for i in ArregloMatrizControl1:
        ArregloMatrizControl2 = []
        objetivo = ''
        clasificacion = ''
        riesgo = ''
        #El if es para agrupar los campos de clasificacion, objetivo, etc...
        for x in MatrizControl:
            if i == x.TratamientoRiesgo.id:
                factorRiesgo = x.TratamientoRiesgo.FactorRiesgo
                #------------------------------------------------
                #Para armar un arreglo con las diferentes 
                #clasificaciones que se asignan al riesgo
                #------------------------------------------------
                if str(x.ClasificacionRiesgo.Nombre) in str(clasificacion):
                    clasificacion = clasificacion
                else:
                    clasificacion = clasificacion + ' | ' + str(x.ClasificacionRiesgo.Nombre)
                pass
                #------------------------------------------------
                #Para armar un arreglo con las diferentes 
                #obejtivos que son afectados por el riesgo 
                #------------------------------------------------
                if str(x.ObjetivoOrganizacion.Nombre) in str(objetivo):
                    objetivo = objetivo
                else:
                    objetivo = objetivo + ' | ' + str(x.ObjetivoOrganizacion.Nombre)
                pass
                idFactorRiesgo = x.TratamientoRiesgo.id
                #idFactorRiesgo = ""
                factorRiesgoImpactoNivel = x.TratamientoRiesgo.CriterioImpactoId.Valor
                factorRiesgoImpactoNombre = x.TratamientoRiesgo.CriterioImpactoId.Nombre
                factorRiesgoProbabilidadNivel = x.TratamientoRiesgo.CriterioProbabilidadId.Valor
                factorRiesgoProbabilidadNombre = x.TratamientoRiesgo.CriterioProbabilidadId.Nombre
                factorRiesgoNivel = x.CriterioRiesgo.RiesgoValor
                factorRiesgoNombre = x.CriterioRiesgo.Nombre
                tipoTratamientoRiesgo = x.TratamientoRiesgo.TipoTratamientoRiesgoId.Nombre
                procesoRegion = str(x.TratamientoRiesgo.ProcesoId.Nombre)
                activoTI = str(x.TratamientoRiesgo.ActivoTiId.Nombre)
                riesgoFraude = x.TratamientoRiesgo.RiesgoFraude
                escenarioAmenaza = x.TratamientoRiesgo.EscenarioAmenaza
                riesgoMaterializadoCheck = x.TratamientoRiesgo.RiesgoMaterializadoCheck
                tipoVulnerabilidad = x.TratamientoRiesgo.TipoVulnerabilidadId.Nombre
                referencia = x.TratamientoRiesgo.Referencia
                if x.TratamientoRiesgo.EvidenciaRiesgo:
                    evidenciaTratamientoRiesgo = URL('default/download', str(x.TratamientoRiesgo.EvidenciaRiesgo))
                else:
                    evidenciaTratamientoRiesgo = ''
                pass
                fechaRevision = x.TratamientoRiesgo.FechaRevision
                if str(x.AnalisisRiesgo.Riesgo) in str(riesgo):
                    riesgo = riesgo
                else:
                    riesgo = riesgo + ' | ' + str(x.AnalisisRiesgo.Riesgo)
                pass
                if x.AnalisisRiesgo.EvidenciaRiesgo:
                    evidenciaRiesgo = URL('default/download', str(x.AnalisisRiesgo.EvidenciaRiesgo))
                else:
                    evidenciaRiesgo = ''
                pass
                riesgoMaterializado = x.AnalisisRiesgo.RiesgoMaterializado
                duenoProceso = x.AnalisisRiesgo.DuenoRiesgo
                catalogoControl = x.TratamientoRiesgo.CatalogoControlId.Nombre
                tipoControl = x.TratamientoRiesgo.TipoControlId.Nombre
                clasificacionControl = x.TratamientoRiesgo.ClasificacionControlId.Nombre
                keyControl = x.TratamientoRiesgo.KeyControl
                objetivoControl = x.TratamientoRiesgo.ObjetivoControl
                actividadControl = x.TratamientoRiesgo.ActividadControl
                #nivelMadurez = x.TratamientoRiesgo.NivelMadurezId.Nombre
                nivelMadurez = ''
                comentariosRespCtrl = x.TratamientoRiesgo.ComentariosResponsableControl
                if x.TratamientoRiesgo.EvidenciaControl:
                    evidenciaControl = URL('default/download', str(x.TratamientoRiesgo.EvidenciaControl))
                else:
                    evidenciaControl = ''
                fechaImplementacionControl = x.TratamientoRiesgo.FechaImplementacionControl
                responsableCtrl = x.TratamientoRiesgo.ResponsableControl
                politica = ""
                analistaRiesgo = x.AnalisisRiesgo.AnalistaRiesgo
                cvssValor = x.TratamientoRiesgo.CuantificacionCVSS
                cvssVector = x.TratamientoRiesgo.VectorCVSS
                statusControl = x.TratamientoRiesgo.StatusImplementacionControl
                riesgoImpacto = x.AnalisisRiesgo.NivelRiesgo
        ArregloMatrizControl2.append(idFactorRiesgo)
        ArregloMatrizControl2.append(factorRiesgo)
        ArregloMatrizControl2.append(int(factorRiesgoImpactoNivel))
        ArregloMatrizControl2.append(factorRiesgoImpactoNombre)
        ArregloMatrizControl2.append(int(factorRiesgoProbabilidadNivel))
        ArregloMatrizControl2.append(factorRiesgoProbabilidadNombre)
        ArregloMatrizControl2.append(tipoTratamientoRiesgo)
        ArregloMatrizControl2.append(procesoRegion)
        ArregloMatrizControl2.append(activoTI)
        ArregloMatrizControl2.append(riesgoFraude)
        ArregloMatrizControl2.append(escenarioAmenaza)
        ArregloMatrizControl2.append(riesgoMaterializadoCheck)
        ArregloMatrizControl2.append(tipoVulnerabilidad)
        ArregloMatrizControl2.append(evidenciaTratamientoRiesgo)
        ArregloMatrizControl2.append(fechaRevision)
        ArregloMatrizControl2.append(riesgo)
        ArregloMatrizControl2.append(clasificacion)
        ArregloMatrizControl2.append(objetivo)
        ArregloMatrizControl2.append(evidenciaRiesgo)
        ArregloMatrizControl2.append(riesgoMaterializado)
        ArregloMatrizControl2.append(duenoProceso)
        ArregloMatrizControl2.append(catalogoControl)
        ArregloMatrizControl2.append(tipoControl)
        ArregloMatrizControl2.append(clasificacionControl)
        ArregloMatrizControl2.append(keyControl)
        ArregloMatrizControl2.append(objetivoControl)
        ArregloMatrizControl2.append(actividadControl)
        ArregloMatrizControl2.append(nivelMadurez)
        ArregloMatrizControl2.append(comentariosRespCtrl)
        ArregloMatrizControl2.append(evidenciaControl)
        ArregloMatrizControl2.append(fechaImplementacionControl)
        ArregloMatrizControl2.append(responsableCtrl)
        ArregloMatrizControl2.append(politica)
        ArregloMatrizControl2.append(analistaRiesgo)
        ArregloMatrizControl2.append(cvssValor)
        ArregloMatrizControl2.append(cvssVector)
        ArregloMatrizControl2.append(statusControl)
        ArregloMatrizControl2.append(riesgoImpacto)
        ArregloMatrizControl2.append(factorRiesgoNivel)
        ArregloMatrizControl2.append(factorRiesgoNombre)
        ArregloMatrizControl2.append(referencia)
        ArregloMatrizControl.append(ArregloMatrizControl2)
    #-------------------------
    #Relaciones para el menu
    #-------------------------
    ClasificacionRiesgo = db(queryAnalisisRiesgo & queryAnalisisRiesgoClasificacionRiesgo).select(db.ClasificacionRiesgo.ALL, distinct=True, groupby=db.ClasificacionRiesgo.id)
    ObjetivoOrganizacion = db(queryAnalisisRiesgo & queryAnalisisRiesgoObjetivoOrganizacion).select(db.ObjetivoOrganizacion.ALL, distinct=True, groupby=db.ObjetivoOrganizacion.id)
    AnalisisRiesgo = db(queryAnalisisRiesgo).select(db.AnalisisRiesgo.ALL, distinct=True, groupby=db.AnalisisRiesgo.id)
    TipoFactorRiesgo = db(queryTratamientoRiesgo).select(db.TipoVulnerabilidad.ALL, distinct=True, groupby=db.TipoVulnerabilidad.id)
    CatalogoControl = db(queryTratamientoRiesgo).select(db.CatalogoControl.ALL, distinct=True, groupby=db.CatalogoControl.id)
    #CatalogoControl = db(db.CatalogoControl).select(db.CatalogoControl.id, distinct=True, groupby=db.CatalogoControl.id)
    NivelRiesgo = db(queryAnalisisRiesgo).select(db.CriterioRiesgo.RiesgoValor, db.CriterioRiesgo.Nombre, distinct=True, groupby=db.CriterioRiesgo.RiesgoValor | db.CriterioRiesgo.Nombre)    
    try:
        Organizacion = db(db.Configuracion).select(db.Configuracion.Organizacion).first().Organizacion
    except:
        Organizacion = "XXX"
   
    #--------------------
    #Matriz Prueba Web
    #--------------------
    ArregloEvidenciaControl = []
    MatrizEvaluacionControl = db((db.EvaluacionControl.DetallePoliticaId==db.DetallePolitica.id) & (db.EvaluacionControl.AprobacionJefeAuditoria=='T')).select(db.EvaluacionControl.ALL)
    EvaluacionEvidencia = db(db.EvaluacionEvidencia).select(db.EvaluacionControl.ALL)
    for i in MatrizEvaluacionControl:
        PruebaControl = []
        PruebaControl.append(i.TipoRevisionId.Nombre)
        try:
            PruebaControl.append(i.DetallePoliticaId.Nombre)
        except:
            PruebaControl.append('')
        pass
        try:
            PruebaControl.append(i.BenchControlId.Nombre)
        except:
            PruebaControl.append('')
        pass
        try:
            PruebaControl.append(i.TratamientoRiesgoId.FactorRiesgo)
        except:
            PruebaControl.append('')
        pass
        PruebaControl.append(i.ProcesoId.Nombre)
        PruebaControl.append(i.ActivoTiId.Nombre)
        PruebaControl.append(i.CumplimientoControl)
        PruebaControl.append(i.NivelMadurezId.Nombre)
        PruebaControl.append(i.FechaRevision)
        PruebaControl.append(i.Hallazgo)
        PruebaControl.append(i.Recomendacion)
        EvidenciaEvaluacion = []
        for x in EvaluacionEvidencia:
            if x.EvaluacionControlId == i.id:
                Archivo = URL('default/download', str(x.Evidencia))
                EvidenciaEvaluacion.append(Archivo)
        PruebaControl.append(EvidenciaEvaluacion)
        ArregloEvidenciaControl.append(PruebaControl)

    #Funciones para el grafico de barra horizontal para mostrar cumplimiento y nivel de madurez
    MatrizEvaluacionControl2 = db((db.EvaluacionControl.DetallePoliticaId==db.DetallePolitica.id) & (db.EvaluacionControl.BenchControlId==db.BenchControl.id) & (db.EvaluacionControl.TratamientoRiesgoId==db.TratamientoRiesgo.id) & (db.EvaluacionControl.AprobacionJefeAuditoria=='T')).select(db.EvaluacionControl.ALL)
    #Arreglo para obtener el nombre de los benchmark, control y politica
    CatalogoControl = []
    for i in MatrizEvaluacionControl2:
        CatalogoControl.append(i.DetallePoliticaId.CatalogoPoliticaId.Nombre)
        CatalogoControl.append(i.BenchControlId.BenchObjetivoControlId.BenchVersionId.Version)
        CatalogoControl.append(i.TratamientoRiesgoId.TipoVulnerabilidadId.Nombre)
    CatalogoControl = set(CatalogoControl)
    #MatrizEvaluacionControl2 = db((db.EvaluacionControl.DetallePoliticaId==db.DetallePolitica.id) & (db.EvaluacionControl.BenchControlId==db.BenchControl.id) & (db.EvaluacionControl.TratamientoRiesgoId==db.TratamientoRiesgo.id) & (db.EvaluacionControl.AprobacionJefeAuditoria=='T')).select(db.EvaluacionControl.ALL)

    #Funcion para el arreglo que es enviado para crear el grafico de Cumplimiento
    CatalogoEval = []
    for c in CatalogoControl:
        CatalogoEval1 = []
        pas = 0
        fail = 0
        CatalogoEval1.append(c)
        for m in MatrizEvaluacionControl2:
            if c == m.DetallePoliticaId.CatalogoPoliticaId.Nombre or c==m.BenchControlId.BenchObjetivoControlId.BenchVersionId.Version or c==m.TratamientoRiesgoId.TipoVulnerabilidadId.Nombre:
                if m.CumplimientoControl == False:
                    fail = fail + 1
                elif m.CumplimientoControl == True:
                    pas = pas + 1

        CatalogoEval1.append(pas)
        CatalogoEval1.append(fail)
        CatalogoEval.append(CatalogoEval1)

    #Funcion para el arreglo que es enviado para crear el grafico de nivel de madurez
    NivelMadurez = db(db.NivelMadurez.AprobacionJefeRiesgo=='T').select(db.NivelMadurez.ALL)
    matrizA = {}
    col = 1     #Es el nivel de madurez
    fila = 1    #politica, tipo control, version benchcontrol
    for n in NivelMadurez:
        #col = 1
        matrizA[0,col] = n.Nombre
        col = col + 1
    for c in CatalogoControl:
        #fila = 1
        matrizA[fila,0] = c
        fila = fila + 1
    #Para inicializar la matriz a 0
    for c in range(1,col):
        for f in range(1,fila):
            matrizA[f, c] = 0
    #col2 = 1
    #fila2 = 1
    #CatalogoEval2 = []
    for f in range(1,fila):
        #CatalogoEval1 = []
        #pas = 0
        #fail = 0
        #matrizA[0,f]
        #CatalogoEval1.append(c)
        for m in MatrizEvaluacionControl2:
            if matrizA[f,0] == m.DetallePoliticaId.CatalogoPoliticaId.Nombre or matrizA[f,0] == m.BenchControlId.BenchObjetivoControlId.BenchVersionId.Version or matrizA[f,0] == m.TratamientoRiesgoId.TipoVulnerabilidadId.Nombre:
            #if matrizA[f,0] == m.DetallePoliticaId.CatalogoPoliticaId.Nombre:
                for c in range(1,col):
                    if matrizA[0,c] == m.NivelMadurezId.Nombre:
                        matrizA[f,c] = matrizA[f,c] + 1
    for n in NivelMadurez:
        for c in range(1,col):
            if matrizA[0,c] == n.Nombre:
                #matrizA[0,c] = str(n.Nombre) + ' ' + str(n.Valor)
                matrizA[0,c] = str(n.Valor) + ' - ' + str(n.Nombre)

    #------------------------
    #Matriz Categoria Riesgo
    #------------------------
    ArregloRiesgoCategoria = []
    ArregloRiesgoCategoria1 = []
    ArregloRiesgoCategoria2 = []
    ArregloRiesgoCategoria3 = []
    MatrizRiesgoCategoria = db(queryAnalisisRiesgoClasificacionRiesgo & queryAnalisisRiesgo).select(db.AnalisisRiesgoClasificacionRiesgo.ALL)
    for i in MatrizRiesgoCategoria:
        ArregloRiesgoCategoria1.append(i.AnalisisRiesgoId.Riesgo)
    ArregloRiesgoCategoria1 = set(ArregloRiesgoCategoria1)
    for i in ArregloRiesgoCategoria1:
        ArregloRiesgoCategoria2 = []
        ArregloRiesgoCategoria3 = []
        categoria = ''
        for x in MatrizRiesgoCategoria:
            if i == x.AnalisisRiesgoId.Riesgo:
                categoria = categoria + ' | ' + str(x.ClasificacionRiesgoId.Nombre)
        ArregloRiesgoCategoria3.append(i)
        ArregloRiesgoCategoria3.append(categoria)
        ArregloRiesgoCategoria.append(ArregloRiesgoCategoria3)
    #--------------------------------
    #Grafico Pastel Categoria Riesgo
    #--------------------------------
    TotalRiesgoCategoria = db.AnalisisRiesgoClasificacionRiesgo.id.count()
    #MatrizRiesgoCategoria = db(queryAnalisisRiesgoClasificacionRiesgo & queryAnalisisRiesgo).select(db.AnalisisRiesgoClasificacionRiesgo.ALL, TotalRiesgoCategoria, groupby=db.AnalisisRiesgoClasificacionRiesgo.ClasificacionRiesgoId)
    MatrizRiesgoCategoria = db(queryAnalisisRiesgoClasificacionRiesgo & queryAnalisisRiesgo).select(db.AnalisisRiesgoClasificacionRiesgo.ClasificacionRiesgoId, TotalRiesgoCategoria, groupby=db.AnalisisRiesgoClasificacionRiesgo.ClasificacionRiesgoId)
    #----------------------
    #Grafico Mapa de Calor
    #----------------------
    ArregloMapa1 = {}
    FactorRiesgoMapa = db(queryTratamientoRiesgo).select(db.TratamientoRiesgo.CriterioImpactoId, db.TratamientoRiesgo.CriterioProbabilidadId)
    for a in range(1,6):
        for b in range(1,6):
            ArregloMapa1[a,b]=0
    for i in FactorRiesgoMapa:
        ArregloMapa1[i.CriterioImpactoId, i.CriterioProbabilidadId] = ArregloMapa1[i.CriterioImpactoId, i.CriterioProbabilidadId] + 1
    #----------------------------------------------
    #Graficos relacionados al tratamiento de riesgo
    #----------------------------------------------
    TotalFactorRiesgo = db.TratamientoRiesgo.id.count()
    #FactorRiesgoProceso = db(queryTotalTratamientoRiesgo).select(db.TratamientoRiesgo.ALL, TotalFactorRiesgo, groupby=db.TratamientoRiesgo.ProcesoId, distinct=True)
    FactorRiesgoProceso = db(queryTotalTratamientoRiesgo).select(db.TratamientoRiesgo.ProcesoId, TotalFactorRiesgo, groupby=db.TratamientoRiesgo.ProcesoId, distinct=True)
    #FactorRiesgoActivoTi = db(queryTotalTratamientoRiesgo).select(db.TratamientoRiesgo.ALL, TotalFactorRiesgo, groupby=db.TratamientoRiesgo.ActivoTiId, distinct=True)
    FactorRiesgoActivoTi = db(queryTotalTratamientoRiesgo).select(db.TratamientoRiesgo.ActivoTiId, TotalFactorRiesgo, groupby=db.TratamientoRiesgo.ActivoTiId, distinct=True)
    FactorRiesgoTipo = db(queryTotalTratamientoRiesgo).select(db.TratamientoRiesgo.TipoVulnerabilidadId, TotalFactorRiesgo, groupby=db.TratamientoRiesgo.TipoVulnerabilidadId, distinct=True)
    FactorRiesgoTratamiento = db(queryTotalTratamientoRiesgo).select(db.TratamientoRiesgo.TipoTratamientoRiesgoId, TotalFactorRiesgo, groupby=db.TratamientoRiesgo.TipoTratamientoRiesgoId, distinct=True)
    FactorRiesgoTipoControl = db(queryTotalTratamientoRiesgo).select(db.TratamientoRiesgo.TipoControlId, TotalFactorRiesgo, groupby=db.TratamientoRiesgo.TipoControlId, distinct=True)
    FactorRiesgoCataControl = db(queryTotalTratamientoRiesgo).select(db.TratamientoRiesgo.CatalogoControlId, TotalFactorRiesgo, groupby=db.TratamientoRiesgo.CatalogoControlId, distinct=True)
    FactorRiesgoClasControl = db(queryTotalTratamientoRiesgo).select(db.TratamientoRiesgo.ClasificacionControlId, TotalFactorRiesgo, groupby=db.TratamientoRiesgo.ClasificacionControlId, distinct=True)
    FactorRiesgoStatusControl = db(queryTotalTratamientoRiesgo).select(db.TratamientoRiesgo.StatusImplementacionControl, TotalFactorRiesgo, groupby=db.TratamientoRiesgo.StatusImplementacionControl, distinct=True)
    FactorRiesgoFraude = db(queryTotalTratamientoRiesgo).select(db.TratamientoRiesgo.RiesgoFraude, TotalFactorRiesgo, groupby=db.TratamientoRiesgo.RiesgoFraude, distinct=True)
    #-------------------------------
    #Grafico para nivel de riesgo
    #-------------------------------

    return dict(FactorRiesgoFraude=FactorRiesgoFraude, FactorRiesgoStatusControl=FactorRiesgoStatusControl, FactorRiesgoClasControl=FactorRiesgoClasControl, FactorRiesgoCataControl=FactorRiesgoCataControl, FactorRiesgoTipoControl=FactorRiesgoTipoControl, FactorRiesgoTratamiento=FactorRiesgoTratamiento, FactorRiesgoTipo=FactorRiesgoTipo, FactorRiesgoActivoTi=FactorRiesgoActivoTi, FactorRiesgoProceso=FactorRiesgoProceso, ArregloMapa1=ArregloMapa1, ArregloRiesgoCategoria=ArregloRiesgoCategoria, MatrizRiesgoCategoria=MatrizRiesgoCategoria, MatrizRiesgoControl=MatrizRiesgoControl, matrizA=matrizA, col=col, fila=fila, CatalogoEval=CatalogoEval, MatrizRiesgoClasificacion=MatrizRiesgoClasificacion, ArregloMatrizControl=ArregloMatrizControl, GrupoControl=GrupoControl, Parametro=Parametro,   AmbienteControl=AmbienteControl, NivelMadurez=NivelMadurez, ClasificacionRiesgo=ClasificacionRiesgo, TipoTratamientoRiesgo=TipoTratamientoRiesgo, Organizacion=Organizacion, SeguridadTi=SeguridadTi, TipoCumplimiento=TipoCumplimiento, ActivoTiProceso=ActivoTiProceso, ObjetivoOrganizacion=ObjetivoOrganizacion, AnalisisRiesgo=AnalisisRiesgo, TipoFactorRiesgo=TipoFactorRiesgo, CatalogoControl=CatalogoControl, NivelRiesgo=NivelRiesgo, ArregloMatrizRiesgo=ArregloMatrizRiesgo, ArregloEvidenciaControl = ArregloEvidenciaControl, MatrizControlId=ArregloMatrizControl1)
